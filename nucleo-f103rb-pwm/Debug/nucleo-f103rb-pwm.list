
nucleo-f103rb-pwm.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004c68  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000208  08004d78  08004d78  00005d78  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004f80  08004f80  0000600c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08004f80  08004f80  0000600c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08004f80  08004f80  0000600c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004f80  08004f80  00005f80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004f84  08004f84  00005f84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08004f88  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000031c  2000000c  08004f94  0000600c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000328  08004f94  00006328  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000600c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b86f  00000000  00000000  00006035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001b7b  00000000  00000000  000118a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c00  00000000  00000000  00013420  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000970  00000000  00000000  00014020  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000176c7  00000000  00000000  00014990  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000cfed  00000000  00000000  0002c057  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008a3f8  00000000  00000000  00039044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c343c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003640  00000000  00000000  000c3480  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  000c6ac0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	2000000c 	.word	0x2000000c
 800012c:	00000000 	.word	0x00000000
 8000130:	08004d60 	.word	0x08004d60

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000010 	.word	0x20000010
 800014c:	08004d60 	.word	0x08004d60

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	@ 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__gedf2>:
 80008ec:	f04f 3cff 	mov.w	ip, #4294967295
 80008f0:	e006      	b.n	8000900 <__cmpdf2+0x4>
 80008f2:	bf00      	nop

080008f4 <__ledf2>:
 80008f4:	f04f 0c01 	mov.w	ip, #1
 80008f8:	e002      	b.n	8000900 <__cmpdf2+0x4>
 80008fa:	bf00      	nop

080008fc <__cmpdf2>:
 80008fc:	f04f 0c01 	mov.w	ip, #1
 8000900:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000904:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000908:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800090c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000916:	d01b      	beq.n	8000950 <__cmpdf2+0x54>
 8000918:	b001      	add	sp, #4
 800091a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800091e:	bf0c      	ite	eq
 8000920:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000924:	ea91 0f03 	teqne	r1, r3
 8000928:	bf02      	ittt	eq
 800092a:	ea90 0f02 	teqeq	r0, r2
 800092e:	2000      	moveq	r0, #0
 8000930:	4770      	bxeq	lr
 8000932:	f110 0f00 	cmn.w	r0, #0
 8000936:	ea91 0f03 	teq	r1, r3
 800093a:	bf58      	it	pl
 800093c:	4299      	cmppl	r1, r3
 800093e:	bf08      	it	eq
 8000940:	4290      	cmpeq	r0, r2
 8000942:	bf2c      	ite	cs
 8000944:	17d8      	asrcs	r0, r3, #31
 8000946:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800094a:	f040 0001 	orr.w	r0, r0, #1
 800094e:	4770      	bx	lr
 8000950:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000954:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000958:	d102      	bne.n	8000960 <__cmpdf2+0x64>
 800095a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800095e:	d107      	bne.n	8000970 <__cmpdf2+0x74>
 8000960:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d1d6      	bne.n	8000918 <__cmpdf2+0x1c>
 800096a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800096e:	d0d3      	beq.n	8000918 <__cmpdf2+0x1c>
 8000970:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop

08000978 <__aeabi_cdrcmple>:
 8000978:	4684      	mov	ip, r0
 800097a:	4610      	mov	r0, r2
 800097c:	4662      	mov	r2, ip
 800097e:	468c      	mov	ip, r1
 8000980:	4619      	mov	r1, r3
 8000982:	4663      	mov	r3, ip
 8000984:	e000      	b.n	8000988 <__aeabi_cdcmpeq>
 8000986:	bf00      	nop

08000988 <__aeabi_cdcmpeq>:
 8000988:	b501      	push	{r0, lr}
 800098a:	f7ff ffb7 	bl	80008fc <__cmpdf2>
 800098e:	2800      	cmp	r0, #0
 8000990:	bf48      	it	mi
 8000992:	f110 0f00 	cmnmi.w	r0, #0
 8000996:	bd01      	pop	{r0, pc}

08000998 <__aeabi_dcmpeq>:
 8000998:	f84d ed08 	str.w	lr, [sp, #-8]!
 800099c:	f7ff fff4 	bl	8000988 <__aeabi_cdcmpeq>
 80009a0:	bf0c      	ite	eq
 80009a2:	2001      	moveq	r0, #1
 80009a4:	2000      	movne	r0, #0
 80009a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009aa:	bf00      	nop

080009ac <__aeabi_dcmplt>:
 80009ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009b0:	f7ff ffea 	bl	8000988 <__aeabi_cdcmpeq>
 80009b4:	bf34      	ite	cc
 80009b6:	2001      	movcc	r0, #1
 80009b8:	2000      	movcs	r0, #0
 80009ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80009be:	bf00      	nop

080009c0 <__aeabi_dcmple>:
 80009c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c4:	f7ff ffe0 	bl	8000988 <__aeabi_cdcmpeq>
 80009c8:	bf94      	ite	ls
 80009ca:	2001      	movls	r0, #1
 80009cc:	2000      	movhi	r0, #0
 80009ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80009d2:	bf00      	nop

080009d4 <__aeabi_dcmpge>:
 80009d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d8:	f7ff ffce 	bl	8000978 <__aeabi_cdrcmple>
 80009dc:	bf94      	ite	ls
 80009de:	2001      	movls	r0, #1
 80009e0:	2000      	movhi	r0, #0
 80009e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e6:	bf00      	nop

080009e8 <__aeabi_dcmpgt>:
 80009e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ec:	f7ff ffc4 	bl	8000978 <__aeabi_cdrcmple>
 80009f0:	bf34      	ite	cc
 80009f2:	2001      	movcc	r0, #1
 80009f4:	2000      	movcs	r0, #0
 80009f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fa:	bf00      	nop

080009fc <__aeabi_d2iz>:
 80009fc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a00:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a04:	d215      	bcs.n	8000a32 <__aeabi_d2iz+0x36>
 8000a06:	d511      	bpl.n	8000a2c <__aeabi_d2iz+0x30>
 8000a08:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a0c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a10:	d912      	bls.n	8000a38 <__aeabi_d2iz+0x3c>
 8000a12:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a16:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a1a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a1e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a22:	fa23 f002 	lsr.w	r0, r3, r2
 8000a26:	bf18      	it	ne
 8000a28:	4240      	negne	r0, r0
 8000a2a:	4770      	bx	lr
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a36:	d105      	bne.n	8000a44 <__aeabi_d2iz+0x48>
 8000a38:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a3c:	bf08      	it	eq
 8000a3e:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a42:	4770      	bx	lr
 8000a44:	f04f 0000 	mov.w	r0, #0
 8000a48:	4770      	bx	lr
 8000a4a:	bf00      	nop

08000a4c <__aeabi_d2uiz>:
 8000a4c:	004a      	lsls	r2, r1, #1
 8000a4e:	d211      	bcs.n	8000a74 <__aeabi_d2uiz+0x28>
 8000a50:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a54:	d211      	bcs.n	8000a7a <__aeabi_d2uiz+0x2e>
 8000a56:	d50d      	bpl.n	8000a74 <__aeabi_d2uiz+0x28>
 8000a58:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a5c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a60:	d40e      	bmi.n	8000a80 <__aeabi_d2uiz+0x34>
 8000a62:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a66:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a6a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a6e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a72:	4770      	bx	lr
 8000a74:	f04f 0000 	mov.w	r0, #0
 8000a78:	4770      	bx	lr
 8000a7a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a7e:	d102      	bne.n	8000a86 <__aeabi_d2uiz+0x3a>
 8000a80:	f04f 30ff 	mov.w	r0, #4294967295
 8000a84:	4770      	bx	lr
 8000a86:	f04f 0000 	mov.w	r0, #0
 8000a8a:	4770      	bx	lr

08000a8c <__aeabi_d2f>:
 8000a8c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a90:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000a94:	bf24      	itt	cs
 8000a96:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000a9a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000a9e:	d90d      	bls.n	8000abc <__aeabi_d2f+0x30>
 8000aa0:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000aa4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aac:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000ab0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ab4:	bf08      	it	eq
 8000ab6:	f020 0001 	biceq.w	r0, r0, #1
 8000aba:	4770      	bx	lr
 8000abc:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000ac0:	d121      	bne.n	8000b06 <__aeabi_d2f+0x7a>
 8000ac2:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000ac6:	bfbc      	itt	lt
 8000ac8:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000acc:	4770      	bxlt	lr
 8000ace:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000ad2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ad6:	f1c2 0218 	rsb	r2, r2, #24
 8000ada:	f1c2 0c20 	rsb	ip, r2, #32
 8000ade:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ae2:	fa20 f002 	lsr.w	r0, r0, r2
 8000ae6:	bf18      	it	ne
 8000ae8:	f040 0001 	orrne.w	r0, r0, #1
 8000aec:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000af0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000af4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af8:	ea40 000c 	orr.w	r0, r0, ip
 8000afc:	fa23 f302 	lsr.w	r3, r3, r2
 8000b00:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b04:	e7cc      	b.n	8000aa0 <__aeabi_d2f+0x14>
 8000b06:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b0a:	d107      	bne.n	8000b1c <__aeabi_d2f+0x90>
 8000b0c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b10:	bf1e      	ittt	ne
 8000b12:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b16:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b1a:	4770      	bxne	lr
 8000b1c:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b20:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b24:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b28:	4770      	bx	lr
 8000b2a:	bf00      	nop

08000b2c <__aeabi_frsub>:
 8000b2c:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000b30:	e002      	b.n	8000b38 <__addsf3>
 8000b32:	bf00      	nop

08000b34 <__aeabi_fsub>:
 8000b34:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000b38 <__addsf3>:
 8000b38:	0042      	lsls	r2, r0, #1
 8000b3a:	bf1f      	itttt	ne
 8000b3c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b40:	ea92 0f03 	teqne	r2, r3
 8000b44:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b48:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b4c:	d06a      	beq.n	8000c24 <__addsf3+0xec>
 8000b4e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b52:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b56:	bfc1      	itttt	gt
 8000b58:	18d2      	addgt	r2, r2, r3
 8000b5a:	4041      	eorgt	r1, r0
 8000b5c:	4048      	eorgt	r0, r1
 8000b5e:	4041      	eorgt	r1, r0
 8000b60:	bfb8      	it	lt
 8000b62:	425b      	neglt	r3, r3
 8000b64:	2b19      	cmp	r3, #25
 8000b66:	bf88      	it	hi
 8000b68:	4770      	bxhi	lr
 8000b6a:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000b6e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b72:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000b76:	bf18      	it	ne
 8000b78:	4240      	negne	r0, r0
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000b82:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000b86:	bf18      	it	ne
 8000b88:	4249      	negne	r1, r1
 8000b8a:	ea92 0f03 	teq	r2, r3
 8000b8e:	d03f      	beq.n	8000c10 <__addsf3+0xd8>
 8000b90:	f1a2 0201 	sub.w	r2, r2, #1
 8000b94:	fa41 fc03 	asr.w	ip, r1, r3
 8000b98:	eb10 000c 	adds.w	r0, r0, ip
 8000b9c:	f1c3 0320 	rsb	r3, r3, #32
 8000ba0:	fa01 f103 	lsl.w	r1, r1, r3
 8000ba4:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000ba8:	d502      	bpl.n	8000bb0 <__addsf3+0x78>
 8000baa:	4249      	negs	r1, r1
 8000bac:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bb0:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000bb4:	d313      	bcc.n	8000bde <__addsf3+0xa6>
 8000bb6:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000bba:	d306      	bcc.n	8000bca <__addsf3+0x92>
 8000bbc:	0840      	lsrs	r0, r0, #1
 8000bbe:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bc2:	f102 0201 	add.w	r2, r2, #1
 8000bc6:	2afe      	cmp	r2, #254	@ 0xfe
 8000bc8:	d251      	bcs.n	8000c6e <__addsf3+0x136>
 8000bca:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000bce:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bd2:	bf08      	it	eq
 8000bd4:	f020 0001 	biceq.w	r0, r0, #1
 8000bd8:	ea40 0003 	orr.w	r0, r0, r3
 8000bdc:	4770      	bx	lr
 8000bde:	0049      	lsls	r1, r1, #1
 8000be0:	eb40 0000 	adc.w	r0, r0, r0
 8000be4:	3a01      	subs	r2, #1
 8000be6:	bf28      	it	cs
 8000be8:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000bec:	d2ed      	bcs.n	8000bca <__addsf3+0x92>
 8000bee:	fab0 fc80 	clz	ip, r0
 8000bf2:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bf6:	ebb2 020c 	subs.w	r2, r2, ip
 8000bfa:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bfe:	bfaa      	itet	ge
 8000c00:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c04:	4252      	neglt	r2, r2
 8000c06:	4318      	orrge	r0, r3
 8000c08:	bfbc      	itt	lt
 8000c0a:	40d0      	lsrlt	r0, r2
 8000c0c:	4318      	orrlt	r0, r3
 8000c0e:	4770      	bx	lr
 8000c10:	f092 0f00 	teq	r2, #0
 8000c14:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000c18:	bf06      	itte	eq
 8000c1a:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000c1e:	3201      	addeq	r2, #1
 8000c20:	3b01      	subne	r3, #1
 8000c22:	e7b5      	b.n	8000b90 <__addsf3+0x58>
 8000c24:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c28:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c2c:	bf18      	it	ne
 8000c2e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c32:	d021      	beq.n	8000c78 <__addsf3+0x140>
 8000c34:	ea92 0f03 	teq	r2, r3
 8000c38:	d004      	beq.n	8000c44 <__addsf3+0x10c>
 8000c3a:	f092 0f00 	teq	r2, #0
 8000c3e:	bf08      	it	eq
 8000c40:	4608      	moveq	r0, r1
 8000c42:	4770      	bx	lr
 8000c44:	ea90 0f01 	teq	r0, r1
 8000c48:	bf1c      	itt	ne
 8000c4a:	2000      	movne	r0, #0
 8000c4c:	4770      	bxne	lr
 8000c4e:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000c52:	d104      	bne.n	8000c5e <__addsf3+0x126>
 8000c54:	0040      	lsls	r0, r0, #1
 8000c56:	bf28      	it	cs
 8000c58:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000c5c:	4770      	bx	lr
 8000c5e:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000c62:	bf3c      	itt	cc
 8000c64:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000c68:	4770      	bxcc	lr
 8000c6a:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000c6e:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000c72:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c76:	4770      	bx	lr
 8000c78:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c7c:	bf16      	itet	ne
 8000c7e:	4608      	movne	r0, r1
 8000c80:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c84:	4601      	movne	r1, r0
 8000c86:	0242      	lsls	r2, r0, #9
 8000c88:	bf06      	itte	eq
 8000c8a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c8e:	ea90 0f01 	teqeq	r0, r1
 8000c92:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000c96:	4770      	bx	lr

08000c98 <__aeabi_ui2f>:
 8000c98:	f04f 0300 	mov.w	r3, #0
 8000c9c:	e004      	b.n	8000ca8 <__aeabi_i2f+0x8>
 8000c9e:	bf00      	nop

08000ca0 <__aeabi_i2f>:
 8000ca0:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000ca4:	bf48      	it	mi
 8000ca6:	4240      	negmi	r0, r0
 8000ca8:	ea5f 0c00 	movs.w	ip, r0
 8000cac:	bf08      	it	eq
 8000cae:	4770      	bxeq	lr
 8000cb0:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000cb4:	4601      	mov	r1, r0
 8000cb6:	f04f 0000 	mov.w	r0, #0
 8000cba:	e01c      	b.n	8000cf6 <__aeabi_l2f+0x2a>

08000cbc <__aeabi_ul2f>:
 8000cbc:	ea50 0201 	orrs.w	r2, r0, r1
 8000cc0:	bf08      	it	eq
 8000cc2:	4770      	bxeq	lr
 8000cc4:	f04f 0300 	mov.w	r3, #0
 8000cc8:	e00a      	b.n	8000ce0 <__aeabi_l2f+0x14>
 8000cca:	bf00      	nop

08000ccc <__aeabi_l2f>:
 8000ccc:	ea50 0201 	orrs.w	r2, r0, r1
 8000cd0:	bf08      	it	eq
 8000cd2:	4770      	bxeq	lr
 8000cd4:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000cd8:	d502      	bpl.n	8000ce0 <__aeabi_l2f+0x14>
 8000cda:	4240      	negs	r0, r0
 8000cdc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce0:	ea5f 0c01 	movs.w	ip, r1
 8000ce4:	bf02      	ittt	eq
 8000ce6:	4684      	moveq	ip, r0
 8000ce8:	4601      	moveq	r1, r0
 8000cea:	2000      	moveq	r0, #0
 8000cec:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000cf0:	bf08      	it	eq
 8000cf2:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000cf6:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000cfa:	fabc f28c 	clz	r2, ip
 8000cfe:	3a08      	subs	r2, #8
 8000d00:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d04:	db10      	blt.n	8000d28 <__aeabi_l2f+0x5c>
 8000d06:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d0a:	4463      	add	r3, ip
 8000d0c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d10:	f1c2 0220 	rsb	r2, r2, #32
 8000d14:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000d18:	fa20 f202 	lsr.w	r2, r0, r2
 8000d1c:	eb43 0002 	adc.w	r0, r3, r2
 8000d20:	bf08      	it	eq
 8000d22:	f020 0001 	biceq.w	r0, r0, #1
 8000d26:	4770      	bx	lr
 8000d28:	f102 0220 	add.w	r2, r2, #32
 8000d2c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d30:	f1c2 0220 	rsb	r2, r2, #32
 8000d34:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d38:	fa21 f202 	lsr.w	r2, r1, r2
 8000d3c:	eb43 0002 	adc.w	r0, r3, r2
 8000d40:	bf08      	it	eq
 8000d42:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d46:	4770      	bx	lr

08000d48 <HAL_TIM_PWM_PulseFinishedCallback>:

int dataSentFlag = 0; 			//Will be set high once DMA is stopped


void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b082      	sub	sp, #8
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Stop_DMA(&htim1, TIM_CHANNEL_1);
 8000d50:	2100      	movs	r1, #0
 8000d52:	4805      	ldr	r0, [pc, #20]	@ (8000d68 <HAL_TIM_PWM_PulseFinishedCallback+0x20>)
 8000d54:	f002 f82e 	bl	8002db4 <HAL_TIM_PWM_Stop_DMA>
	dataSentFlag = 1;
 8000d58:	4b04      	ldr	r3, [pc, #16]	@ (8000d6c <HAL_TIM_PWM_PulseFinishedCallback+0x24>)
 8000d5a:	2201      	movs	r2, #1
 8000d5c:	601a      	str	r2, [r3, #0]
}
 8000d5e:	bf00      	nop
 8000d60:	3708      	adds	r7, #8
 8000d62:	46bd      	mov	sp, r7
 8000d64:	bd80      	pop	{r7, pc}
 8000d66:	bf00      	nop
 8000d68:	20000028 	.word	0x20000028
 8000d6c:	2000013c 	.word	0x2000013c

08000d70 <Set_LED>:

void Set_LED (int LED_NUM, int RED, int GREEN, int BLUE)
{
 8000d70:	b480      	push	{r7}
 8000d72:	b085      	sub	sp, #20
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	60f8      	str	r0, [r7, #12]
 8000d78:	60b9      	str	r1, [r7, #8]
 8000d7a:	607a      	str	r2, [r7, #4]
 8000d7c:	603b      	str	r3, [r7, #0]
	LED_DATA[LED_NUM][0] = LED_NUM;
 8000d7e:	68fb      	ldr	r3, [r7, #12]
 8000d80:	b2d9      	uxtb	r1, r3
 8000d82:	4a10      	ldr	r2, [pc, #64]	@ (8000dc4 <Set_LED+0x54>)
 8000d84:	68fb      	ldr	r3, [r7, #12]
 8000d86:	f802 1023 	strb.w	r1, [r2, r3, lsl #2]
	LED_DATA[LED_NUM][1] = GREEN;
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	b2d9      	uxtb	r1, r3
 8000d8e:	4a0d      	ldr	r2, [pc, #52]	@ (8000dc4 <Set_LED+0x54>)
 8000d90:	68fb      	ldr	r3, [r7, #12]
 8000d92:	009b      	lsls	r3, r3, #2
 8000d94:	4413      	add	r3, r2
 8000d96:	460a      	mov	r2, r1
 8000d98:	705a      	strb	r2, [r3, #1]
	LED_DATA[LED_NUM][2] = RED;
 8000d9a:	68bb      	ldr	r3, [r7, #8]
 8000d9c:	b2d9      	uxtb	r1, r3
 8000d9e:	4a09      	ldr	r2, [pc, #36]	@ (8000dc4 <Set_LED+0x54>)
 8000da0:	68fb      	ldr	r3, [r7, #12]
 8000da2:	009b      	lsls	r3, r3, #2
 8000da4:	4413      	add	r3, r2
 8000da6:	460a      	mov	r2, r1
 8000da8:	709a      	strb	r2, [r3, #2]
	LED_DATA[LED_NUM][3] = BLUE;
 8000daa:	683b      	ldr	r3, [r7, #0]
 8000dac:	b2d9      	uxtb	r1, r3
 8000dae:	4a05      	ldr	r2, [pc, #20]	@ (8000dc4 <Set_LED+0x54>)
 8000db0:	68fb      	ldr	r3, [r7, #12]
 8000db2:	009b      	lsls	r3, r3, #2
 8000db4:	4413      	add	r3, r2
 8000db6:	460a      	mov	r2, r1
 8000db8:	70da      	strb	r2, [r3, #3]
}
 8000dba:	bf00      	nop
 8000dbc:	3714      	adds	r7, #20
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	bc80      	pop	{r7}
 8000dc2:	4770      	bx	lr
 8000dc4:	200000fc 	.word	0x200000fc

08000dc8 <SET_BRIGHTNESS>:

void SET_BRIGHTNESS (int BRIGHTNESS)
{
 8000dc8:	b5b0      	push	{r4, r5, r7, lr}
 8000dca:	b086      	sub	sp, #24
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	6078      	str	r0, [r7, #4]
#if USE_BRIGHTNESS
	if (BRIGHTNESS > 45) BRIGHTNESS = 45;
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	2b2d      	cmp	r3, #45	@ 0x2d
 8000dd4:	dd01      	ble.n	8000dda <SET_BRIGHTNESS+0x12>
 8000dd6:	232d      	movs	r3, #45	@ 0x2d
 8000dd8:	607b      	str	r3, [r7, #4]
	for(int i = 0; i<MAX_LED; i++){
 8000dda:	2300      	movs	r3, #0
 8000ddc:	617b      	str	r3, [r7, #20]
 8000dde:	e05f      	b.n	8000ea0 <SET_BRIGHTNESS+0xd8>
		LED_MOD[i][0] = LED_DATA[i][0];
 8000de0:	4a35      	ldr	r2, [pc, #212]	@ (8000eb8 <SET_BRIGHTNESS+0xf0>)
 8000de2:	697b      	ldr	r3, [r7, #20]
 8000de4:	f812 1023 	ldrb.w	r1, [r2, r3, lsl #2]
 8000de8:	4a34      	ldr	r2, [pc, #208]	@ (8000ebc <SET_BRIGHTNESS+0xf4>)
 8000dea:	697b      	ldr	r3, [r7, #20]
 8000dec:	f802 1023 	strb.w	r1, [r2, r3, lsl #2]
		for(int j = 0; j < 4; j ++){
 8000df0:	2300      	movs	r3, #0
 8000df2:	613b      	str	r3, [r7, #16]
 8000df4:	e04e      	b.n	8000e94 <SET_BRIGHTNESS+0xcc>
			float ANG = 90-BRIGHTNESS;
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	f1c3 035a 	rsb	r3, r3, #90	@ 0x5a
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	f7ff ff4f 	bl	8000ca0 <__aeabi_i2f>
 8000e02:	4603      	mov	r3, r0
 8000e04:	60fb      	str	r3, [r7, #12]
			ANG = ANG*PI/180;
 8000e06:	68f8      	ldr	r0, [r7, #12]
 8000e08:	f7ff fb06 	bl	8000418 <__aeabi_f2d>
 8000e0c:	a328      	add	r3, pc, #160	@ (adr r3, 8000eb0 <SET_BRIGHTNESS+0xe8>)
 8000e0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e12:	f7ff fb59 	bl	80004c8 <__aeabi_dmul>
 8000e16:	4602      	mov	r2, r0
 8000e18:	460b      	mov	r3, r1
 8000e1a:	4610      	mov	r0, r2
 8000e1c:	4619      	mov	r1, r3
 8000e1e:	f04f 0200 	mov.w	r2, #0
 8000e22:	4b27      	ldr	r3, [pc, #156]	@ (8000ec0 <SET_BRIGHTNESS+0xf8>)
 8000e24:	f7ff fc7a 	bl	800071c <__aeabi_ddiv>
 8000e28:	4602      	mov	r2, r0
 8000e2a:	460b      	mov	r3, r1
 8000e2c:	4610      	mov	r0, r2
 8000e2e:	4619      	mov	r1, r3
 8000e30:	f7ff fe2c 	bl	8000a8c <__aeabi_d2f>
 8000e34:	4603      	mov	r3, r0
 8000e36:	60fb      	str	r3, [r7, #12]
			LED_MOD[i][j] = (LED_DATA[i][j])/tan(ANG);
 8000e38:	4a1f      	ldr	r2, [pc, #124]	@ (8000eb8 <SET_BRIGHTNESS+0xf0>)
 8000e3a:	697b      	ldr	r3, [r7, #20]
 8000e3c:	009b      	lsls	r3, r3, #2
 8000e3e:	441a      	add	r2, r3
 8000e40:	693b      	ldr	r3, [r7, #16]
 8000e42:	4413      	add	r3, r2
 8000e44:	781b      	ldrb	r3, [r3, #0]
 8000e46:	4618      	mov	r0, r3
 8000e48:	f7ff fad4 	bl	80003f4 <__aeabi_i2d>
 8000e4c:	4604      	mov	r4, r0
 8000e4e:	460d      	mov	r5, r1
 8000e50:	68f8      	ldr	r0, [r7, #12]
 8000e52:	f7ff fae1 	bl	8000418 <__aeabi_f2d>
 8000e56:	4602      	mov	r2, r0
 8000e58:	460b      	mov	r3, r1
 8000e5a:	4610      	mov	r0, r2
 8000e5c:	4619      	mov	r1, r3
 8000e5e:	f002 ff45 	bl	8003cec <tan>
 8000e62:	4602      	mov	r2, r0
 8000e64:	460b      	mov	r3, r1
 8000e66:	4620      	mov	r0, r4
 8000e68:	4629      	mov	r1, r5
 8000e6a:	f7ff fc57 	bl	800071c <__aeabi_ddiv>
 8000e6e:	4602      	mov	r2, r0
 8000e70:	460b      	mov	r3, r1
 8000e72:	4610      	mov	r0, r2
 8000e74:	4619      	mov	r1, r3
 8000e76:	f7ff fde9 	bl	8000a4c <__aeabi_d2uiz>
 8000e7a:	4603      	mov	r3, r0
 8000e7c:	b2d9      	uxtb	r1, r3
 8000e7e:	4a0f      	ldr	r2, [pc, #60]	@ (8000ebc <SET_BRIGHTNESS+0xf4>)
 8000e80:	697b      	ldr	r3, [r7, #20]
 8000e82:	009b      	lsls	r3, r3, #2
 8000e84:	441a      	add	r2, r3
 8000e86:	693b      	ldr	r3, [r7, #16]
 8000e88:	4413      	add	r3, r2
 8000e8a:	460a      	mov	r2, r1
 8000e8c:	701a      	strb	r2, [r3, #0]
		for(int j = 0; j < 4; j ++){
 8000e8e:	693b      	ldr	r3, [r7, #16]
 8000e90:	3301      	adds	r3, #1
 8000e92:	613b      	str	r3, [r7, #16]
 8000e94:	693b      	ldr	r3, [r7, #16]
 8000e96:	2b03      	cmp	r3, #3
 8000e98:	ddad      	ble.n	8000df6 <SET_BRIGHTNESS+0x2e>
	for(int i = 0; i<MAX_LED; i++){
 8000e9a:	697b      	ldr	r3, [r7, #20]
 8000e9c:	3301      	adds	r3, #1
 8000e9e:	617b      	str	r3, [r7, #20]
 8000ea0:	697b      	ldr	r3, [r7, #20]
 8000ea2:	2b07      	cmp	r3, #7
 8000ea4:	dd9c      	ble.n	8000de0 <SET_BRIGHTNESS+0x18>

		}
	}
#endif
}
 8000ea6:	bf00      	nop
 8000ea8:	bf00      	nop
 8000eaa:	3718      	adds	r7, #24
 8000eac:	46bd      	mov	sp, r7
 8000eae:	bdb0      	pop	{r4, r5, r7, pc}
 8000eb0:	fc8b007a 	.word	0xfc8b007a
 8000eb4:	400921fa 	.word	0x400921fa
 8000eb8:	200000fc 	.word	0x200000fc
 8000ebc:	2000011c 	.word	0x2000011c
 8000ec0:	40668000 	.word	0x40668000

08000ec4 <WS1282B_SEND>:

uint16_t pwmData[24*MAX_LED + 50];

void WS1282B_SEND (void){
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b086      	sub	sp, #24
 8000ec8:	af00      	add	r7, sp, #0
	uint32_t idx = 0;
 8000eca:	2300      	movs	r3, #0
 8000ecc:	617b      	str	r3, [r7, #20]
	uint32_t color;

	for(int i=0; i < MAX_LED; i++){
 8000ece:	2300      	movs	r3, #0
 8000ed0:	613b      	str	r3, [r7, #16]
 8000ed2:	e036      	b.n	8000f42 <WS1282B_SEND+0x7e>
		color = (LED_MOD[i][1] << 16) | (LED_MOD[i][2] << 8) | (LED_MOD[i][3]);
 8000ed4:	4a2c      	ldr	r2, [pc, #176]	@ (8000f88 <WS1282B_SEND+0xc4>)
 8000ed6:	693b      	ldr	r3, [r7, #16]
 8000ed8:	009b      	lsls	r3, r3, #2
 8000eda:	4413      	add	r3, r2
 8000edc:	785b      	ldrb	r3, [r3, #1]
 8000ede:	041a      	lsls	r2, r3, #16
 8000ee0:	4929      	ldr	r1, [pc, #164]	@ (8000f88 <WS1282B_SEND+0xc4>)
 8000ee2:	693b      	ldr	r3, [r7, #16]
 8000ee4:	009b      	lsls	r3, r3, #2
 8000ee6:	440b      	add	r3, r1
 8000ee8:	789b      	ldrb	r3, [r3, #2]
 8000eea:	021b      	lsls	r3, r3, #8
 8000eec:	431a      	orrs	r2, r3
 8000eee:	4926      	ldr	r1, [pc, #152]	@ (8000f88 <WS1282B_SEND+0xc4>)
 8000ef0:	693b      	ldr	r3, [r7, #16]
 8000ef2:	009b      	lsls	r3, r3, #2
 8000ef4:	440b      	add	r3, r1
 8000ef6:	78db      	ldrb	r3, [r3, #3]
 8000ef8:	4313      	orrs	r3, r2
 8000efa:	607b      	str	r3, [r7, #4]

		for(int j = 23; j> 0; j--){
 8000efc:	2317      	movs	r3, #23
 8000efe:	60fb      	str	r3, [r7, #12]
 8000f00:	e019      	b.n	8000f36 <WS1282B_SEND+0x72>
			if(color&(1<<j)) pwmData[idx] = 60;
 8000f02:	2201      	movs	r2, #1
 8000f04:	68fb      	ldr	r3, [r7, #12]
 8000f06:	fa02 f303 	lsl.w	r3, r2, r3
 8000f0a:	461a      	mov	r2, r3
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	4013      	ands	r3, r2
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d005      	beq.n	8000f20 <WS1282B_SEND+0x5c>
 8000f14:	4a1d      	ldr	r2, [pc, #116]	@ (8000f8c <WS1282B_SEND+0xc8>)
 8000f16:	697b      	ldr	r3, [r7, #20]
 8000f18:	213c      	movs	r1, #60	@ 0x3c
 8000f1a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8000f1e:	e004      	b.n	8000f2a <WS1282B_SEND+0x66>
			else pwmData[idx] = 20;
 8000f20:	4a1a      	ldr	r2, [pc, #104]	@ (8000f8c <WS1282B_SEND+0xc8>)
 8000f22:	697b      	ldr	r3, [r7, #20]
 8000f24:	2114      	movs	r1, #20
 8000f26:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

			idx++;
 8000f2a:	697b      	ldr	r3, [r7, #20]
 8000f2c:	3301      	adds	r3, #1
 8000f2e:	617b      	str	r3, [r7, #20]
		for(int j = 23; j> 0; j--){
 8000f30:	68fb      	ldr	r3, [r7, #12]
 8000f32:	3b01      	subs	r3, #1
 8000f34:	60fb      	str	r3, [r7, #12]
 8000f36:	68fb      	ldr	r3, [r7, #12]
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	dce2      	bgt.n	8000f02 <WS1282B_SEND+0x3e>
	for(int i=0; i < MAX_LED; i++){
 8000f3c:	693b      	ldr	r3, [r7, #16]
 8000f3e:	3301      	adds	r3, #1
 8000f40:	613b      	str	r3, [r7, #16]
 8000f42:	693b      	ldr	r3, [r7, #16]
 8000f44:	2b07      	cmp	r3, #7
 8000f46:	ddc5      	ble.n	8000ed4 <WS1282B_SEND+0x10>
		}
	}

	for(int i = 24; i<74; i++){
 8000f48:	2318      	movs	r3, #24
 8000f4a:	60bb      	str	r3, [r7, #8]
 8000f4c:	e007      	b.n	8000f5e <WS1282B_SEND+0x9a>
		pwmData[i] = 0;
 8000f4e:	4a0f      	ldr	r2, [pc, #60]	@ (8000f8c <WS1282B_SEND+0xc8>)
 8000f50:	68bb      	ldr	r3, [r7, #8]
 8000f52:	2100      	movs	r1, #0
 8000f54:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for(int i = 24; i<74; i++){
 8000f58:	68bb      	ldr	r3, [r7, #8]
 8000f5a:	3301      	adds	r3, #1
 8000f5c:	60bb      	str	r3, [r7, #8]
 8000f5e:	68bb      	ldr	r3, [r7, #8]
 8000f60:	2b49      	cmp	r3, #73	@ 0x49
 8000f62:	ddf4      	ble.n	8000f4e <WS1282B_SEND+0x8a>
	}

	HAL_TIM_PWM_Start_DMA(&htim1, TIM_CHANNEL_1, (uint32_t *) pwmData, (24*MAX_LED	+50));
 8000f64:	23f2      	movs	r3, #242	@ 0xf2
 8000f66:	4a09      	ldr	r2, [pc, #36]	@ (8000f8c <WS1282B_SEND+0xc8>)
 8000f68:	2100      	movs	r1, #0
 8000f6a:	4809      	ldr	r0, [pc, #36]	@ (8000f90 <WS1282B_SEND+0xcc>)
 8000f6c:	f001 fd80 	bl	8002a70 <HAL_TIM_PWM_Start_DMA>
	while(!dataSentFlag){};
 8000f70:	bf00      	nop
 8000f72:	4b08      	ldr	r3, [pc, #32]	@ (8000f94 <WS1282B_SEND+0xd0>)
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d0fb      	beq.n	8000f72 <WS1282B_SEND+0xae>
	dataSentFlag = 0;
 8000f7a:	4b06      	ldr	r3, [pc, #24]	@ (8000f94 <WS1282B_SEND+0xd0>)
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	601a      	str	r2, [r3, #0]

}
 8000f80:	bf00      	nop
 8000f82:	3718      	adds	r7, #24
 8000f84:	46bd      	mov	sp, r7
 8000f86:	bd80      	pop	{r7, pc}
 8000f88:	2000011c 	.word	0x2000011c
 8000f8c:	20000140 	.word	0x20000140
 8000f90:	20000028 	.word	0x20000028
 8000f94:	2000013c 	.word	0x2000013c

08000f98 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f9c:	f000 fb1c 	bl	80015d8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000fa0:	f000 f821 	bl	8000fe6 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000fa4:	f000 f94c 	bl	8001240 <MX_GPIO_Init>
  MX_DMA_Init();
 8000fa8:	f000 f92c 	bl	8001204 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000fac:	f000 f900 	bl	80011b0 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8000fb0:	f000 f85e 	bl	8001070 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

  Set_LED(0, 255, 0, 0);
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	21ff      	movs	r1, #255	@ 0xff
 8000fba:	2000      	movs	r0, #0
 8000fbc:	f7ff fed8 	bl	8000d70 <Set_LED>
  Set_LED(1, 0, 255, 0);
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	22ff      	movs	r2, #255	@ 0xff
 8000fc4:	2100      	movs	r1, #0
 8000fc6:	2001      	movs	r0, #1
 8000fc8:	f7ff fed2 	bl	8000d70 <Set_LED>
  Set_LED(2, 0, 0, 255);
 8000fcc:	23ff      	movs	r3, #255	@ 0xff
 8000fce:	2200      	movs	r2, #0
 8000fd0:	2100      	movs	r1, #0
 8000fd2:	2002      	movs	r0, #2
 8000fd4:	f7ff fecc 	bl	8000d70 <Set_LED>

  SET_BRIGHTNESS(45);
 8000fd8:	202d      	movs	r0, #45	@ 0x2d
 8000fda:	f7ff fef5 	bl	8000dc8 <SET_BRIGHTNESS>
  WS1282B_SEND();
 8000fde:	f7ff ff71 	bl	8000ec4 <WS1282B_SEND>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000fe2:	bf00      	nop
 8000fe4:	e7fd      	b.n	8000fe2 <main+0x4a>

08000fe6 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fe6:	b580      	push	{r7, lr}
 8000fe8:	b090      	sub	sp, #64	@ 0x40
 8000fea:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fec:	f107 0318 	add.w	r3, r7, #24
 8000ff0:	2228      	movs	r2, #40	@ 0x28
 8000ff2:	2100      	movs	r1, #0
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	f002 fe4d 	bl	8003c94 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ffa:	1d3b      	adds	r3, r7, #4
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	601a      	str	r2, [r3, #0]
 8001000:	605a      	str	r2, [r3, #4]
 8001002:	609a      	str	r2, [r3, #8]
 8001004:	60da      	str	r2, [r3, #12]
 8001006:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001008:	2301      	movs	r3, #1
 800100a:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800100c:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8001010:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001012:	2300      	movs	r3, #0
 8001014:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001016:	2301      	movs	r3, #1
 8001018:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800101a:	2302      	movs	r3, #2
 800101c:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800101e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001022:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001024:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8001028:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800102a:	f107 0318 	add.w	r3, r7, #24
 800102e:	4618      	mov	r0, r3
 8001030:	f001 f866 	bl	8002100 <HAL_RCC_OscConfig>
 8001034:	4603      	mov	r3, r0
 8001036:	2b00      	cmp	r3, #0
 8001038:	d001      	beq.n	800103e <SystemClock_Config+0x58>
  {
    Error_Handler();
 800103a:	f000 f96f 	bl	800131c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800103e:	230f      	movs	r3, #15
 8001040:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001042:	2302      	movs	r3, #2
 8001044:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001046:	2300      	movs	r3, #0
 8001048:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800104a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800104e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001050:	2300      	movs	r3, #0
 8001052:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001054:	1d3b      	adds	r3, r7, #4
 8001056:	2102      	movs	r1, #2
 8001058:	4618      	mov	r0, r3
 800105a:	f001 fad3 	bl	8002604 <HAL_RCC_ClockConfig>
 800105e:	4603      	mov	r3, r0
 8001060:	2b00      	cmp	r3, #0
 8001062:	d001      	beq.n	8001068 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8001064:	f000 f95a 	bl	800131c <Error_Handler>
  }
}
 8001068:	bf00      	nop
 800106a:	3740      	adds	r7, #64	@ 0x40
 800106c:	46bd      	mov	sp, r7
 800106e:	bd80      	pop	{r7, pc}

08001070 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b096      	sub	sp, #88	@ 0x58
 8001074:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001076:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800107a:	2200      	movs	r2, #0
 800107c:	601a      	str	r2, [r3, #0]
 800107e:	605a      	str	r2, [r3, #4]
 8001080:	609a      	str	r2, [r3, #8]
 8001082:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001084:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001088:	2200      	movs	r2, #0
 800108a:	601a      	str	r2, [r3, #0]
 800108c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800108e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001092:	2200      	movs	r2, #0
 8001094:	601a      	str	r2, [r3, #0]
 8001096:	605a      	str	r2, [r3, #4]
 8001098:	609a      	str	r2, [r3, #8]
 800109a:	60da      	str	r2, [r3, #12]
 800109c:	611a      	str	r2, [r3, #16]
 800109e:	615a      	str	r2, [r3, #20]
 80010a0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80010a2:	1d3b      	adds	r3, r7, #4
 80010a4:	2220      	movs	r2, #32
 80010a6:	2100      	movs	r1, #0
 80010a8:	4618      	mov	r0, r3
 80010aa:	f002 fdf3 	bl	8003c94 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80010ae:	4b3e      	ldr	r3, [pc, #248]	@ (80011a8 <MX_TIM1_Init+0x138>)
 80010b0:	4a3e      	ldr	r2, [pc, #248]	@ (80011ac <MX_TIM1_Init+0x13c>)
 80010b2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80010b4:	4b3c      	ldr	r3, [pc, #240]	@ (80011a8 <MX_TIM1_Init+0x138>)
 80010b6:	2200      	movs	r2, #0
 80010b8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010ba:	4b3b      	ldr	r3, [pc, #236]	@ (80011a8 <MX_TIM1_Init+0x138>)
 80010bc:	2200      	movs	r2, #0
 80010be:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 90;
 80010c0:	4b39      	ldr	r3, [pc, #228]	@ (80011a8 <MX_TIM1_Init+0x138>)
 80010c2:	225a      	movs	r2, #90	@ 0x5a
 80010c4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010c6:	4b38      	ldr	r3, [pc, #224]	@ (80011a8 <MX_TIM1_Init+0x138>)
 80010c8:	2200      	movs	r2, #0
 80010ca:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80010cc:	4b36      	ldr	r3, [pc, #216]	@ (80011a8 <MX_TIM1_Init+0x138>)
 80010ce:	2200      	movs	r2, #0
 80010d0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010d2:	4b35      	ldr	r3, [pc, #212]	@ (80011a8 <MX_TIM1_Init+0x138>)
 80010d4:	2200      	movs	r2, #0
 80010d6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80010d8:	4833      	ldr	r0, [pc, #204]	@ (80011a8 <MX_TIM1_Init+0x138>)
 80010da:	f001 fc21 	bl	8002920 <HAL_TIM_Base_Init>
 80010de:	4603      	mov	r3, r0
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d001      	beq.n	80010e8 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 80010e4:	f000 f91a 	bl	800131c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80010e8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80010ec:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80010ee:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80010f2:	4619      	mov	r1, r3
 80010f4:	482c      	ldr	r0, [pc, #176]	@ (80011a8 <MX_TIM1_Init+0x138>)
 80010f6:	f001 ffe5 	bl	80030c4 <HAL_TIM_ConfigClockSource>
 80010fa:	4603      	mov	r3, r0
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d001      	beq.n	8001104 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 8001100:	f000 f90c 	bl	800131c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001104:	4828      	ldr	r0, [pc, #160]	@ (80011a8 <MX_TIM1_Init+0x138>)
 8001106:	f001 fc5a 	bl	80029be <HAL_TIM_PWM_Init>
 800110a:	4603      	mov	r3, r0
 800110c:	2b00      	cmp	r3, #0
 800110e:	d001      	beq.n	8001114 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8001110:	f000 f904 	bl	800131c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001114:	2300      	movs	r3, #0
 8001116:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001118:	2300      	movs	r3, #0
 800111a:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800111c:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001120:	4619      	mov	r1, r3
 8001122:	4821      	ldr	r0, [pc, #132]	@ (80011a8 <MX_TIM1_Init+0x138>)
 8001124:	f002 fc28 	bl	8003978 <HAL_TIMEx_MasterConfigSynchronization>
 8001128:	4603      	mov	r3, r0
 800112a:	2b00      	cmp	r3, #0
 800112c:	d001      	beq.n	8001132 <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 800112e:	f000 f8f5 	bl	800131c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001132:	2360      	movs	r3, #96	@ 0x60
 8001134:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8001136:	2300      	movs	r3, #0
 8001138:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800113a:	2300      	movs	r3, #0
 800113c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800113e:	2300      	movs	r3, #0
 8001140:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001142:	2300      	movs	r3, #0
 8001144:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001146:	2300      	movs	r3, #0
 8001148:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800114a:	2300      	movs	r3, #0
 800114c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800114e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001152:	2200      	movs	r2, #0
 8001154:	4619      	mov	r1, r3
 8001156:	4814      	ldr	r0, [pc, #80]	@ (80011a8 <MX_TIM1_Init+0x138>)
 8001158:	f001 fef2 	bl	8002f40 <HAL_TIM_PWM_ConfigChannel>
 800115c:	4603      	mov	r3, r0
 800115e:	2b00      	cmp	r3, #0
 8001160:	d001      	beq.n	8001166 <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 8001162:	f000 f8db 	bl	800131c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001166:	2300      	movs	r3, #0
 8001168:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800116a:	2300      	movs	r3, #0
 800116c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800116e:	2300      	movs	r3, #0
 8001170:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001172:	2300      	movs	r3, #0
 8001174:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001176:	2300      	movs	r3, #0
 8001178:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800117a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800117e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001180:	2300      	movs	r3, #0
 8001182:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001184:	1d3b      	adds	r3, r7, #4
 8001186:	4619      	mov	r1, r3
 8001188:	4807      	ldr	r0, [pc, #28]	@ (80011a8 <MX_TIM1_Init+0x138>)
 800118a:	f002 fc53 	bl	8003a34 <HAL_TIMEx_ConfigBreakDeadTime>
 800118e:	4603      	mov	r3, r0
 8001190:	2b00      	cmp	r3, #0
 8001192:	d001      	beq.n	8001198 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8001194:	f000 f8c2 	bl	800131c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001198:	4803      	ldr	r0, [pc, #12]	@ (80011a8 <MX_TIM1_Init+0x138>)
 800119a:	f000 f941 	bl	8001420 <HAL_TIM_MspPostInit>

}
 800119e:	bf00      	nop
 80011a0:	3758      	adds	r7, #88	@ 0x58
 80011a2:	46bd      	mov	sp, r7
 80011a4:	bd80      	pop	{r7, pc}
 80011a6:	bf00      	nop
 80011a8:	20000028 	.word	0x20000028
 80011ac:	40012c00 	.word	0x40012c00

080011b0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80011b4:	4b11      	ldr	r3, [pc, #68]	@ (80011fc <MX_USART2_UART_Init+0x4c>)
 80011b6:	4a12      	ldr	r2, [pc, #72]	@ (8001200 <MX_USART2_UART_Init+0x50>)
 80011b8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80011ba:	4b10      	ldr	r3, [pc, #64]	@ (80011fc <MX_USART2_UART_Init+0x4c>)
 80011bc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80011c0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80011c2:	4b0e      	ldr	r3, [pc, #56]	@ (80011fc <MX_USART2_UART_Init+0x4c>)
 80011c4:	2200      	movs	r2, #0
 80011c6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80011c8:	4b0c      	ldr	r3, [pc, #48]	@ (80011fc <MX_USART2_UART_Init+0x4c>)
 80011ca:	2200      	movs	r2, #0
 80011cc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80011ce:	4b0b      	ldr	r3, [pc, #44]	@ (80011fc <MX_USART2_UART_Init+0x4c>)
 80011d0:	2200      	movs	r2, #0
 80011d2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80011d4:	4b09      	ldr	r3, [pc, #36]	@ (80011fc <MX_USART2_UART_Init+0x4c>)
 80011d6:	220c      	movs	r2, #12
 80011d8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011da:	4b08      	ldr	r3, [pc, #32]	@ (80011fc <MX_USART2_UART_Init+0x4c>)
 80011dc:	2200      	movs	r2, #0
 80011de:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80011e0:	4b06      	ldr	r3, [pc, #24]	@ (80011fc <MX_USART2_UART_Init+0x4c>)
 80011e2:	2200      	movs	r2, #0
 80011e4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80011e6:	4805      	ldr	r0, [pc, #20]	@ (80011fc <MX_USART2_UART_Init+0x4c>)
 80011e8:	f002 fc75 	bl	8003ad6 <HAL_UART_Init>
 80011ec:	4603      	mov	r3, r0
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d001      	beq.n	80011f6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80011f2:	f000 f893 	bl	800131c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80011f6:	bf00      	nop
 80011f8:	bd80      	pop	{r7, pc}
 80011fa:	bf00      	nop
 80011fc:	200000b4 	.word	0x200000b4
 8001200:	40004400 	.word	0x40004400

08001204 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b082      	sub	sp, #8
 8001208:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800120a:	4b0c      	ldr	r3, [pc, #48]	@ (800123c <MX_DMA_Init+0x38>)
 800120c:	695b      	ldr	r3, [r3, #20]
 800120e:	4a0b      	ldr	r2, [pc, #44]	@ (800123c <MX_DMA_Init+0x38>)
 8001210:	f043 0301 	orr.w	r3, r3, #1
 8001214:	6153      	str	r3, [r2, #20]
 8001216:	4b09      	ldr	r3, [pc, #36]	@ (800123c <MX_DMA_Init+0x38>)
 8001218:	695b      	ldr	r3, [r3, #20]
 800121a:	f003 0301 	and.w	r3, r3, #1
 800121e:	607b      	str	r3, [r7, #4]
 8001220:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8001222:	2200      	movs	r2, #0
 8001224:	2100      	movs	r1, #0
 8001226:	200c      	movs	r0, #12
 8001228:	f000 fb0f 	bl	800184a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 800122c:	200c      	movs	r0, #12
 800122e:	f000 fb28 	bl	8001882 <HAL_NVIC_EnableIRQ>

}
 8001232:	bf00      	nop
 8001234:	3708      	adds	r7, #8
 8001236:	46bd      	mov	sp, r7
 8001238:	bd80      	pop	{r7, pc}
 800123a:	bf00      	nop
 800123c:	40021000 	.word	0x40021000

08001240 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b088      	sub	sp, #32
 8001244:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001246:	f107 0310 	add.w	r3, r7, #16
 800124a:	2200      	movs	r2, #0
 800124c:	601a      	str	r2, [r3, #0]
 800124e:	605a      	str	r2, [r3, #4]
 8001250:	609a      	str	r2, [r3, #8]
 8001252:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001254:	4b2d      	ldr	r3, [pc, #180]	@ (800130c <MX_GPIO_Init+0xcc>)
 8001256:	699b      	ldr	r3, [r3, #24]
 8001258:	4a2c      	ldr	r2, [pc, #176]	@ (800130c <MX_GPIO_Init+0xcc>)
 800125a:	f043 0310 	orr.w	r3, r3, #16
 800125e:	6193      	str	r3, [r2, #24]
 8001260:	4b2a      	ldr	r3, [pc, #168]	@ (800130c <MX_GPIO_Init+0xcc>)
 8001262:	699b      	ldr	r3, [r3, #24]
 8001264:	f003 0310 	and.w	r3, r3, #16
 8001268:	60fb      	str	r3, [r7, #12]
 800126a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800126c:	4b27      	ldr	r3, [pc, #156]	@ (800130c <MX_GPIO_Init+0xcc>)
 800126e:	699b      	ldr	r3, [r3, #24]
 8001270:	4a26      	ldr	r2, [pc, #152]	@ (800130c <MX_GPIO_Init+0xcc>)
 8001272:	f043 0320 	orr.w	r3, r3, #32
 8001276:	6193      	str	r3, [r2, #24]
 8001278:	4b24      	ldr	r3, [pc, #144]	@ (800130c <MX_GPIO_Init+0xcc>)
 800127a:	699b      	ldr	r3, [r3, #24]
 800127c:	f003 0320 	and.w	r3, r3, #32
 8001280:	60bb      	str	r3, [r7, #8]
 8001282:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001284:	4b21      	ldr	r3, [pc, #132]	@ (800130c <MX_GPIO_Init+0xcc>)
 8001286:	699b      	ldr	r3, [r3, #24]
 8001288:	4a20      	ldr	r2, [pc, #128]	@ (800130c <MX_GPIO_Init+0xcc>)
 800128a:	f043 0304 	orr.w	r3, r3, #4
 800128e:	6193      	str	r3, [r2, #24]
 8001290:	4b1e      	ldr	r3, [pc, #120]	@ (800130c <MX_GPIO_Init+0xcc>)
 8001292:	699b      	ldr	r3, [r3, #24]
 8001294:	f003 0304 	and.w	r3, r3, #4
 8001298:	607b      	str	r3, [r7, #4]
 800129a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800129c:	4b1b      	ldr	r3, [pc, #108]	@ (800130c <MX_GPIO_Init+0xcc>)
 800129e:	699b      	ldr	r3, [r3, #24]
 80012a0:	4a1a      	ldr	r2, [pc, #104]	@ (800130c <MX_GPIO_Init+0xcc>)
 80012a2:	f043 0308 	orr.w	r3, r3, #8
 80012a6:	6193      	str	r3, [r2, #24]
 80012a8:	4b18      	ldr	r3, [pc, #96]	@ (800130c <MX_GPIO_Init+0xcc>)
 80012aa:	699b      	ldr	r3, [r3, #24]
 80012ac:	f003 0308 	and.w	r3, r3, #8
 80012b0:	603b      	str	r3, [r7, #0]
 80012b2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80012b4:	2200      	movs	r2, #0
 80012b6:	2120      	movs	r1, #32
 80012b8:	4815      	ldr	r0, [pc, #84]	@ (8001310 <MX_GPIO_Init+0xd0>)
 80012ba:	f000 fee7 	bl	800208c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80012be:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80012c2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80012c4:	4b13      	ldr	r3, [pc, #76]	@ (8001314 <MX_GPIO_Init+0xd4>)
 80012c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012c8:	2300      	movs	r3, #0
 80012ca:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80012cc:	f107 0310 	add.w	r3, r7, #16
 80012d0:	4619      	mov	r1, r3
 80012d2:	4811      	ldr	r0, [pc, #68]	@ (8001318 <MX_GPIO_Init+0xd8>)
 80012d4:	f000 fd56 	bl	8001d84 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80012d8:	2320      	movs	r3, #32
 80012da:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012dc:	2301      	movs	r3, #1
 80012de:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e0:	2300      	movs	r3, #0
 80012e2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012e4:	2302      	movs	r3, #2
 80012e6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80012e8:	f107 0310 	add.w	r3, r7, #16
 80012ec:	4619      	mov	r1, r3
 80012ee:	4808      	ldr	r0, [pc, #32]	@ (8001310 <MX_GPIO_Init+0xd0>)
 80012f0:	f000 fd48 	bl	8001d84 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80012f4:	2200      	movs	r2, #0
 80012f6:	2100      	movs	r1, #0
 80012f8:	2028      	movs	r0, #40	@ 0x28
 80012fa:	f000 faa6 	bl	800184a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80012fe:	2028      	movs	r0, #40	@ 0x28
 8001300:	f000 fabf 	bl	8001882 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001304:	bf00      	nop
 8001306:	3720      	adds	r7, #32
 8001308:	46bd      	mov	sp, r7
 800130a:	bd80      	pop	{r7, pc}
 800130c:	40021000 	.word	0x40021000
 8001310:	40010800 	.word	0x40010800
 8001314:	10110000 	.word	0x10110000
 8001318:	40011000 	.word	0x40011000

0800131c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800131c:	b480      	push	{r7}
 800131e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001320:	b672      	cpsid	i
}
 8001322:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001324:	bf00      	nop
 8001326:	e7fd      	b.n	8001324 <Error_Handler+0x8>

08001328 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001328:	b480      	push	{r7}
 800132a:	b085      	sub	sp, #20
 800132c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800132e:	4b15      	ldr	r3, [pc, #84]	@ (8001384 <HAL_MspInit+0x5c>)
 8001330:	699b      	ldr	r3, [r3, #24]
 8001332:	4a14      	ldr	r2, [pc, #80]	@ (8001384 <HAL_MspInit+0x5c>)
 8001334:	f043 0301 	orr.w	r3, r3, #1
 8001338:	6193      	str	r3, [r2, #24]
 800133a:	4b12      	ldr	r3, [pc, #72]	@ (8001384 <HAL_MspInit+0x5c>)
 800133c:	699b      	ldr	r3, [r3, #24]
 800133e:	f003 0301 	and.w	r3, r3, #1
 8001342:	60bb      	str	r3, [r7, #8]
 8001344:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001346:	4b0f      	ldr	r3, [pc, #60]	@ (8001384 <HAL_MspInit+0x5c>)
 8001348:	69db      	ldr	r3, [r3, #28]
 800134a:	4a0e      	ldr	r2, [pc, #56]	@ (8001384 <HAL_MspInit+0x5c>)
 800134c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001350:	61d3      	str	r3, [r2, #28]
 8001352:	4b0c      	ldr	r3, [pc, #48]	@ (8001384 <HAL_MspInit+0x5c>)
 8001354:	69db      	ldr	r3, [r3, #28]
 8001356:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800135a:	607b      	str	r3, [r7, #4]
 800135c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800135e:	4b0a      	ldr	r3, [pc, #40]	@ (8001388 <HAL_MspInit+0x60>)
 8001360:	685b      	ldr	r3, [r3, #4]
 8001362:	60fb      	str	r3, [r7, #12]
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800136a:	60fb      	str	r3, [r7, #12]
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001372:	60fb      	str	r3, [r7, #12]
 8001374:	4a04      	ldr	r2, [pc, #16]	@ (8001388 <HAL_MspInit+0x60>)
 8001376:	68fb      	ldr	r3, [r7, #12]
 8001378:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800137a:	bf00      	nop
 800137c:	3714      	adds	r7, #20
 800137e:	46bd      	mov	sp, r7
 8001380:	bc80      	pop	{r7}
 8001382:	4770      	bx	lr
 8001384:	40021000 	.word	0x40021000
 8001388:	40010000 	.word	0x40010000

0800138c <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	b084      	sub	sp, #16
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	4a1d      	ldr	r2, [pc, #116]	@ (8001410 <HAL_TIM_Base_MspInit+0x84>)
 800139a:	4293      	cmp	r3, r2
 800139c:	d133      	bne.n	8001406 <HAL_TIM_Base_MspInit+0x7a>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800139e:	4b1d      	ldr	r3, [pc, #116]	@ (8001414 <HAL_TIM_Base_MspInit+0x88>)
 80013a0:	699b      	ldr	r3, [r3, #24]
 80013a2:	4a1c      	ldr	r2, [pc, #112]	@ (8001414 <HAL_TIM_Base_MspInit+0x88>)
 80013a4:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80013a8:	6193      	str	r3, [r2, #24]
 80013aa:	4b1a      	ldr	r3, [pc, #104]	@ (8001414 <HAL_TIM_Base_MspInit+0x88>)
 80013ac:	699b      	ldr	r3, [r3, #24]
 80013ae:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80013b2:	60fb      	str	r3, [r7, #12]
 80013b4:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 DMA Init */
    /* TIM1_CH1 Init */
    hdma_tim1_ch1.Instance = DMA1_Channel2;
 80013b6:	4b18      	ldr	r3, [pc, #96]	@ (8001418 <HAL_TIM_Base_MspInit+0x8c>)
 80013b8:	4a18      	ldr	r2, [pc, #96]	@ (800141c <HAL_TIM_Base_MspInit+0x90>)
 80013ba:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80013bc:	4b16      	ldr	r3, [pc, #88]	@ (8001418 <HAL_TIM_Base_MspInit+0x8c>)
 80013be:	2210      	movs	r2, #16
 80013c0:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 80013c2:	4b15      	ldr	r3, [pc, #84]	@ (8001418 <HAL_TIM_Base_MspInit+0x8c>)
 80013c4:	2200      	movs	r2, #0
 80013c6:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 80013c8:	4b13      	ldr	r3, [pc, #76]	@ (8001418 <HAL_TIM_Base_MspInit+0x8c>)
 80013ca:	2280      	movs	r2, #128	@ 0x80
 80013cc:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80013ce:	4b12      	ldr	r3, [pc, #72]	@ (8001418 <HAL_TIM_Base_MspInit+0x8c>)
 80013d0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80013d4:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80013d6:	4b10      	ldr	r3, [pc, #64]	@ (8001418 <HAL_TIM_Base_MspInit+0x8c>)
 80013d8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80013dc:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch1.Init.Mode = DMA_NORMAL;
 80013de:	4b0e      	ldr	r3, [pc, #56]	@ (8001418 <HAL_TIM_Base_MspInit+0x8c>)
 80013e0:	2200      	movs	r2, #0
 80013e2:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 80013e4:	4b0c      	ldr	r3, [pc, #48]	@ (8001418 <HAL_TIM_Base_MspInit+0x8c>)
 80013e6:	2200      	movs	r2, #0
 80013e8:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim1_ch1) != HAL_OK)
 80013ea:	480b      	ldr	r0, [pc, #44]	@ (8001418 <HAL_TIM_Base_MspInit+0x8c>)
 80013ec:	f000 fa64 	bl	80018b8 <HAL_DMA_Init>
 80013f0:	4603      	mov	r3, r0
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d001      	beq.n	80013fa <HAL_TIM_Base_MspInit+0x6e>
    {
      Error_Handler();
 80013f6:	f7ff ff91 	bl	800131c <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1);
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	4a06      	ldr	r2, [pc, #24]	@ (8001418 <HAL_TIM_Base_MspInit+0x8c>)
 80013fe:	625a      	str	r2, [r3, #36]	@ 0x24
 8001400:	4a05      	ldr	r2, [pc, #20]	@ (8001418 <HAL_TIM_Base_MspInit+0x8c>)
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	6253      	str	r3, [r2, #36]	@ 0x24

    /* USER CODE END TIM1_MspInit 1 */

  }

}
 8001406:	bf00      	nop
 8001408:	3710      	adds	r7, #16
 800140a:	46bd      	mov	sp, r7
 800140c:	bd80      	pop	{r7, pc}
 800140e:	bf00      	nop
 8001410:	40012c00 	.word	0x40012c00
 8001414:	40021000 	.word	0x40021000
 8001418:	20000070 	.word	0x20000070
 800141c:	4002001c 	.word	0x4002001c

08001420 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	b088      	sub	sp, #32
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001428:	f107 0310 	add.w	r3, r7, #16
 800142c:	2200      	movs	r2, #0
 800142e:	601a      	str	r2, [r3, #0]
 8001430:	605a      	str	r2, [r3, #4]
 8001432:	609a      	str	r2, [r3, #8]
 8001434:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	4a10      	ldr	r2, [pc, #64]	@ (800147c <HAL_TIM_MspPostInit+0x5c>)
 800143c:	4293      	cmp	r3, r2
 800143e:	d118      	bne.n	8001472 <HAL_TIM_MspPostInit+0x52>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001440:	4b0f      	ldr	r3, [pc, #60]	@ (8001480 <HAL_TIM_MspPostInit+0x60>)
 8001442:	699b      	ldr	r3, [r3, #24]
 8001444:	4a0e      	ldr	r2, [pc, #56]	@ (8001480 <HAL_TIM_MspPostInit+0x60>)
 8001446:	f043 0304 	orr.w	r3, r3, #4
 800144a:	6193      	str	r3, [r2, #24]
 800144c:	4b0c      	ldr	r3, [pc, #48]	@ (8001480 <HAL_TIM_MspPostInit+0x60>)
 800144e:	699b      	ldr	r3, [r3, #24]
 8001450:	f003 0304 	and.w	r3, r3, #4
 8001454:	60fb      	str	r3, [r7, #12]
 8001456:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001458:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800145c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800145e:	2302      	movs	r3, #2
 8001460:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001462:	2302      	movs	r3, #2
 8001464:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001466:	f107 0310 	add.w	r3, r7, #16
 800146a:	4619      	mov	r1, r3
 800146c:	4805      	ldr	r0, [pc, #20]	@ (8001484 <HAL_TIM_MspPostInit+0x64>)
 800146e:	f000 fc89 	bl	8001d84 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM1_MspPostInit 1 */

    /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001472:	bf00      	nop
 8001474:	3720      	adds	r7, #32
 8001476:	46bd      	mov	sp, r7
 8001478:	bd80      	pop	{r7, pc}
 800147a:	bf00      	nop
 800147c:	40012c00 	.word	0x40012c00
 8001480:	40021000 	.word	0x40021000
 8001484:	40010800 	.word	0x40010800

08001488 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b088      	sub	sp, #32
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001490:	f107 0310 	add.w	r3, r7, #16
 8001494:	2200      	movs	r2, #0
 8001496:	601a      	str	r2, [r3, #0]
 8001498:	605a      	str	r2, [r3, #4]
 800149a:	609a      	str	r2, [r3, #8]
 800149c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	4a15      	ldr	r2, [pc, #84]	@ (80014f8 <HAL_UART_MspInit+0x70>)
 80014a4:	4293      	cmp	r3, r2
 80014a6:	d123      	bne.n	80014f0 <HAL_UART_MspInit+0x68>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80014a8:	4b14      	ldr	r3, [pc, #80]	@ (80014fc <HAL_UART_MspInit+0x74>)
 80014aa:	69db      	ldr	r3, [r3, #28]
 80014ac:	4a13      	ldr	r2, [pc, #76]	@ (80014fc <HAL_UART_MspInit+0x74>)
 80014ae:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80014b2:	61d3      	str	r3, [r2, #28]
 80014b4:	4b11      	ldr	r3, [pc, #68]	@ (80014fc <HAL_UART_MspInit+0x74>)
 80014b6:	69db      	ldr	r3, [r3, #28]
 80014b8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014bc:	60fb      	str	r3, [r7, #12]
 80014be:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014c0:	4b0e      	ldr	r3, [pc, #56]	@ (80014fc <HAL_UART_MspInit+0x74>)
 80014c2:	699b      	ldr	r3, [r3, #24]
 80014c4:	4a0d      	ldr	r2, [pc, #52]	@ (80014fc <HAL_UART_MspInit+0x74>)
 80014c6:	f043 0304 	orr.w	r3, r3, #4
 80014ca:	6193      	str	r3, [r2, #24]
 80014cc:	4b0b      	ldr	r3, [pc, #44]	@ (80014fc <HAL_UART_MspInit+0x74>)
 80014ce:	699b      	ldr	r3, [r3, #24]
 80014d0:	f003 0304 	and.w	r3, r3, #4
 80014d4:	60bb      	str	r3, [r7, #8]
 80014d6:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80014d8:	230c      	movs	r3, #12
 80014da:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014dc:	2302      	movs	r3, #2
 80014de:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014e0:	2302      	movs	r3, #2
 80014e2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014e4:	f107 0310 	add.w	r3, r7, #16
 80014e8:	4619      	mov	r1, r3
 80014ea:	4805      	ldr	r0, [pc, #20]	@ (8001500 <HAL_UART_MspInit+0x78>)
 80014ec:	f000 fc4a 	bl	8001d84 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 80014f0:	bf00      	nop
 80014f2:	3720      	adds	r7, #32
 80014f4:	46bd      	mov	sp, r7
 80014f6:	bd80      	pop	{r7, pc}
 80014f8:	40004400 	.word	0x40004400
 80014fc:	40021000 	.word	0x40021000
 8001500:	40010800 	.word	0x40010800

08001504 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001504:	b480      	push	{r7}
 8001506:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001508:	bf00      	nop
 800150a:	e7fd      	b.n	8001508 <NMI_Handler+0x4>

0800150c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800150c:	b480      	push	{r7}
 800150e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001510:	bf00      	nop
 8001512:	e7fd      	b.n	8001510 <HardFault_Handler+0x4>

08001514 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001514:	b480      	push	{r7}
 8001516:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001518:	bf00      	nop
 800151a:	e7fd      	b.n	8001518 <MemManage_Handler+0x4>

0800151c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800151c:	b480      	push	{r7}
 800151e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001520:	bf00      	nop
 8001522:	e7fd      	b.n	8001520 <BusFault_Handler+0x4>

08001524 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001524:	b480      	push	{r7}
 8001526:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001528:	bf00      	nop
 800152a:	e7fd      	b.n	8001528 <UsageFault_Handler+0x4>

0800152c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800152c:	b480      	push	{r7}
 800152e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001530:	bf00      	nop
 8001532:	46bd      	mov	sp, r7
 8001534:	bc80      	pop	{r7}
 8001536:	4770      	bx	lr

08001538 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001538:	b480      	push	{r7}
 800153a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800153c:	bf00      	nop
 800153e:	46bd      	mov	sp, r7
 8001540:	bc80      	pop	{r7}
 8001542:	4770      	bx	lr

08001544 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001544:	b480      	push	{r7}
 8001546:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001548:	bf00      	nop
 800154a:	46bd      	mov	sp, r7
 800154c:	bc80      	pop	{r7}
 800154e:	4770      	bx	lr

08001550 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001554:	f000 f886 	bl	8001664 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001558:	bf00      	nop
 800155a:	bd80      	pop	{r7, pc}

0800155c <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch1);
 8001560:	4802      	ldr	r0, [pc, #8]	@ (800156c <DMA1_Channel2_IRQHandler+0x10>)
 8001562:	f000 fadb 	bl	8001b1c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8001566:	bf00      	nop
 8001568:	bd80      	pop	{r7, pc}
 800156a:	bf00      	nop
 800156c:	20000070 	.word	0x20000070

08001570 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8001574:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001578:	f000 fda0 	bl	80020bc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800157c:	bf00      	nop
 800157e:	bd80      	pop	{r7, pc}

08001580 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001580:	b480      	push	{r7}
 8001582:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001584:	bf00      	nop
 8001586:	46bd      	mov	sp, r7
 8001588:	bc80      	pop	{r7}
 800158a:	4770      	bx	lr

0800158c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800158c:	f7ff fff8 	bl	8001580 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001590:	480b      	ldr	r0, [pc, #44]	@ (80015c0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001592:	490c      	ldr	r1, [pc, #48]	@ (80015c4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001594:	4a0c      	ldr	r2, [pc, #48]	@ (80015c8 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001596:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001598:	e002      	b.n	80015a0 <LoopCopyDataInit>

0800159a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800159a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800159c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800159e:	3304      	adds	r3, #4

080015a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80015a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80015a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80015a4:	d3f9      	bcc.n	800159a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80015a6:	4a09      	ldr	r2, [pc, #36]	@ (80015cc <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80015a8:	4c09      	ldr	r4, [pc, #36]	@ (80015d0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80015aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80015ac:	e001      	b.n	80015b2 <LoopFillZerobss>

080015ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80015ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80015b0:	3204      	adds	r2, #4

080015b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80015b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80015b4:	d3fb      	bcc.n	80015ae <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80015b6:	f002 fb75 	bl	8003ca4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80015ba:	f7ff fced 	bl	8000f98 <main>
  bx lr
 80015be:	4770      	bx	lr
  ldr r0, =_sdata
 80015c0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80015c4:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80015c8:	08004f88 	.word	0x08004f88
  ldr r2, =_sbss
 80015cc:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80015d0:	20000328 	.word	0x20000328

080015d4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80015d4:	e7fe      	b.n	80015d4 <ADC1_2_IRQHandler>
	...

080015d8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80015dc:	4b08      	ldr	r3, [pc, #32]	@ (8001600 <HAL_Init+0x28>)
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	4a07      	ldr	r2, [pc, #28]	@ (8001600 <HAL_Init+0x28>)
 80015e2:	f043 0310 	orr.w	r3, r3, #16
 80015e6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015e8:	2003      	movs	r0, #3
 80015ea:	f000 f923 	bl	8001834 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80015ee:	2000      	movs	r0, #0
 80015f0:	f000 f808 	bl	8001604 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80015f4:	f7ff fe98 	bl	8001328 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80015f8:	2300      	movs	r3, #0
}
 80015fa:	4618      	mov	r0, r3
 80015fc:	bd80      	pop	{r7, pc}
 80015fe:	bf00      	nop
 8001600:	40022000 	.word	0x40022000

08001604 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b082      	sub	sp, #8
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800160c:	4b12      	ldr	r3, [pc, #72]	@ (8001658 <HAL_InitTick+0x54>)
 800160e:	681a      	ldr	r2, [r3, #0]
 8001610:	4b12      	ldr	r3, [pc, #72]	@ (800165c <HAL_InitTick+0x58>)
 8001612:	781b      	ldrb	r3, [r3, #0]
 8001614:	4619      	mov	r1, r3
 8001616:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800161a:	fbb3 f3f1 	udiv	r3, r3, r1
 800161e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001622:	4618      	mov	r0, r3
 8001624:	f000 f93b 	bl	800189e <HAL_SYSTICK_Config>
 8001628:	4603      	mov	r3, r0
 800162a:	2b00      	cmp	r3, #0
 800162c:	d001      	beq.n	8001632 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800162e:	2301      	movs	r3, #1
 8001630:	e00e      	b.n	8001650 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	2b0f      	cmp	r3, #15
 8001636:	d80a      	bhi.n	800164e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001638:	2200      	movs	r2, #0
 800163a:	6879      	ldr	r1, [r7, #4]
 800163c:	f04f 30ff 	mov.w	r0, #4294967295
 8001640:	f000 f903 	bl	800184a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001644:	4a06      	ldr	r2, [pc, #24]	@ (8001660 <HAL_InitTick+0x5c>)
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800164a:	2300      	movs	r3, #0
 800164c:	e000      	b.n	8001650 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800164e:	2301      	movs	r3, #1
}
 8001650:	4618      	mov	r0, r3
 8001652:	3708      	adds	r7, #8
 8001654:	46bd      	mov	sp, r7
 8001656:	bd80      	pop	{r7, pc}
 8001658:	20000000 	.word	0x20000000
 800165c:	20000008 	.word	0x20000008
 8001660:	20000004 	.word	0x20000004

08001664 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001664:	b480      	push	{r7}
 8001666:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001668:	4b05      	ldr	r3, [pc, #20]	@ (8001680 <HAL_IncTick+0x1c>)
 800166a:	781b      	ldrb	r3, [r3, #0]
 800166c:	461a      	mov	r2, r3
 800166e:	4b05      	ldr	r3, [pc, #20]	@ (8001684 <HAL_IncTick+0x20>)
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	4413      	add	r3, r2
 8001674:	4a03      	ldr	r2, [pc, #12]	@ (8001684 <HAL_IncTick+0x20>)
 8001676:	6013      	str	r3, [r2, #0]
}
 8001678:	bf00      	nop
 800167a:	46bd      	mov	sp, r7
 800167c:	bc80      	pop	{r7}
 800167e:	4770      	bx	lr
 8001680:	20000008 	.word	0x20000008
 8001684:	20000324 	.word	0x20000324

08001688 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001688:	b480      	push	{r7}
 800168a:	af00      	add	r7, sp, #0
  return uwTick;
 800168c:	4b02      	ldr	r3, [pc, #8]	@ (8001698 <HAL_GetTick+0x10>)
 800168e:	681b      	ldr	r3, [r3, #0]
}
 8001690:	4618      	mov	r0, r3
 8001692:	46bd      	mov	sp, r7
 8001694:	bc80      	pop	{r7}
 8001696:	4770      	bx	lr
 8001698:	20000324 	.word	0x20000324

0800169c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800169c:	b480      	push	{r7}
 800169e:	b085      	sub	sp, #20
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	f003 0307 	and.w	r3, r3, #7
 80016aa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016ac:	4b0c      	ldr	r3, [pc, #48]	@ (80016e0 <__NVIC_SetPriorityGrouping+0x44>)
 80016ae:	68db      	ldr	r3, [r3, #12]
 80016b0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80016b2:	68ba      	ldr	r2, [r7, #8]
 80016b4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80016b8:	4013      	ands	r3, r2
 80016ba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80016c0:	68bb      	ldr	r3, [r7, #8]
 80016c2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80016c4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80016c8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80016cc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80016ce:	4a04      	ldr	r2, [pc, #16]	@ (80016e0 <__NVIC_SetPriorityGrouping+0x44>)
 80016d0:	68bb      	ldr	r3, [r7, #8]
 80016d2:	60d3      	str	r3, [r2, #12]
}
 80016d4:	bf00      	nop
 80016d6:	3714      	adds	r7, #20
 80016d8:	46bd      	mov	sp, r7
 80016da:	bc80      	pop	{r7}
 80016dc:	4770      	bx	lr
 80016de:	bf00      	nop
 80016e0:	e000ed00 	.word	0xe000ed00

080016e4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80016e4:	b480      	push	{r7}
 80016e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80016e8:	4b04      	ldr	r3, [pc, #16]	@ (80016fc <__NVIC_GetPriorityGrouping+0x18>)
 80016ea:	68db      	ldr	r3, [r3, #12]
 80016ec:	0a1b      	lsrs	r3, r3, #8
 80016ee:	f003 0307 	and.w	r3, r3, #7
}
 80016f2:	4618      	mov	r0, r3
 80016f4:	46bd      	mov	sp, r7
 80016f6:	bc80      	pop	{r7}
 80016f8:	4770      	bx	lr
 80016fa:	bf00      	nop
 80016fc:	e000ed00 	.word	0xe000ed00

08001700 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001700:	b480      	push	{r7}
 8001702:	b083      	sub	sp, #12
 8001704:	af00      	add	r7, sp, #0
 8001706:	4603      	mov	r3, r0
 8001708:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800170a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800170e:	2b00      	cmp	r3, #0
 8001710:	db0b      	blt.n	800172a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001712:	79fb      	ldrb	r3, [r7, #7]
 8001714:	f003 021f 	and.w	r2, r3, #31
 8001718:	4906      	ldr	r1, [pc, #24]	@ (8001734 <__NVIC_EnableIRQ+0x34>)
 800171a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800171e:	095b      	lsrs	r3, r3, #5
 8001720:	2001      	movs	r0, #1
 8001722:	fa00 f202 	lsl.w	r2, r0, r2
 8001726:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800172a:	bf00      	nop
 800172c:	370c      	adds	r7, #12
 800172e:	46bd      	mov	sp, r7
 8001730:	bc80      	pop	{r7}
 8001732:	4770      	bx	lr
 8001734:	e000e100 	.word	0xe000e100

08001738 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001738:	b480      	push	{r7}
 800173a:	b083      	sub	sp, #12
 800173c:	af00      	add	r7, sp, #0
 800173e:	4603      	mov	r3, r0
 8001740:	6039      	str	r1, [r7, #0]
 8001742:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001744:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001748:	2b00      	cmp	r3, #0
 800174a:	db0a      	blt.n	8001762 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800174c:	683b      	ldr	r3, [r7, #0]
 800174e:	b2da      	uxtb	r2, r3
 8001750:	490c      	ldr	r1, [pc, #48]	@ (8001784 <__NVIC_SetPriority+0x4c>)
 8001752:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001756:	0112      	lsls	r2, r2, #4
 8001758:	b2d2      	uxtb	r2, r2
 800175a:	440b      	add	r3, r1
 800175c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001760:	e00a      	b.n	8001778 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001762:	683b      	ldr	r3, [r7, #0]
 8001764:	b2da      	uxtb	r2, r3
 8001766:	4908      	ldr	r1, [pc, #32]	@ (8001788 <__NVIC_SetPriority+0x50>)
 8001768:	79fb      	ldrb	r3, [r7, #7]
 800176a:	f003 030f 	and.w	r3, r3, #15
 800176e:	3b04      	subs	r3, #4
 8001770:	0112      	lsls	r2, r2, #4
 8001772:	b2d2      	uxtb	r2, r2
 8001774:	440b      	add	r3, r1
 8001776:	761a      	strb	r2, [r3, #24]
}
 8001778:	bf00      	nop
 800177a:	370c      	adds	r7, #12
 800177c:	46bd      	mov	sp, r7
 800177e:	bc80      	pop	{r7}
 8001780:	4770      	bx	lr
 8001782:	bf00      	nop
 8001784:	e000e100 	.word	0xe000e100
 8001788:	e000ed00 	.word	0xe000ed00

0800178c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800178c:	b480      	push	{r7}
 800178e:	b089      	sub	sp, #36	@ 0x24
 8001790:	af00      	add	r7, sp, #0
 8001792:	60f8      	str	r0, [r7, #12]
 8001794:	60b9      	str	r1, [r7, #8]
 8001796:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	f003 0307 	and.w	r3, r3, #7
 800179e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80017a0:	69fb      	ldr	r3, [r7, #28]
 80017a2:	f1c3 0307 	rsb	r3, r3, #7
 80017a6:	2b04      	cmp	r3, #4
 80017a8:	bf28      	it	cs
 80017aa:	2304      	movcs	r3, #4
 80017ac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017ae:	69fb      	ldr	r3, [r7, #28]
 80017b0:	3304      	adds	r3, #4
 80017b2:	2b06      	cmp	r3, #6
 80017b4:	d902      	bls.n	80017bc <NVIC_EncodePriority+0x30>
 80017b6:	69fb      	ldr	r3, [r7, #28]
 80017b8:	3b03      	subs	r3, #3
 80017ba:	e000      	b.n	80017be <NVIC_EncodePriority+0x32>
 80017bc:	2300      	movs	r3, #0
 80017be:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017c0:	f04f 32ff 	mov.w	r2, #4294967295
 80017c4:	69bb      	ldr	r3, [r7, #24]
 80017c6:	fa02 f303 	lsl.w	r3, r2, r3
 80017ca:	43da      	mvns	r2, r3
 80017cc:	68bb      	ldr	r3, [r7, #8]
 80017ce:	401a      	ands	r2, r3
 80017d0:	697b      	ldr	r3, [r7, #20]
 80017d2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80017d4:	f04f 31ff 	mov.w	r1, #4294967295
 80017d8:	697b      	ldr	r3, [r7, #20]
 80017da:	fa01 f303 	lsl.w	r3, r1, r3
 80017de:	43d9      	mvns	r1, r3
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017e4:	4313      	orrs	r3, r2
         );
}
 80017e6:	4618      	mov	r0, r3
 80017e8:	3724      	adds	r7, #36	@ 0x24
 80017ea:	46bd      	mov	sp, r7
 80017ec:	bc80      	pop	{r7}
 80017ee:	4770      	bx	lr

080017f0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b082      	sub	sp, #8
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	3b01      	subs	r3, #1
 80017fc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001800:	d301      	bcc.n	8001806 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001802:	2301      	movs	r3, #1
 8001804:	e00f      	b.n	8001826 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001806:	4a0a      	ldr	r2, [pc, #40]	@ (8001830 <SysTick_Config+0x40>)
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	3b01      	subs	r3, #1
 800180c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800180e:	210f      	movs	r1, #15
 8001810:	f04f 30ff 	mov.w	r0, #4294967295
 8001814:	f7ff ff90 	bl	8001738 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001818:	4b05      	ldr	r3, [pc, #20]	@ (8001830 <SysTick_Config+0x40>)
 800181a:	2200      	movs	r2, #0
 800181c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800181e:	4b04      	ldr	r3, [pc, #16]	@ (8001830 <SysTick_Config+0x40>)
 8001820:	2207      	movs	r2, #7
 8001822:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001824:	2300      	movs	r3, #0
}
 8001826:	4618      	mov	r0, r3
 8001828:	3708      	adds	r7, #8
 800182a:	46bd      	mov	sp, r7
 800182c:	bd80      	pop	{r7, pc}
 800182e:	bf00      	nop
 8001830:	e000e010 	.word	0xe000e010

08001834 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b082      	sub	sp, #8
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800183c:	6878      	ldr	r0, [r7, #4]
 800183e:	f7ff ff2d 	bl	800169c <__NVIC_SetPriorityGrouping>
}
 8001842:	bf00      	nop
 8001844:	3708      	adds	r7, #8
 8001846:	46bd      	mov	sp, r7
 8001848:	bd80      	pop	{r7, pc}

0800184a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800184a:	b580      	push	{r7, lr}
 800184c:	b086      	sub	sp, #24
 800184e:	af00      	add	r7, sp, #0
 8001850:	4603      	mov	r3, r0
 8001852:	60b9      	str	r1, [r7, #8]
 8001854:	607a      	str	r2, [r7, #4]
 8001856:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001858:	2300      	movs	r3, #0
 800185a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800185c:	f7ff ff42 	bl	80016e4 <__NVIC_GetPriorityGrouping>
 8001860:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001862:	687a      	ldr	r2, [r7, #4]
 8001864:	68b9      	ldr	r1, [r7, #8]
 8001866:	6978      	ldr	r0, [r7, #20]
 8001868:	f7ff ff90 	bl	800178c <NVIC_EncodePriority>
 800186c:	4602      	mov	r2, r0
 800186e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001872:	4611      	mov	r1, r2
 8001874:	4618      	mov	r0, r3
 8001876:	f7ff ff5f 	bl	8001738 <__NVIC_SetPriority>
}
 800187a:	bf00      	nop
 800187c:	3718      	adds	r7, #24
 800187e:	46bd      	mov	sp, r7
 8001880:	bd80      	pop	{r7, pc}

08001882 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001882:	b580      	push	{r7, lr}
 8001884:	b082      	sub	sp, #8
 8001886:	af00      	add	r7, sp, #0
 8001888:	4603      	mov	r3, r0
 800188a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800188c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001890:	4618      	mov	r0, r3
 8001892:	f7ff ff35 	bl	8001700 <__NVIC_EnableIRQ>
}
 8001896:	bf00      	nop
 8001898:	3708      	adds	r7, #8
 800189a:	46bd      	mov	sp, r7
 800189c:	bd80      	pop	{r7, pc}

0800189e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800189e:	b580      	push	{r7, lr}
 80018a0:	b082      	sub	sp, #8
 80018a2:	af00      	add	r7, sp, #0
 80018a4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80018a6:	6878      	ldr	r0, [r7, #4]
 80018a8:	f7ff ffa2 	bl	80017f0 <SysTick_Config>
 80018ac:	4603      	mov	r3, r0
}
 80018ae:	4618      	mov	r0, r3
 80018b0:	3708      	adds	r7, #8
 80018b2:	46bd      	mov	sp, r7
 80018b4:	bd80      	pop	{r7, pc}
	...

080018b8 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80018b8:	b480      	push	{r7}
 80018ba:	b085      	sub	sp, #20
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80018c0:	2300      	movs	r3, #0
 80018c2:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d101      	bne.n	80018ce <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80018ca:	2301      	movs	r3, #1
 80018cc:	e043      	b.n	8001956 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	461a      	mov	r2, r3
 80018d4:	4b22      	ldr	r3, [pc, #136]	@ (8001960 <HAL_DMA_Init+0xa8>)
 80018d6:	4413      	add	r3, r2
 80018d8:	4a22      	ldr	r2, [pc, #136]	@ (8001964 <HAL_DMA_Init+0xac>)
 80018da:	fba2 2303 	umull	r2, r3, r2, r3
 80018de:	091b      	lsrs	r3, r3, #4
 80018e0:	009a      	lsls	r2, r3, #2
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	4a1f      	ldr	r2, [pc, #124]	@ (8001968 <HAL_DMA_Init+0xb0>)
 80018ea:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	2202      	movs	r2, #2
 80018f0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8001902:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8001906:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001910:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	68db      	ldr	r3, [r3, #12]
 8001916:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800191c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	695b      	ldr	r3, [r3, #20]
 8001922:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001928:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	69db      	ldr	r3, [r3, #28]
 800192e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001930:	68fa      	ldr	r2, [r7, #12]
 8001932:	4313      	orrs	r3, r2
 8001934:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	68fa      	ldr	r2, [r7, #12]
 800193c:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	2200      	movs	r2, #0
 8001942:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	2201      	movs	r2, #1
 8001948:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	2200      	movs	r2, #0
 8001950:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8001954:	2300      	movs	r3, #0
}
 8001956:	4618      	mov	r0, r3
 8001958:	3714      	adds	r7, #20
 800195a:	46bd      	mov	sp, r7
 800195c:	bc80      	pop	{r7}
 800195e:	4770      	bx	lr
 8001960:	bffdfff8 	.word	0xbffdfff8
 8001964:	cccccccd 	.word	0xcccccccd
 8001968:	40020000 	.word	0x40020000

0800196c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	b086      	sub	sp, #24
 8001970:	af00      	add	r7, sp, #0
 8001972:	60f8      	str	r0, [r7, #12]
 8001974:	60b9      	str	r1, [r7, #8]
 8001976:	607a      	str	r2, [r7, #4]
 8001978:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800197a:	2300      	movs	r3, #0
 800197c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001984:	2b01      	cmp	r3, #1
 8001986:	d101      	bne.n	800198c <HAL_DMA_Start_IT+0x20>
 8001988:	2302      	movs	r3, #2
 800198a:	e04b      	b.n	8001a24 <HAL_DMA_Start_IT+0xb8>
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	2201      	movs	r2, #1
 8001990:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800199a:	b2db      	uxtb	r3, r3
 800199c:	2b01      	cmp	r3, #1
 800199e:	d13a      	bne.n	8001a16 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	2202      	movs	r2, #2
 80019a4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	2200      	movs	r2, #0
 80019ac:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	681a      	ldr	r2, [r3, #0]
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	f022 0201 	bic.w	r2, r2, #1
 80019bc:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80019be:	683b      	ldr	r3, [r7, #0]
 80019c0:	687a      	ldr	r2, [r7, #4]
 80019c2:	68b9      	ldr	r1, [r7, #8]
 80019c4:	68f8      	ldr	r0, [r7, #12]
 80019c6:	f000 f9af 	bl	8001d28 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d008      	beq.n	80019e4 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	681a      	ldr	r2, [r3, #0]
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	f042 020e 	orr.w	r2, r2, #14
 80019e0:	601a      	str	r2, [r3, #0]
 80019e2:	e00f      	b.n	8001a04 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	681a      	ldr	r2, [r3, #0]
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	f022 0204 	bic.w	r2, r2, #4
 80019f2:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	681a      	ldr	r2, [r3, #0]
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	f042 020a 	orr.w	r2, r2, #10
 8001a02:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	681a      	ldr	r2, [r3, #0]
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	f042 0201 	orr.w	r2, r2, #1
 8001a12:	601a      	str	r2, [r3, #0]
 8001a14:	e005      	b.n	8001a22 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	2200      	movs	r2, #0
 8001a1a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8001a1e:	2302      	movs	r3, #2
 8001a20:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8001a22:	7dfb      	ldrb	r3, [r7, #23]
}
 8001a24:	4618      	mov	r0, r3
 8001a26:	3718      	adds	r7, #24
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	bd80      	pop	{r7, pc}

08001a2c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b084      	sub	sp, #16
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001a34:	2300      	movs	r3, #0
 8001a36:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001a3e:	b2db      	uxtb	r3, r3
 8001a40:	2b02      	cmp	r3, #2
 8001a42:	d005      	beq.n	8001a50 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	2204      	movs	r2, #4
 8001a48:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8001a4a:	2301      	movs	r3, #1
 8001a4c:	73fb      	strb	r3, [r7, #15]
 8001a4e:	e051      	b.n	8001af4 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	681a      	ldr	r2, [r3, #0]
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f022 020e 	bic.w	r2, r2, #14
 8001a5e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	681a      	ldr	r2, [r3, #0]
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f022 0201 	bic.w	r2, r2, #1
 8001a6e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	4a22      	ldr	r2, [pc, #136]	@ (8001b00 <HAL_DMA_Abort_IT+0xd4>)
 8001a76:	4293      	cmp	r3, r2
 8001a78:	d029      	beq.n	8001ace <HAL_DMA_Abort_IT+0xa2>
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	4a21      	ldr	r2, [pc, #132]	@ (8001b04 <HAL_DMA_Abort_IT+0xd8>)
 8001a80:	4293      	cmp	r3, r2
 8001a82:	d022      	beq.n	8001aca <HAL_DMA_Abort_IT+0x9e>
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	4a1f      	ldr	r2, [pc, #124]	@ (8001b08 <HAL_DMA_Abort_IT+0xdc>)
 8001a8a:	4293      	cmp	r3, r2
 8001a8c:	d01a      	beq.n	8001ac4 <HAL_DMA_Abort_IT+0x98>
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	4a1e      	ldr	r2, [pc, #120]	@ (8001b0c <HAL_DMA_Abort_IT+0xe0>)
 8001a94:	4293      	cmp	r3, r2
 8001a96:	d012      	beq.n	8001abe <HAL_DMA_Abort_IT+0x92>
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	4a1c      	ldr	r2, [pc, #112]	@ (8001b10 <HAL_DMA_Abort_IT+0xe4>)
 8001a9e:	4293      	cmp	r3, r2
 8001aa0:	d00a      	beq.n	8001ab8 <HAL_DMA_Abort_IT+0x8c>
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	4a1b      	ldr	r2, [pc, #108]	@ (8001b14 <HAL_DMA_Abort_IT+0xe8>)
 8001aa8:	4293      	cmp	r3, r2
 8001aaa:	d102      	bne.n	8001ab2 <HAL_DMA_Abort_IT+0x86>
 8001aac:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8001ab0:	e00e      	b.n	8001ad0 <HAL_DMA_Abort_IT+0xa4>
 8001ab2:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001ab6:	e00b      	b.n	8001ad0 <HAL_DMA_Abort_IT+0xa4>
 8001ab8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001abc:	e008      	b.n	8001ad0 <HAL_DMA_Abort_IT+0xa4>
 8001abe:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001ac2:	e005      	b.n	8001ad0 <HAL_DMA_Abort_IT+0xa4>
 8001ac4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001ac8:	e002      	b.n	8001ad0 <HAL_DMA_Abort_IT+0xa4>
 8001aca:	2310      	movs	r3, #16
 8001acc:	e000      	b.n	8001ad0 <HAL_DMA_Abort_IT+0xa4>
 8001ace:	2301      	movs	r3, #1
 8001ad0:	4a11      	ldr	r2, [pc, #68]	@ (8001b18 <HAL_DMA_Abort_IT+0xec>)
 8001ad2:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	2201      	movs	r2, #1
 8001ad8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	2200      	movs	r2, #0
 8001ae0:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d003      	beq.n	8001af4 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001af0:	6878      	ldr	r0, [r7, #4]
 8001af2:	4798      	blx	r3
    } 
  }
  return status;
 8001af4:	7bfb      	ldrb	r3, [r7, #15]
}
 8001af6:	4618      	mov	r0, r3
 8001af8:	3710      	adds	r7, #16
 8001afa:	46bd      	mov	sp, r7
 8001afc:	bd80      	pop	{r7, pc}
 8001afe:	bf00      	nop
 8001b00:	40020008 	.word	0x40020008
 8001b04:	4002001c 	.word	0x4002001c
 8001b08:	40020030 	.word	0x40020030
 8001b0c:	40020044 	.word	0x40020044
 8001b10:	40020058 	.word	0x40020058
 8001b14:	4002006c 	.word	0x4002006c
 8001b18:	40020000 	.word	0x40020000

08001b1c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b084      	sub	sp, #16
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b38:	2204      	movs	r2, #4
 8001b3a:	409a      	lsls	r2, r3
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	4013      	ands	r3, r2
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d04f      	beq.n	8001be4 <HAL_DMA_IRQHandler+0xc8>
 8001b44:	68bb      	ldr	r3, [r7, #8]
 8001b46:	f003 0304 	and.w	r3, r3, #4
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d04a      	beq.n	8001be4 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	f003 0320 	and.w	r3, r3, #32
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d107      	bne.n	8001b6c <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	681a      	ldr	r2, [r3, #0]
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	f022 0204 	bic.w	r2, r2, #4
 8001b6a:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	4a66      	ldr	r2, [pc, #408]	@ (8001d0c <HAL_DMA_IRQHandler+0x1f0>)
 8001b72:	4293      	cmp	r3, r2
 8001b74:	d029      	beq.n	8001bca <HAL_DMA_IRQHandler+0xae>
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	4a65      	ldr	r2, [pc, #404]	@ (8001d10 <HAL_DMA_IRQHandler+0x1f4>)
 8001b7c:	4293      	cmp	r3, r2
 8001b7e:	d022      	beq.n	8001bc6 <HAL_DMA_IRQHandler+0xaa>
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	4a63      	ldr	r2, [pc, #396]	@ (8001d14 <HAL_DMA_IRQHandler+0x1f8>)
 8001b86:	4293      	cmp	r3, r2
 8001b88:	d01a      	beq.n	8001bc0 <HAL_DMA_IRQHandler+0xa4>
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	4a62      	ldr	r2, [pc, #392]	@ (8001d18 <HAL_DMA_IRQHandler+0x1fc>)
 8001b90:	4293      	cmp	r3, r2
 8001b92:	d012      	beq.n	8001bba <HAL_DMA_IRQHandler+0x9e>
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	4a60      	ldr	r2, [pc, #384]	@ (8001d1c <HAL_DMA_IRQHandler+0x200>)
 8001b9a:	4293      	cmp	r3, r2
 8001b9c:	d00a      	beq.n	8001bb4 <HAL_DMA_IRQHandler+0x98>
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	4a5f      	ldr	r2, [pc, #380]	@ (8001d20 <HAL_DMA_IRQHandler+0x204>)
 8001ba4:	4293      	cmp	r3, r2
 8001ba6:	d102      	bne.n	8001bae <HAL_DMA_IRQHandler+0x92>
 8001ba8:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001bac:	e00e      	b.n	8001bcc <HAL_DMA_IRQHandler+0xb0>
 8001bae:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8001bb2:	e00b      	b.n	8001bcc <HAL_DMA_IRQHandler+0xb0>
 8001bb4:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8001bb8:	e008      	b.n	8001bcc <HAL_DMA_IRQHandler+0xb0>
 8001bba:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001bbe:	e005      	b.n	8001bcc <HAL_DMA_IRQHandler+0xb0>
 8001bc0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001bc4:	e002      	b.n	8001bcc <HAL_DMA_IRQHandler+0xb0>
 8001bc6:	2340      	movs	r3, #64	@ 0x40
 8001bc8:	e000      	b.n	8001bcc <HAL_DMA_IRQHandler+0xb0>
 8001bca:	2304      	movs	r3, #4
 8001bcc:	4a55      	ldr	r2, [pc, #340]	@ (8001d24 <HAL_DMA_IRQHandler+0x208>)
 8001bce:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	f000 8094 	beq.w	8001d02 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001bde:	6878      	ldr	r0, [r7, #4]
 8001be0:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8001be2:	e08e      	b.n	8001d02 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001be8:	2202      	movs	r2, #2
 8001bea:	409a      	lsls	r2, r3
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	4013      	ands	r3, r2
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d056      	beq.n	8001ca2 <HAL_DMA_IRQHandler+0x186>
 8001bf4:	68bb      	ldr	r3, [r7, #8]
 8001bf6:	f003 0302 	and.w	r3, r3, #2
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d051      	beq.n	8001ca2 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	f003 0320 	and.w	r3, r3, #32
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d10b      	bne.n	8001c24 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	681a      	ldr	r2, [r3, #0]
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f022 020a 	bic.w	r2, r2, #10
 8001c1a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	2201      	movs	r2, #1
 8001c20:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	4a38      	ldr	r2, [pc, #224]	@ (8001d0c <HAL_DMA_IRQHandler+0x1f0>)
 8001c2a:	4293      	cmp	r3, r2
 8001c2c:	d029      	beq.n	8001c82 <HAL_DMA_IRQHandler+0x166>
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	4a37      	ldr	r2, [pc, #220]	@ (8001d10 <HAL_DMA_IRQHandler+0x1f4>)
 8001c34:	4293      	cmp	r3, r2
 8001c36:	d022      	beq.n	8001c7e <HAL_DMA_IRQHandler+0x162>
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	4a35      	ldr	r2, [pc, #212]	@ (8001d14 <HAL_DMA_IRQHandler+0x1f8>)
 8001c3e:	4293      	cmp	r3, r2
 8001c40:	d01a      	beq.n	8001c78 <HAL_DMA_IRQHandler+0x15c>
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	4a34      	ldr	r2, [pc, #208]	@ (8001d18 <HAL_DMA_IRQHandler+0x1fc>)
 8001c48:	4293      	cmp	r3, r2
 8001c4a:	d012      	beq.n	8001c72 <HAL_DMA_IRQHandler+0x156>
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	4a32      	ldr	r2, [pc, #200]	@ (8001d1c <HAL_DMA_IRQHandler+0x200>)
 8001c52:	4293      	cmp	r3, r2
 8001c54:	d00a      	beq.n	8001c6c <HAL_DMA_IRQHandler+0x150>
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	4a31      	ldr	r2, [pc, #196]	@ (8001d20 <HAL_DMA_IRQHandler+0x204>)
 8001c5c:	4293      	cmp	r3, r2
 8001c5e:	d102      	bne.n	8001c66 <HAL_DMA_IRQHandler+0x14a>
 8001c60:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8001c64:	e00e      	b.n	8001c84 <HAL_DMA_IRQHandler+0x168>
 8001c66:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001c6a:	e00b      	b.n	8001c84 <HAL_DMA_IRQHandler+0x168>
 8001c6c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001c70:	e008      	b.n	8001c84 <HAL_DMA_IRQHandler+0x168>
 8001c72:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001c76:	e005      	b.n	8001c84 <HAL_DMA_IRQHandler+0x168>
 8001c78:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001c7c:	e002      	b.n	8001c84 <HAL_DMA_IRQHandler+0x168>
 8001c7e:	2320      	movs	r3, #32
 8001c80:	e000      	b.n	8001c84 <HAL_DMA_IRQHandler+0x168>
 8001c82:	2302      	movs	r3, #2
 8001c84:	4a27      	ldr	r2, [pc, #156]	@ (8001d24 <HAL_DMA_IRQHandler+0x208>)
 8001c86:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d034      	beq.n	8001d02 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c9c:	6878      	ldr	r0, [r7, #4]
 8001c9e:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001ca0:	e02f      	b.n	8001d02 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ca6:	2208      	movs	r2, #8
 8001ca8:	409a      	lsls	r2, r3
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	4013      	ands	r3, r2
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d028      	beq.n	8001d04 <HAL_DMA_IRQHandler+0x1e8>
 8001cb2:	68bb      	ldr	r3, [r7, #8]
 8001cb4:	f003 0308 	and.w	r3, r3, #8
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d023      	beq.n	8001d04 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	681a      	ldr	r2, [r3, #0]
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f022 020e 	bic.w	r2, r2, #14
 8001cca:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001cd4:	2101      	movs	r1, #1
 8001cd6:	fa01 f202 	lsl.w	r2, r1, r2
 8001cda:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	2201      	movs	r2, #1
 8001ce0:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	2201      	movs	r2, #1
 8001ce6:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	2200      	movs	r2, #0
 8001cee:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d004      	beq.n	8001d04 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cfe:	6878      	ldr	r0, [r7, #4]
 8001d00:	4798      	blx	r3
    }
  }
  return;
 8001d02:	bf00      	nop
 8001d04:	bf00      	nop
}
 8001d06:	3710      	adds	r7, #16
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	bd80      	pop	{r7, pc}
 8001d0c:	40020008 	.word	0x40020008
 8001d10:	4002001c 	.word	0x4002001c
 8001d14:	40020030 	.word	0x40020030
 8001d18:	40020044 	.word	0x40020044
 8001d1c:	40020058 	.word	0x40020058
 8001d20:	4002006c 	.word	0x4002006c
 8001d24:	40020000 	.word	0x40020000

08001d28 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001d28:	b480      	push	{r7}
 8001d2a:	b085      	sub	sp, #20
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	60f8      	str	r0, [r7, #12]
 8001d30:	60b9      	str	r1, [r7, #8]
 8001d32:	607a      	str	r2, [r7, #4]
 8001d34:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001d3e:	2101      	movs	r1, #1
 8001d40:	fa01 f202 	lsl.w	r2, r1, r2
 8001d44:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	683a      	ldr	r2, [r7, #0]
 8001d4c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	685b      	ldr	r3, [r3, #4]
 8001d52:	2b10      	cmp	r3, #16
 8001d54:	d108      	bne.n	8001d68 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	687a      	ldr	r2, [r7, #4]
 8001d5c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	68ba      	ldr	r2, [r7, #8]
 8001d64:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001d66:	e007      	b.n	8001d78 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	68ba      	ldr	r2, [r7, #8]
 8001d6e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	687a      	ldr	r2, [r7, #4]
 8001d76:	60da      	str	r2, [r3, #12]
}
 8001d78:	bf00      	nop
 8001d7a:	3714      	adds	r7, #20
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	bc80      	pop	{r7}
 8001d80:	4770      	bx	lr
	...

08001d84 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d84:	b480      	push	{r7}
 8001d86:	b08b      	sub	sp, #44	@ 0x2c
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]
 8001d8c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001d8e:	2300      	movs	r3, #0
 8001d90:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001d92:	2300      	movs	r3, #0
 8001d94:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d96:	e169      	b.n	800206c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001d98:	2201      	movs	r2, #1
 8001d9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001da0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001da2:	683b      	ldr	r3, [r7, #0]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	69fa      	ldr	r2, [r7, #28]
 8001da8:	4013      	ands	r3, r2
 8001daa:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001dac:	69ba      	ldr	r2, [r7, #24]
 8001dae:	69fb      	ldr	r3, [r7, #28]
 8001db0:	429a      	cmp	r2, r3
 8001db2:	f040 8158 	bne.w	8002066 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001db6:	683b      	ldr	r3, [r7, #0]
 8001db8:	685b      	ldr	r3, [r3, #4]
 8001dba:	4a9a      	ldr	r2, [pc, #616]	@ (8002024 <HAL_GPIO_Init+0x2a0>)
 8001dbc:	4293      	cmp	r3, r2
 8001dbe:	d05e      	beq.n	8001e7e <HAL_GPIO_Init+0xfa>
 8001dc0:	4a98      	ldr	r2, [pc, #608]	@ (8002024 <HAL_GPIO_Init+0x2a0>)
 8001dc2:	4293      	cmp	r3, r2
 8001dc4:	d875      	bhi.n	8001eb2 <HAL_GPIO_Init+0x12e>
 8001dc6:	4a98      	ldr	r2, [pc, #608]	@ (8002028 <HAL_GPIO_Init+0x2a4>)
 8001dc8:	4293      	cmp	r3, r2
 8001dca:	d058      	beq.n	8001e7e <HAL_GPIO_Init+0xfa>
 8001dcc:	4a96      	ldr	r2, [pc, #600]	@ (8002028 <HAL_GPIO_Init+0x2a4>)
 8001dce:	4293      	cmp	r3, r2
 8001dd0:	d86f      	bhi.n	8001eb2 <HAL_GPIO_Init+0x12e>
 8001dd2:	4a96      	ldr	r2, [pc, #600]	@ (800202c <HAL_GPIO_Init+0x2a8>)
 8001dd4:	4293      	cmp	r3, r2
 8001dd6:	d052      	beq.n	8001e7e <HAL_GPIO_Init+0xfa>
 8001dd8:	4a94      	ldr	r2, [pc, #592]	@ (800202c <HAL_GPIO_Init+0x2a8>)
 8001dda:	4293      	cmp	r3, r2
 8001ddc:	d869      	bhi.n	8001eb2 <HAL_GPIO_Init+0x12e>
 8001dde:	4a94      	ldr	r2, [pc, #592]	@ (8002030 <HAL_GPIO_Init+0x2ac>)
 8001de0:	4293      	cmp	r3, r2
 8001de2:	d04c      	beq.n	8001e7e <HAL_GPIO_Init+0xfa>
 8001de4:	4a92      	ldr	r2, [pc, #584]	@ (8002030 <HAL_GPIO_Init+0x2ac>)
 8001de6:	4293      	cmp	r3, r2
 8001de8:	d863      	bhi.n	8001eb2 <HAL_GPIO_Init+0x12e>
 8001dea:	4a92      	ldr	r2, [pc, #584]	@ (8002034 <HAL_GPIO_Init+0x2b0>)
 8001dec:	4293      	cmp	r3, r2
 8001dee:	d046      	beq.n	8001e7e <HAL_GPIO_Init+0xfa>
 8001df0:	4a90      	ldr	r2, [pc, #576]	@ (8002034 <HAL_GPIO_Init+0x2b0>)
 8001df2:	4293      	cmp	r3, r2
 8001df4:	d85d      	bhi.n	8001eb2 <HAL_GPIO_Init+0x12e>
 8001df6:	2b12      	cmp	r3, #18
 8001df8:	d82a      	bhi.n	8001e50 <HAL_GPIO_Init+0xcc>
 8001dfa:	2b12      	cmp	r3, #18
 8001dfc:	d859      	bhi.n	8001eb2 <HAL_GPIO_Init+0x12e>
 8001dfe:	a201      	add	r2, pc, #4	@ (adr r2, 8001e04 <HAL_GPIO_Init+0x80>)
 8001e00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e04:	08001e7f 	.word	0x08001e7f
 8001e08:	08001e59 	.word	0x08001e59
 8001e0c:	08001e6b 	.word	0x08001e6b
 8001e10:	08001ead 	.word	0x08001ead
 8001e14:	08001eb3 	.word	0x08001eb3
 8001e18:	08001eb3 	.word	0x08001eb3
 8001e1c:	08001eb3 	.word	0x08001eb3
 8001e20:	08001eb3 	.word	0x08001eb3
 8001e24:	08001eb3 	.word	0x08001eb3
 8001e28:	08001eb3 	.word	0x08001eb3
 8001e2c:	08001eb3 	.word	0x08001eb3
 8001e30:	08001eb3 	.word	0x08001eb3
 8001e34:	08001eb3 	.word	0x08001eb3
 8001e38:	08001eb3 	.word	0x08001eb3
 8001e3c:	08001eb3 	.word	0x08001eb3
 8001e40:	08001eb3 	.word	0x08001eb3
 8001e44:	08001eb3 	.word	0x08001eb3
 8001e48:	08001e61 	.word	0x08001e61
 8001e4c:	08001e75 	.word	0x08001e75
 8001e50:	4a79      	ldr	r2, [pc, #484]	@ (8002038 <HAL_GPIO_Init+0x2b4>)
 8001e52:	4293      	cmp	r3, r2
 8001e54:	d013      	beq.n	8001e7e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001e56:	e02c      	b.n	8001eb2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001e58:	683b      	ldr	r3, [r7, #0]
 8001e5a:	68db      	ldr	r3, [r3, #12]
 8001e5c:	623b      	str	r3, [r7, #32]
          break;
 8001e5e:	e029      	b.n	8001eb4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001e60:	683b      	ldr	r3, [r7, #0]
 8001e62:	68db      	ldr	r3, [r3, #12]
 8001e64:	3304      	adds	r3, #4
 8001e66:	623b      	str	r3, [r7, #32]
          break;
 8001e68:	e024      	b.n	8001eb4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001e6a:	683b      	ldr	r3, [r7, #0]
 8001e6c:	68db      	ldr	r3, [r3, #12]
 8001e6e:	3308      	adds	r3, #8
 8001e70:	623b      	str	r3, [r7, #32]
          break;
 8001e72:	e01f      	b.n	8001eb4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001e74:	683b      	ldr	r3, [r7, #0]
 8001e76:	68db      	ldr	r3, [r3, #12]
 8001e78:	330c      	adds	r3, #12
 8001e7a:	623b      	str	r3, [r7, #32]
          break;
 8001e7c:	e01a      	b.n	8001eb4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001e7e:	683b      	ldr	r3, [r7, #0]
 8001e80:	689b      	ldr	r3, [r3, #8]
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d102      	bne.n	8001e8c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001e86:	2304      	movs	r3, #4
 8001e88:	623b      	str	r3, [r7, #32]
          break;
 8001e8a:	e013      	b.n	8001eb4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001e8c:	683b      	ldr	r3, [r7, #0]
 8001e8e:	689b      	ldr	r3, [r3, #8]
 8001e90:	2b01      	cmp	r3, #1
 8001e92:	d105      	bne.n	8001ea0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001e94:	2308      	movs	r3, #8
 8001e96:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	69fa      	ldr	r2, [r7, #28]
 8001e9c:	611a      	str	r2, [r3, #16]
          break;
 8001e9e:	e009      	b.n	8001eb4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001ea0:	2308      	movs	r3, #8
 8001ea2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	69fa      	ldr	r2, [r7, #28]
 8001ea8:	615a      	str	r2, [r3, #20]
          break;
 8001eaa:	e003      	b.n	8001eb4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001eac:	2300      	movs	r3, #0
 8001eae:	623b      	str	r3, [r7, #32]
          break;
 8001eb0:	e000      	b.n	8001eb4 <HAL_GPIO_Init+0x130>
          break;
 8001eb2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001eb4:	69bb      	ldr	r3, [r7, #24]
 8001eb6:	2bff      	cmp	r3, #255	@ 0xff
 8001eb8:	d801      	bhi.n	8001ebe <HAL_GPIO_Init+0x13a>
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	e001      	b.n	8001ec2 <HAL_GPIO_Init+0x13e>
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	3304      	adds	r3, #4
 8001ec2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001ec4:	69bb      	ldr	r3, [r7, #24]
 8001ec6:	2bff      	cmp	r3, #255	@ 0xff
 8001ec8:	d802      	bhi.n	8001ed0 <HAL_GPIO_Init+0x14c>
 8001eca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ecc:	009b      	lsls	r3, r3, #2
 8001ece:	e002      	b.n	8001ed6 <HAL_GPIO_Init+0x152>
 8001ed0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ed2:	3b08      	subs	r3, #8
 8001ed4:	009b      	lsls	r3, r3, #2
 8001ed6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001ed8:	697b      	ldr	r3, [r7, #20]
 8001eda:	681a      	ldr	r2, [r3, #0]
 8001edc:	210f      	movs	r1, #15
 8001ede:	693b      	ldr	r3, [r7, #16]
 8001ee0:	fa01 f303 	lsl.w	r3, r1, r3
 8001ee4:	43db      	mvns	r3, r3
 8001ee6:	401a      	ands	r2, r3
 8001ee8:	6a39      	ldr	r1, [r7, #32]
 8001eea:	693b      	ldr	r3, [r7, #16]
 8001eec:	fa01 f303 	lsl.w	r3, r1, r3
 8001ef0:	431a      	orrs	r2, r3
 8001ef2:	697b      	ldr	r3, [r7, #20]
 8001ef4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001ef6:	683b      	ldr	r3, [r7, #0]
 8001ef8:	685b      	ldr	r3, [r3, #4]
 8001efa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	f000 80b1 	beq.w	8002066 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001f04:	4b4d      	ldr	r3, [pc, #308]	@ (800203c <HAL_GPIO_Init+0x2b8>)
 8001f06:	699b      	ldr	r3, [r3, #24]
 8001f08:	4a4c      	ldr	r2, [pc, #304]	@ (800203c <HAL_GPIO_Init+0x2b8>)
 8001f0a:	f043 0301 	orr.w	r3, r3, #1
 8001f0e:	6193      	str	r3, [r2, #24]
 8001f10:	4b4a      	ldr	r3, [pc, #296]	@ (800203c <HAL_GPIO_Init+0x2b8>)
 8001f12:	699b      	ldr	r3, [r3, #24]
 8001f14:	f003 0301 	and.w	r3, r3, #1
 8001f18:	60bb      	str	r3, [r7, #8]
 8001f1a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001f1c:	4a48      	ldr	r2, [pc, #288]	@ (8002040 <HAL_GPIO_Init+0x2bc>)
 8001f1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f20:	089b      	lsrs	r3, r3, #2
 8001f22:	3302      	adds	r3, #2
 8001f24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f28:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001f2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f2c:	f003 0303 	and.w	r3, r3, #3
 8001f30:	009b      	lsls	r3, r3, #2
 8001f32:	220f      	movs	r2, #15
 8001f34:	fa02 f303 	lsl.w	r3, r2, r3
 8001f38:	43db      	mvns	r3, r3
 8001f3a:	68fa      	ldr	r2, [r7, #12]
 8001f3c:	4013      	ands	r3, r2
 8001f3e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	4a40      	ldr	r2, [pc, #256]	@ (8002044 <HAL_GPIO_Init+0x2c0>)
 8001f44:	4293      	cmp	r3, r2
 8001f46:	d013      	beq.n	8001f70 <HAL_GPIO_Init+0x1ec>
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	4a3f      	ldr	r2, [pc, #252]	@ (8002048 <HAL_GPIO_Init+0x2c4>)
 8001f4c:	4293      	cmp	r3, r2
 8001f4e:	d00d      	beq.n	8001f6c <HAL_GPIO_Init+0x1e8>
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	4a3e      	ldr	r2, [pc, #248]	@ (800204c <HAL_GPIO_Init+0x2c8>)
 8001f54:	4293      	cmp	r3, r2
 8001f56:	d007      	beq.n	8001f68 <HAL_GPIO_Init+0x1e4>
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	4a3d      	ldr	r2, [pc, #244]	@ (8002050 <HAL_GPIO_Init+0x2cc>)
 8001f5c:	4293      	cmp	r3, r2
 8001f5e:	d101      	bne.n	8001f64 <HAL_GPIO_Init+0x1e0>
 8001f60:	2303      	movs	r3, #3
 8001f62:	e006      	b.n	8001f72 <HAL_GPIO_Init+0x1ee>
 8001f64:	2304      	movs	r3, #4
 8001f66:	e004      	b.n	8001f72 <HAL_GPIO_Init+0x1ee>
 8001f68:	2302      	movs	r3, #2
 8001f6a:	e002      	b.n	8001f72 <HAL_GPIO_Init+0x1ee>
 8001f6c:	2301      	movs	r3, #1
 8001f6e:	e000      	b.n	8001f72 <HAL_GPIO_Init+0x1ee>
 8001f70:	2300      	movs	r3, #0
 8001f72:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001f74:	f002 0203 	and.w	r2, r2, #3
 8001f78:	0092      	lsls	r2, r2, #2
 8001f7a:	4093      	lsls	r3, r2
 8001f7c:	68fa      	ldr	r2, [r7, #12]
 8001f7e:	4313      	orrs	r3, r2
 8001f80:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001f82:	492f      	ldr	r1, [pc, #188]	@ (8002040 <HAL_GPIO_Init+0x2bc>)
 8001f84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f86:	089b      	lsrs	r3, r3, #2
 8001f88:	3302      	adds	r3, #2
 8001f8a:	68fa      	ldr	r2, [r7, #12]
 8001f8c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001f90:	683b      	ldr	r3, [r7, #0]
 8001f92:	685b      	ldr	r3, [r3, #4]
 8001f94:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d006      	beq.n	8001faa <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001f9c:	4b2d      	ldr	r3, [pc, #180]	@ (8002054 <HAL_GPIO_Init+0x2d0>)
 8001f9e:	689a      	ldr	r2, [r3, #8]
 8001fa0:	492c      	ldr	r1, [pc, #176]	@ (8002054 <HAL_GPIO_Init+0x2d0>)
 8001fa2:	69bb      	ldr	r3, [r7, #24]
 8001fa4:	4313      	orrs	r3, r2
 8001fa6:	608b      	str	r3, [r1, #8]
 8001fa8:	e006      	b.n	8001fb8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001faa:	4b2a      	ldr	r3, [pc, #168]	@ (8002054 <HAL_GPIO_Init+0x2d0>)
 8001fac:	689a      	ldr	r2, [r3, #8]
 8001fae:	69bb      	ldr	r3, [r7, #24]
 8001fb0:	43db      	mvns	r3, r3
 8001fb2:	4928      	ldr	r1, [pc, #160]	@ (8002054 <HAL_GPIO_Init+0x2d0>)
 8001fb4:	4013      	ands	r3, r2
 8001fb6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001fb8:	683b      	ldr	r3, [r7, #0]
 8001fba:	685b      	ldr	r3, [r3, #4]
 8001fbc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d006      	beq.n	8001fd2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001fc4:	4b23      	ldr	r3, [pc, #140]	@ (8002054 <HAL_GPIO_Init+0x2d0>)
 8001fc6:	68da      	ldr	r2, [r3, #12]
 8001fc8:	4922      	ldr	r1, [pc, #136]	@ (8002054 <HAL_GPIO_Init+0x2d0>)
 8001fca:	69bb      	ldr	r3, [r7, #24]
 8001fcc:	4313      	orrs	r3, r2
 8001fce:	60cb      	str	r3, [r1, #12]
 8001fd0:	e006      	b.n	8001fe0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001fd2:	4b20      	ldr	r3, [pc, #128]	@ (8002054 <HAL_GPIO_Init+0x2d0>)
 8001fd4:	68da      	ldr	r2, [r3, #12]
 8001fd6:	69bb      	ldr	r3, [r7, #24]
 8001fd8:	43db      	mvns	r3, r3
 8001fda:	491e      	ldr	r1, [pc, #120]	@ (8002054 <HAL_GPIO_Init+0x2d0>)
 8001fdc:	4013      	ands	r3, r2
 8001fde:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001fe0:	683b      	ldr	r3, [r7, #0]
 8001fe2:	685b      	ldr	r3, [r3, #4]
 8001fe4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d006      	beq.n	8001ffa <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001fec:	4b19      	ldr	r3, [pc, #100]	@ (8002054 <HAL_GPIO_Init+0x2d0>)
 8001fee:	685a      	ldr	r2, [r3, #4]
 8001ff0:	4918      	ldr	r1, [pc, #96]	@ (8002054 <HAL_GPIO_Init+0x2d0>)
 8001ff2:	69bb      	ldr	r3, [r7, #24]
 8001ff4:	4313      	orrs	r3, r2
 8001ff6:	604b      	str	r3, [r1, #4]
 8001ff8:	e006      	b.n	8002008 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001ffa:	4b16      	ldr	r3, [pc, #88]	@ (8002054 <HAL_GPIO_Init+0x2d0>)
 8001ffc:	685a      	ldr	r2, [r3, #4]
 8001ffe:	69bb      	ldr	r3, [r7, #24]
 8002000:	43db      	mvns	r3, r3
 8002002:	4914      	ldr	r1, [pc, #80]	@ (8002054 <HAL_GPIO_Init+0x2d0>)
 8002004:	4013      	ands	r3, r2
 8002006:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002008:	683b      	ldr	r3, [r7, #0]
 800200a:	685b      	ldr	r3, [r3, #4]
 800200c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002010:	2b00      	cmp	r3, #0
 8002012:	d021      	beq.n	8002058 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002014:	4b0f      	ldr	r3, [pc, #60]	@ (8002054 <HAL_GPIO_Init+0x2d0>)
 8002016:	681a      	ldr	r2, [r3, #0]
 8002018:	490e      	ldr	r1, [pc, #56]	@ (8002054 <HAL_GPIO_Init+0x2d0>)
 800201a:	69bb      	ldr	r3, [r7, #24]
 800201c:	4313      	orrs	r3, r2
 800201e:	600b      	str	r3, [r1, #0]
 8002020:	e021      	b.n	8002066 <HAL_GPIO_Init+0x2e2>
 8002022:	bf00      	nop
 8002024:	10320000 	.word	0x10320000
 8002028:	10310000 	.word	0x10310000
 800202c:	10220000 	.word	0x10220000
 8002030:	10210000 	.word	0x10210000
 8002034:	10120000 	.word	0x10120000
 8002038:	10110000 	.word	0x10110000
 800203c:	40021000 	.word	0x40021000
 8002040:	40010000 	.word	0x40010000
 8002044:	40010800 	.word	0x40010800
 8002048:	40010c00 	.word	0x40010c00
 800204c:	40011000 	.word	0x40011000
 8002050:	40011400 	.word	0x40011400
 8002054:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002058:	4b0b      	ldr	r3, [pc, #44]	@ (8002088 <HAL_GPIO_Init+0x304>)
 800205a:	681a      	ldr	r2, [r3, #0]
 800205c:	69bb      	ldr	r3, [r7, #24]
 800205e:	43db      	mvns	r3, r3
 8002060:	4909      	ldr	r1, [pc, #36]	@ (8002088 <HAL_GPIO_Init+0x304>)
 8002062:	4013      	ands	r3, r2
 8002064:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002066:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002068:	3301      	adds	r3, #1
 800206a:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800206c:	683b      	ldr	r3, [r7, #0]
 800206e:	681a      	ldr	r2, [r3, #0]
 8002070:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002072:	fa22 f303 	lsr.w	r3, r2, r3
 8002076:	2b00      	cmp	r3, #0
 8002078:	f47f ae8e 	bne.w	8001d98 <HAL_GPIO_Init+0x14>
  }
}
 800207c:	bf00      	nop
 800207e:	bf00      	nop
 8002080:	372c      	adds	r7, #44	@ 0x2c
 8002082:	46bd      	mov	sp, r7
 8002084:	bc80      	pop	{r7}
 8002086:	4770      	bx	lr
 8002088:	40010400 	.word	0x40010400

0800208c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800208c:	b480      	push	{r7}
 800208e:	b083      	sub	sp, #12
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]
 8002094:	460b      	mov	r3, r1
 8002096:	807b      	strh	r3, [r7, #2]
 8002098:	4613      	mov	r3, r2
 800209a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800209c:	787b      	ldrb	r3, [r7, #1]
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d003      	beq.n	80020aa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80020a2:	887a      	ldrh	r2, [r7, #2]
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80020a8:	e003      	b.n	80020b2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80020aa:	887b      	ldrh	r3, [r7, #2]
 80020ac:	041a      	lsls	r2, r3, #16
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	611a      	str	r2, [r3, #16]
}
 80020b2:	bf00      	nop
 80020b4:	370c      	adds	r7, #12
 80020b6:	46bd      	mov	sp, r7
 80020b8:	bc80      	pop	{r7}
 80020ba:	4770      	bx	lr

080020bc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	b082      	sub	sp, #8
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	4603      	mov	r3, r0
 80020c4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80020c6:	4b08      	ldr	r3, [pc, #32]	@ (80020e8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80020c8:	695a      	ldr	r2, [r3, #20]
 80020ca:	88fb      	ldrh	r3, [r7, #6]
 80020cc:	4013      	ands	r3, r2
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d006      	beq.n	80020e0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80020d2:	4a05      	ldr	r2, [pc, #20]	@ (80020e8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80020d4:	88fb      	ldrh	r3, [r7, #6]
 80020d6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80020d8:	88fb      	ldrh	r3, [r7, #6]
 80020da:	4618      	mov	r0, r3
 80020dc:	f000 f806 	bl	80020ec <HAL_GPIO_EXTI_Callback>
  }
}
 80020e0:	bf00      	nop
 80020e2:	3708      	adds	r7, #8
 80020e4:	46bd      	mov	sp, r7
 80020e6:	bd80      	pop	{r7, pc}
 80020e8:	40010400 	.word	0x40010400

080020ec <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80020ec:	b480      	push	{r7}
 80020ee:	b083      	sub	sp, #12
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	4603      	mov	r3, r0
 80020f4:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80020f6:	bf00      	nop
 80020f8:	370c      	adds	r7, #12
 80020fa:	46bd      	mov	sp, r7
 80020fc:	bc80      	pop	{r7}
 80020fe:	4770      	bx	lr

08002100 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	b086      	sub	sp, #24
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	2b00      	cmp	r3, #0
 800210c:	d101      	bne.n	8002112 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800210e:	2301      	movs	r3, #1
 8002110:	e272      	b.n	80025f8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f003 0301 	and.w	r3, r3, #1
 800211a:	2b00      	cmp	r3, #0
 800211c:	f000 8087 	beq.w	800222e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002120:	4b92      	ldr	r3, [pc, #584]	@ (800236c <HAL_RCC_OscConfig+0x26c>)
 8002122:	685b      	ldr	r3, [r3, #4]
 8002124:	f003 030c 	and.w	r3, r3, #12
 8002128:	2b04      	cmp	r3, #4
 800212a:	d00c      	beq.n	8002146 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800212c:	4b8f      	ldr	r3, [pc, #572]	@ (800236c <HAL_RCC_OscConfig+0x26c>)
 800212e:	685b      	ldr	r3, [r3, #4]
 8002130:	f003 030c 	and.w	r3, r3, #12
 8002134:	2b08      	cmp	r3, #8
 8002136:	d112      	bne.n	800215e <HAL_RCC_OscConfig+0x5e>
 8002138:	4b8c      	ldr	r3, [pc, #560]	@ (800236c <HAL_RCC_OscConfig+0x26c>)
 800213a:	685b      	ldr	r3, [r3, #4]
 800213c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002140:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002144:	d10b      	bne.n	800215e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002146:	4b89      	ldr	r3, [pc, #548]	@ (800236c <HAL_RCC_OscConfig+0x26c>)
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800214e:	2b00      	cmp	r3, #0
 8002150:	d06c      	beq.n	800222c <HAL_RCC_OscConfig+0x12c>
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	685b      	ldr	r3, [r3, #4]
 8002156:	2b00      	cmp	r3, #0
 8002158:	d168      	bne.n	800222c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800215a:	2301      	movs	r3, #1
 800215c:	e24c      	b.n	80025f8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	685b      	ldr	r3, [r3, #4]
 8002162:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002166:	d106      	bne.n	8002176 <HAL_RCC_OscConfig+0x76>
 8002168:	4b80      	ldr	r3, [pc, #512]	@ (800236c <HAL_RCC_OscConfig+0x26c>)
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	4a7f      	ldr	r2, [pc, #508]	@ (800236c <HAL_RCC_OscConfig+0x26c>)
 800216e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002172:	6013      	str	r3, [r2, #0]
 8002174:	e02e      	b.n	80021d4 <HAL_RCC_OscConfig+0xd4>
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	685b      	ldr	r3, [r3, #4]
 800217a:	2b00      	cmp	r3, #0
 800217c:	d10c      	bne.n	8002198 <HAL_RCC_OscConfig+0x98>
 800217e:	4b7b      	ldr	r3, [pc, #492]	@ (800236c <HAL_RCC_OscConfig+0x26c>)
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	4a7a      	ldr	r2, [pc, #488]	@ (800236c <HAL_RCC_OscConfig+0x26c>)
 8002184:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002188:	6013      	str	r3, [r2, #0]
 800218a:	4b78      	ldr	r3, [pc, #480]	@ (800236c <HAL_RCC_OscConfig+0x26c>)
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	4a77      	ldr	r2, [pc, #476]	@ (800236c <HAL_RCC_OscConfig+0x26c>)
 8002190:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002194:	6013      	str	r3, [r2, #0]
 8002196:	e01d      	b.n	80021d4 <HAL_RCC_OscConfig+0xd4>
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	685b      	ldr	r3, [r3, #4]
 800219c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80021a0:	d10c      	bne.n	80021bc <HAL_RCC_OscConfig+0xbc>
 80021a2:	4b72      	ldr	r3, [pc, #456]	@ (800236c <HAL_RCC_OscConfig+0x26c>)
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	4a71      	ldr	r2, [pc, #452]	@ (800236c <HAL_RCC_OscConfig+0x26c>)
 80021a8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80021ac:	6013      	str	r3, [r2, #0]
 80021ae:	4b6f      	ldr	r3, [pc, #444]	@ (800236c <HAL_RCC_OscConfig+0x26c>)
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	4a6e      	ldr	r2, [pc, #440]	@ (800236c <HAL_RCC_OscConfig+0x26c>)
 80021b4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80021b8:	6013      	str	r3, [r2, #0]
 80021ba:	e00b      	b.n	80021d4 <HAL_RCC_OscConfig+0xd4>
 80021bc:	4b6b      	ldr	r3, [pc, #428]	@ (800236c <HAL_RCC_OscConfig+0x26c>)
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	4a6a      	ldr	r2, [pc, #424]	@ (800236c <HAL_RCC_OscConfig+0x26c>)
 80021c2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80021c6:	6013      	str	r3, [r2, #0]
 80021c8:	4b68      	ldr	r3, [pc, #416]	@ (800236c <HAL_RCC_OscConfig+0x26c>)
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	4a67      	ldr	r2, [pc, #412]	@ (800236c <HAL_RCC_OscConfig+0x26c>)
 80021ce:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80021d2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	685b      	ldr	r3, [r3, #4]
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d013      	beq.n	8002204 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021dc:	f7ff fa54 	bl	8001688 <HAL_GetTick>
 80021e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021e2:	e008      	b.n	80021f6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80021e4:	f7ff fa50 	bl	8001688 <HAL_GetTick>
 80021e8:	4602      	mov	r2, r0
 80021ea:	693b      	ldr	r3, [r7, #16]
 80021ec:	1ad3      	subs	r3, r2, r3
 80021ee:	2b64      	cmp	r3, #100	@ 0x64
 80021f0:	d901      	bls.n	80021f6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80021f2:	2303      	movs	r3, #3
 80021f4:	e200      	b.n	80025f8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021f6:	4b5d      	ldr	r3, [pc, #372]	@ (800236c <HAL_RCC_OscConfig+0x26c>)
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d0f0      	beq.n	80021e4 <HAL_RCC_OscConfig+0xe4>
 8002202:	e014      	b.n	800222e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002204:	f7ff fa40 	bl	8001688 <HAL_GetTick>
 8002208:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800220a:	e008      	b.n	800221e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800220c:	f7ff fa3c 	bl	8001688 <HAL_GetTick>
 8002210:	4602      	mov	r2, r0
 8002212:	693b      	ldr	r3, [r7, #16]
 8002214:	1ad3      	subs	r3, r2, r3
 8002216:	2b64      	cmp	r3, #100	@ 0x64
 8002218:	d901      	bls.n	800221e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800221a:	2303      	movs	r3, #3
 800221c:	e1ec      	b.n	80025f8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800221e:	4b53      	ldr	r3, [pc, #332]	@ (800236c <HAL_RCC_OscConfig+0x26c>)
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002226:	2b00      	cmp	r3, #0
 8002228:	d1f0      	bne.n	800220c <HAL_RCC_OscConfig+0x10c>
 800222a:	e000      	b.n	800222e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800222c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f003 0302 	and.w	r3, r3, #2
 8002236:	2b00      	cmp	r3, #0
 8002238:	d063      	beq.n	8002302 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800223a:	4b4c      	ldr	r3, [pc, #304]	@ (800236c <HAL_RCC_OscConfig+0x26c>)
 800223c:	685b      	ldr	r3, [r3, #4]
 800223e:	f003 030c 	and.w	r3, r3, #12
 8002242:	2b00      	cmp	r3, #0
 8002244:	d00b      	beq.n	800225e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002246:	4b49      	ldr	r3, [pc, #292]	@ (800236c <HAL_RCC_OscConfig+0x26c>)
 8002248:	685b      	ldr	r3, [r3, #4]
 800224a:	f003 030c 	and.w	r3, r3, #12
 800224e:	2b08      	cmp	r3, #8
 8002250:	d11c      	bne.n	800228c <HAL_RCC_OscConfig+0x18c>
 8002252:	4b46      	ldr	r3, [pc, #280]	@ (800236c <HAL_RCC_OscConfig+0x26c>)
 8002254:	685b      	ldr	r3, [r3, #4]
 8002256:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800225a:	2b00      	cmp	r3, #0
 800225c:	d116      	bne.n	800228c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800225e:	4b43      	ldr	r3, [pc, #268]	@ (800236c <HAL_RCC_OscConfig+0x26c>)
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f003 0302 	and.w	r3, r3, #2
 8002266:	2b00      	cmp	r3, #0
 8002268:	d005      	beq.n	8002276 <HAL_RCC_OscConfig+0x176>
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	691b      	ldr	r3, [r3, #16]
 800226e:	2b01      	cmp	r3, #1
 8002270:	d001      	beq.n	8002276 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002272:	2301      	movs	r3, #1
 8002274:	e1c0      	b.n	80025f8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002276:	4b3d      	ldr	r3, [pc, #244]	@ (800236c <HAL_RCC_OscConfig+0x26c>)
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	695b      	ldr	r3, [r3, #20]
 8002282:	00db      	lsls	r3, r3, #3
 8002284:	4939      	ldr	r1, [pc, #228]	@ (800236c <HAL_RCC_OscConfig+0x26c>)
 8002286:	4313      	orrs	r3, r2
 8002288:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800228a:	e03a      	b.n	8002302 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	691b      	ldr	r3, [r3, #16]
 8002290:	2b00      	cmp	r3, #0
 8002292:	d020      	beq.n	80022d6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002294:	4b36      	ldr	r3, [pc, #216]	@ (8002370 <HAL_RCC_OscConfig+0x270>)
 8002296:	2201      	movs	r2, #1
 8002298:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800229a:	f7ff f9f5 	bl	8001688 <HAL_GetTick>
 800229e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022a0:	e008      	b.n	80022b4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80022a2:	f7ff f9f1 	bl	8001688 <HAL_GetTick>
 80022a6:	4602      	mov	r2, r0
 80022a8:	693b      	ldr	r3, [r7, #16]
 80022aa:	1ad3      	subs	r3, r2, r3
 80022ac:	2b02      	cmp	r3, #2
 80022ae:	d901      	bls.n	80022b4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80022b0:	2303      	movs	r3, #3
 80022b2:	e1a1      	b.n	80025f8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022b4:	4b2d      	ldr	r3, [pc, #180]	@ (800236c <HAL_RCC_OscConfig+0x26c>)
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f003 0302 	and.w	r3, r3, #2
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d0f0      	beq.n	80022a2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022c0:	4b2a      	ldr	r3, [pc, #168]	@ (800236c <HAL_RCC_OscConfig+0x26c>)
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	695b      	ldr	r3, [r3, #20]
 80022cc:	00db      	lsls	r3, r3, #3
 80022ce:	4927      	ldr	r1, [pc, #156]	@ (800236c <HAL_RCC_OscConfig+0x26c>)
 80022d0:	4313      	orrs	r3, r2
 80022d2:	600b      	str	r3, [r1, #0]
 80022d4:	e015      	b.n	8002302 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80022d6:	4b26      	ldr	r3, [pc, #152]	@ (8002370 <HAL_RCC_OscConfig+0x270>)
 80022d8:	2200      	movs	r2, #0
 80022da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022dc:	f7ff f9d4 	bl	8001688 <HAL_GetTick>
 80022e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80022e2:	e008      	b.n	80022f6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80022e4:	f7ff f9d0 	bl	8001688 <HAL_GetTick>
 80022e8:	4602      	mov	r2, r0
 80022ea:	693b      	ldr	r3, [r7, #16]
 80022ec:	1ad3      	subs	r3, r2, r3
 80022ee:	2b02      	cmp	r3, #2
 80022f0:	d901      	bls.n	80022f6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80022f2:	2303      	movs	r3, #3
 80022f4:	e180      	b.n	80025f8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80022f6:	4b1d      	ldr	r3, [pc, #116]	@ (800236c <HAL_RCC_OscConfig+0x26c>)
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f003 0302 	and.w	r3, r3, #2
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d1f0      	bne.n	80022e4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f003 0308 	and.w	r3, r3, #8
 800230a:	2b00      	cmp	r3, #0
 800230c:	d03a      	beq.n	8002384 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	699b      	ldr	r3, [r3, #24]
 8002312:	2b00      	cmp	r3, #0
 8002314:	d019      	beq.n	800234a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002316:	4b17      	ldr	r3, [pc, #92]	@ (8002374 <HAL_RCC_OscConfig+0x274>)
 8002318:	2201      	movs	r2, #1
 800231a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800231c:	f7ff f9b4 	bl	8001688 <HAL_GetTick>
 8002320:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002322:	e008      	b.n	8002336 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002324:	f7ff f9b0 	bl	8001688 <HAL_GetTick>
 8002328:	4602      	mov	r2, r0
 800232a:	693b      	ldr	r3, [r7, #16]
 800232c:	1ad3      	subs	r3, r2, r3
 800232e:	2b02      	cmp	r3, #2
 8002330:	d901      	bls.n	8002336 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002332:	2303      	movs	r3, #3
 8002334:	e160      	b.n	80025f8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002336:	4b0d      	ldr	r3, [pc, #52]	@ (800236c <HAL_RCC_OscConfig+0x26c>)
 8002338:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800233a:	f003 0302 	and.w	r3, r3, #2
 800233e:	2b00      	cmp	r3, #0
 8002340:	d0f0      	beq.n	8002324 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002342:	2001      	movs	r0, #1
 8002344:	f000 face 	bl	80028e4 <RCC_Delay>
 8002348:	e01c      	b.n	8002384 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800234a:	4b0a      	ldr	r3, [pc, #40]	@ (8002374 <HAL_RCC_OscConfig+0x274>)
 800234c:	2200      	movs	r2, #0
 800234e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002350:	f7ff f99a 	bl	8001688 <HAL_GetTick>
 8002354:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002356:	e00f      	b.n	8002378 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002358:	f7ff f996 	bl	8001688 <HAL_GetTick>
 800235c:	4602      	mov	r2, r0
 800235e:	693b      	ldr	r3, [r7, #16]
 8002360:	1ad3      	subs	r3, r2, r3
 8002362:	2b02      	cmp	r3, #2
 8002364:	d908      	bls.n	8002378 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002366:	2303      	movs	r3, #3
 8002368:	e146      	b.n	80025f8 <HAL_RCC_OscConfig+0x4f8>
 800236a:	bf00      	nop
 800236c:	40021000 	.word	0x40021000
 8002370:	42420000 	.word	0x42420000
 8002374:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002378:	4b92      	ldr	r3, [pc, #584]	@ (80025c4 <HAL_RCC_OscConfig+0x4c4>)
 800237a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800237c:	f003 0302 	and.w	r3, r3, #2
 8002380:	2b00      	cmp	r3, #0
 8002382:	d1e9      	bne.n	8002358 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f003 0304 	and.w	r3, r3, #4
 800238c:	2b00      	cmp	r3, #0
 800238e:	f000 80a6 	beq.w	80024de <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002392:	2300      	movs	r3, #0
 8002394:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002396:	4b8b      	ldr	r3, [pc, #556]	@ (80025c4 <HAL_RCC_OscConfig+0x4c4>)
 8002398:	69db      	ldr	r3, [r3, #28]
 800239a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d10d      	bne.n	80023be <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80023a2:	4b88      	ldr	r3, [pc, #544]	@ (80025c4 <HAL_RCC_OscConfig+0x4c4>)
 80023a4:	69db      	ldr	r3, [r3, #28]
 80023a6:	4a87      	ldr	r2, [pc, #540]	@ (80025c4 <HAL_RCC_OscConfig+0x4c4>)
 80023a8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80023ac:	61d3      	str	r3, [r2, #28]
 80023ae:	4b85      	ldr	r3, [pc, #532]	@ (80025c4 <HAL_RCC_OscConfig+0x4c4>)
 80023b0:	69db      	ldr	r3, [r3, #28]
 80023b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80023b6:	60bb      	str	r3, [r7, #8]
 80023b8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80023ba:	2301      	movs	r3, #1
 80023bc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023be:	4b82      	ldr	r3, [pc, #520]	@ (80025c8 <HAL_RCC_OscConfig+0x4c8>)
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d118      	bne.n	80023fc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80023ca:	4b7f      	ldr	r3, [pc, #508]	@ (80025c8 <HAL_RCC_OscConfig+0x4c8>)
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	4a7e      	ldr	r2, [pc, #504]	@ (80025c8 <HAL_RCC_OscConfig+0x4c8>)
 80023d0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80023d4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80023d6:	f7ff f957 	bl	8001688 <HAL_GetTick>
 80023da:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023dc:	e008      	b.n	80023f0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80023de:	f7ff f953 	bl	8001688 <HAL_GetTick>
 80023e2:	4602      	mov	r2, r0
 80023e4:	693b      	ldr	r3, [r7, #16]
 80023e6:	1ad3      	subs	r3, r2, r3
 80023e8:	2b64      	cmp	r3, #100	@ 0x64
 80023ea:	d901      	bls.n	80023f0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80023ec:	2303      	movs	r3, #3
 80023ee:	e103      	b.n	80025f8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023f0:	4b75      	ldr	r3, [pc, #468]	@ (80025c8 <HAL_RCC_OscConfig+0x4c8>)
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d0f0      	beq.n	80023de <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	68db      	ldr	r3, [r3, #12]
 8002400:	2b01      	cmp	r3, #1
 8002402:	d106      	bne.n	8002412 <HAL_RCC_OscConfig+0x312>
 8002404:	4b6f      	ldr	r3, [pc, #444]	@ (80025c4 <HAL_RCC_OscConfig+0x4c4>)
 8002406:	6a1b      	ldr	r3, [r3, #32]
 8002408:	4a6e      	ldr	r2, [pc, #440]	@ (80025c4 <HAL_RCC_OscConfig+0x4c4>)
 800240a:	f043 0301 	orr.w	r3, r3, #1
 800240e:	6213      	str	r3, [r2, #32]
 8002410:	e02d      	b.n	800246e <HAL_RCC_OscConfig+0x36e>
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	68db      	ldr	r3, [r3, #12]
 8002416:	2b00      	cmp	r3, #0
 8002418:	d10c      	bne.n	8002434 <HAL_RCC_OscConfig+0x334>
 800241a:	4b6a      	ldr	r3, [pc, #424]	@ (80025c4 <HAL_RCC_OscConfig+0x4c4>)
 800241c:	6a1b      	ldr	r3, [r3, #32]
 800241e:	4a69      	ldr	r2, [pc, #420]	@ (80025c4 <HAL_RCC_OscConfig+0x4c4>)
 8002420:	f023 0301 	bic.w	r3, r3, #1
 8002424:	6213      	str	r3, [r2, #32]
 8002426:	4b67      	ldr	r3, [pc, #412]	@ (80025c4 <HAL_RCC_OscConfig+0x4c4>)
 8002428:	6a1b      	ldr	r3, [r3, #32]
 800242a:	4a66      	ldr	r2, [pc, #408]	@ (80025c4 <HAL_RCC_OscConfig+0x4c4>)
 800242c:	f023 0304 	bic.w	r3, r3, #4
 8002430:	6213      	str	r3, [r2, #32]
 8002432:	e01c      	b.n	800246e <HAL_RCC_OscConfig+0x36e>
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	68db      	ldr	r3, [r3, #12]
 8002438:	2b05      	cmp	r3, #5
 800243a:	d10c      	bne.n	8002456 <HAL_RCC_OscConfig+0x356>
 800243c:	4b61      	ldr	r3, [pc, #388]	@ (80025c4 <HAL_RCC_OscConfig+0x4c4>)
 800243e:	6a1b      	ldr	r3, [r3, #32]
 8002440:	4a60      	ldr	r2, [pc, #384]	@ (80025c4 <HAL_RCC_OscConfig+0x4c4>)
 8002442:	f043 0304 	orr.w	r3, r3, #4
 8002446:	6213      	str	r3, [r2, #32]
 8002448:	4b5e      	ldr	r3, [pc, #376]	@ (80025c4 <HAL_RCC_OscConfig+0x4c4>)
 800244a:	6a1b      	ldr	r3, [r3, #32]
 800244c:	4a5d      	ldr	r2, [pc, #372]	@ (80025c4 <HAL_RCC_OscConfig+0x4c4>)
 800244e:	f043 0301 	orr.w	r3, r3, #1
 8002452:	6213      	str	r3, [r2, #32]
 8002454:	e00b      	b.n	800246e <HAL_RCC_OscConfig+0x36e>
 8002456:	4b5b      	ldr	r3, [pc, #364]	@ (80025c4 <HAL_RCC_OscConfig+0x4c4>)
 8002458:	6a1b      	ldr	r3, [r3, #32]
 800245a:	4a5a      	ldr	r2, [pc, #360]	@ (80025c4 <HAL_RCC_OscConfig+0x4c4>)
 800245c:	f023 0301 	bic.w	r3, r3, #1
 8002460:	6213      	str	r3, [r2, #32]
 8002462:	4b58      	ldr	r3, [pc, #352]	@ (80025c4 <HAL_RCC_OscConfig+0x4c4>)
 8002464:	6a1b      	ldr	r3, [r3, #32]
 8002466:	4a57      	ldr	r2, [pc, #348]	@ (80025c4 <HAL_RCC_OscConfig+0x4c4>)
 8002468:	f023 0304 	bic.w	r3, r3, #4
 800246c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	68db      	ldr	r3, [r3, #12]
 8002472:	2b00      	cmp	r3, #0
 8002474:	d015      	beq.n	80024a2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002476:	f7ff f907 	bl	8001688 <HAL_GetTick>
 800247a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800247c:	e00a      	b.n	8002494 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800247e:	f7ff f903 	bl	8001688 <HAL_GetTick>
 8002482:	4602      	mov	r2, r0
 8002484:	693b      	ldr	r3, [r7, #16]
 8002486:	1ad3      	subs	r3, r2, r3
 8002488:	f241 3288 	movw	r2, #5000	@ 0x1388
 800248c:	4293      	cmp	r3, r2
 800248e:	d901      	bls.n	8002494 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002490:	2303      	movs	r3, #3
 8002492:	e0b1      	b.n	80025f8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002494:	4b4b      	ldr	r3, [pc, #300]	@ (80025c4 <HAL_RCC_OscConfig+0x4c4>)
 8002496:	6a1b      	ldr	r3, [r3, #32]
 8002498:	f003 0302 	and.w	r3, r3, #2
 800249c:	2b00      	cmp	r3, #0
 800249e:	d0ee      	beq.n	800247e <HAL_RCC_OscConfig+0x37e>
 80024a0:	e014      	b.n	80024cc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024a2:	f7ff f8f1 	bl	8001688 <HAL_GetTick>
 80024a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024a8:	e00a      	b.n	80024c0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024aa:	f7ff f8ed 	bl	8001688 <HAL_GetTick>
 80024ae:	4602      	mov	r2, r0
 80024b0:	693b      	ldr	r3, [r7, #16]
 80024b2:	1ad3      	subs	r3, r2, r3
 80024b4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80024b8:	4293      	cmp	r3, r2
 80024ba:	d901      	bls.n	80024c0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80024bc:	2303      	movs	r3, #3
 80024be:	e09b      	b.n	80025f8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024c0:	4b40      	ldr	r3, [pc, #256]	@ (80025c4 <HAL_RCC_OscConfig+0x4c4>)
 80024c2:	6a1b      	ldr	r3, [r3, #32]
 80024c4:	f003 0302 	and.w	r3, r3, #2
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d1ee      	bne.n	80024aa <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80024cc:	7dfb      	ldrb	r3, [r7, #23]
 80024ce:	2b01      	cmp	r3, #1
 80024d0:	d105      	bne.n	80024de <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80024d2:	4b3c      	ldr	r3, [pc, #240]	@ (80025c4 <HAL_RCC_OscConfig+0x4c4>)
 80024d4:	69db      	ldr	r3, [r3, #28]
 80024d6:	4a3b      	ldr	r2, [pc, #236]	@ (80025c4 <HAL_RCC_OscConfig+0x4c4>)
 80024d8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80024dc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	69db      	ldr	r3, [r3, #28]
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	f000 8087 	beq.w	80025f6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80024e8:	4b36      	ldr	r3, [pc, #216]	@ (80025c4 <HAL_RCC_OscConfig+0x4c4>)
 80024ea:	685b      	ldr	r3, [r3, #4]
 80024ec:	f003 030c 	and.w	r3, r3, #12
 80024f0:	2b08      	cmp	r3, #8
 80024f2:	d061      	beq.n	80025b8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	69db      	ldr	r3, [r3, #28]
 80024f8:	2b02      	cmp	r3, #2
 80024fa:	d146      	bne.n	800258a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024fc:	4b33      	ldr	r3, [pc, #204]	@ (80025cc <HAL_RCC_OscConfig+0x4cc>)
 80024fe:	2200      	movs	r2, #0
 8002500:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002502:	f7ff f8c1 	bl	8001688 <HAL_GetTick>
 8002506:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002508:	e008      	b.n	800251c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800250a:	f7ff f8bd 	bl	8001688 <HAL_GetTick>
 800250e:	4602      	mov	r2, r0
 8002510:	693b      	ldr	r3, [r7, #16]
 8002512:	1ad3      	subs	r3, r2, r3
 8002514:	2b02      	cmp	r3, #2
 8002516:	d901      	bls.n	800251c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002518:	2303      	movs	r3, #3
 800251a:	e06d      	b.n	80025f8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800251c:	4b29      	ldr	r3, [pc, #164]	@ (80025c4 <HAL_RCC_OscConfig+0x4c4>)
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002524:	2b00      	cmp	r3, #0
 8002526:	d1f0      	bne.n	800250a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	6a1b      	ldr	r3, [r3, #32]
 800252c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002530:	d108      	bne.n	8002544 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002532:	4b24      	ldr	r3, [pc, #144]	@ (80025c4 <HAL_RCC_OscConfig+0x4c4>)
 8002534:	685b      	ldr	r3, [r3, #4]
 8002536:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	689b      	ldr	r3, [r3, #8]
 800253e:	4921      	ldr	r1, [pc, #132]	@ (80025c4 <HAL_RCC_OscConfig+0x4c4>)
 8002540:	4313      	orrs	r3, r2
 8002542:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002544:	4b1f      	ldr	r3, [pc, #124]	@ (80025c4 <HAL_RCC_OscConfig+0x4c4>)
 8002546:	685b      	ldr	r3, [r3, #4]
 8002548:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	6a19      	ldr	r1, [r3, #32]
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002554:	430b      	orrs	r3, r1
 8002556:	491b      	ldr	r1, [pc, #108]	@ (80025c4 <HAL_RCC_OscConfig+0x4c4>)
 8002558:	4313      	orrs	r3, r2
 800255a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800255c:	4b1b      	ldr	r3, [pc, #108]	@ (80025cc <HAL_RCC_OscConfig+0x4cc>)
 800255e:	2201      	movs	r2, #1
 8002560:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002562:	f7ff f891 	bl	8001688 <HAL_GetTick>
 8002566:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002568:	e008      	b.n	800257c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800256a:	f7ff f88d 	bl	8001688 <HAL_GetTick>
 800256e:	4602      	mov	r2, r0
 8002570:	693b      	ldr	r3, [r7, #16]
 8002572:	1ad3      	subs	r3, r2, r3
 8002574:	2b02      	cmp	r3, #2
 8002576:	d901      	bls.n	800257c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002578:	2303      	movs	r3, #3
 800257a:	e03d      	b.n	80025f8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800257c:	4b11      	ldr	r3, [pc, #68]	@ (80025c4 <HAL_RCC_OscConfig+0x4c4>)
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002584:	2b00      	cmp	r3, #0
 8002586:	d0f0      	beq.n	800256a <HAL_RCC_OscConfig+0x46a>
 8002588:	e035      	b.n	80025f6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800258a:	4b10      	ldr	r3, [pc, #64]	@ (80025cc <HAL_RCC_OscConfig+0x4cc>)
 800258c:	2200      	movs	r2, #0
 800258e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002590:	f7ff f87a 	bl	8001688 <HAL_GetTick>
 8002594:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002596:	e008      	b.n	80025aa <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002598:	f7ff f876 	bl	8001688 <HAL_GetTick>
 800259c:	4602      	mov	r2, r0
 800259e:	693b      	ldr	r3, [r7, #16]
 80025a0:	1ad3      	subs	r3, r2, r3
 80025a2:	2b02      	cmp	r3, #2
 80025a4:	d901      	bls.n	80025aa <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80025a6:	2303      	movs	r3, #3
 80025a8:	e026      	b.n	80025f8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80025aa:	4b06      	ldr	r3, [pc, #24]	@ (80025c4 <HAL_RCC_OscConfig+0x4c4>)
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d1f0      	bne.n	8002598 <HAL_RCC_OscConfig+0x498>
 80025b6:	e01e      	b.n	80025f6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	69db      	ldr	r3, [r3, #28]
 80025bc:	2b01      	cmp	r3, #1
 80025be:	d107      	bne.n	80025d0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80025c0:	2301      	movs	r3, #1
 80025c2:	e019      	b.n	80025f8 <HAL_RCC_OscConfig+0x4f8>
 80025c4:	40021000 	.word	0x40021000
 80025c8:	40007000 	.word	0x40007000
 80025cc:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80025d0:	4b0b      	ldr	r3, [pc, #44]	@ (8002600 <HAL_RCC_OscConfig+0x500>)
 80025d2:	685b      	ldr	r3, [r3, #4]
 80025d4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	6a1b      	ldr	r3, [r3, #32]
 80025e0:	429a      	cmp	r2, r3
 80025e2:	d106      	bne.n	80025f2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025ee:	429a      	cmp	r2, r3
 80025f0:	d001      	beq.n	80025f6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80025f2:	2301      	movs	r3, #1
 80025f4:	e000      	b.n	80025f8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80025f6:	2300      	movs	r3, #0
}
 80025f8:	4618      	mov	r0, r3
 80025fa:	3718      	adds	r7, #24
 80025fc:	46bd      	mov	sp, r7
 80025fe:	bd80      	pop	{r7, pc}
 8002600:	40021000 	.word	0x40021000

08002604 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002604:	b580      	push	{r7, lr}
 8002606:	b084      	sub	sp, #16
 8002608:	af00      	add	r7, sp, #0
 800260a:	6078      	str	r0, [r7, #4]
 800260c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	2b00      	cmp	r3, #0
 8002612:	d101      	bne.n	8002618 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002614:	2301      	movs	r3, #1
 8002616:	e0d0      	b.n	80027ba <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002618:	4b6a      	ldr	r3, [pc, #424]	@ (80027c4 <HAL_RCC_ClockConfig+0x1c0>)
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f003 0307 	and.w	r3, r3, #7
 8002620:	683a      	ldr	r2, [r7, #0]
 8002622:	429a      	cmp	r2, r3
 8002624:	d910      	bls.n	8002648 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002626:	4b67      	ldr	r3, [pc, #412]	@ (80027c4 <HAL_RCC_ClockConfig+0x1c0>)
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f023 0207 	bic.w	r2, r3, #7
 800262e:	4965      	ldr	r1, [pc, #404]	@ (80027c4 <HAL_RCC_ClockConfig+0x1c0>)
 8002630:	683b      	ldr	r3, [r7, #0]
 8002632:	4313      	orrs	r3, r2
 8002634:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002636:	4b63      	ldr	r3, [pc, #396]	@ (80027c4 <HAL_RCC_ClockConfig+0x1c0>)
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f003 0307 	and.w	r3, r3, #7
 800263e:	683a      	ldr	r2, [r7, #0]
 8002640:	429a      	cmp	r2, r3
 8002642:	d001      	beq.n	8002648 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002644:	2301      	movs	r3, #1
 8002646:	e0b8      	b.n	80027ba <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f003 0302 	and.w	r3, r3, #2
 8002650:	2b00      	cmp	r3, #0
 8002652:	d020      	beq.n	8002696 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f003 0304 	and.w	r3, r3, #4
 800265c:	2b00      	cmp	r3, #0
 800265e:	d005      	beq.n	800266c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002660:	4b59      	ldr	r3, [pc, #356]	@ (80027c8 <HAL_RCC_ClockConfig+0x1c4>)
 8002662:	685b      	ldr	r3, [r3, #4]
 8002664:	4a58      	ldr	r2, [pc, #352]	@ (80027c8 <HAL_RCC_ClockConfig+0x1c4>)
 8002666:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800266a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f003 0308 	and.w	r3, r3, #8
 8002674:	2b00      	cmp	r3, #0
 8002676:	d005      	beq.n	8002684 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002678:	4b53      	ldr	r3, [pc, #332]	@ (80027c8 <HAL_RCC_ClockConfig+0x1c4>)
 800267a:	685b      	ldr	r3, [r3, #4]
 800267c:	4a52      	ldr	r2, [pc, #328]	@ (80027c8 <HAL_RCC_ClockConfig+0x1c4>)
 800267e:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8002682:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002684:	4b50      	ldr	r3, [pc, #320]	@ (80027c8 <HAL_RCC_ClockConfig+0x1c4>)
 8002686:	685b      	ldr	r3, [r3, #4]
 8002688:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	689b      	ldr	r3, [r3, #8]
 8002690:	494d      	ldr	r1, [pc, #308]	@ (80027c8 <HAL_RCC_ClockConfig+0x1c4>)
 8002692:	4313      	orrs	r3, r2
 8002694:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f003 0301 	and.w	r3, r3, #1
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d040      	beq.n	8002724 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	685b      	ldr	r3, [r3, #4]
 80026a6:	2b01      	cmp	r3, #1
 80026a8:	d107      	bne.n	80026ba <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026aa:	4b47      	ldr	r3, [pc, #284]	@ (80027c8 <HAL_RCC_ClockConfig+0x1c4>)
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d115      	bne.n	80026e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026b6:	2301      	movs	r3, #1
 80026b8:	e07f      	b.n	80027ba <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	685b      	ldr	r3, [r3, #4]
 80026be:	2b02      	cmp	r3, #2
 80026c0:	d107      	bne.n	80026d2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026c2:	4b41      	ldr	r3, [pc, #260]	@ (80027c8 <HAL_RCC_ClockConfig+0x1c4>)
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d109      	bne.n	80026e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026ce:	2301      	movs	r3, #1
 80026d0:	e073      	b.n	80027ba <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026d2:	4b3d      	ldr	r3, [pc, #244]	@ (80027c8 <HAL_RCC_ClockConfig+0x1c4>)
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f003 0302 	and.w	r3, r3, #2
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d101      	bne.n	80026e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026de:	2301      	movs	r3, #1
 80026e0:	e06b      	b.n	80027ba <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80026e2:	4b39      	ldr	r3, [pc, #228]	@ (80027c8 <HAL_RCC_ClockConfig+0x1c4>)
 80026e4:	685b      	ldr	r3, [r3, #4]
 80026e6:	f023 0203 	bic.w	r2, r3, #3
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	685b      	ldr	r3, [r3, #4]
 80026ee:	4936      	ldr	r1, [pc, #216]	@ (80027c8 <HAL_RCC_ClockConfig+0x1c4>)
 80026f0:	4313      	orrs	r3, r2
 80026f2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80026f4:	f7fe ffc8 	bl	8001688 <HAL_GetTick>
 80026f8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026fa:	e00a      	b.n	8002712 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80026fc:	f7fe ffc4 	bl	8001688 <HAL_GetTick>
 8002700:	4602      	mov	r2, r0
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	1ad3      	subs	r3, r2, r3
 8002706:	f241 3288 	movw	r2, #5000	@ 0x1388
 800270a:	4293      	cmp	r3, r2
 800270c:	d901      	bls.n	8002712 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800270e:	2303      	movs	r3, #3
 8002710:	e053      	b.n	80027ba <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002712:	4b2d      	ldr	r3, [pc, #180]	@ (80027c8 <HAL_RCC_ClockConfig+0x1c4>)
 8002714:	685b      	ldr	r3, [r3, #4]
 8002716:	f003 020c 	and.w	r2, r3, #12
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	685b      	ldr	r3, [r3, #4]
 800271e:	009b      	lsls	r3, r3, #2
 8002720:	429a      	cmp	r2, r3
 8002722:	d1eb      	bne.n	80026fc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002724:	4b27      	ldr	r3, [pc, #156]	@ (80027c4 <HAL_RCC_ClockConfig+0x1c0>)
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f003 0307 	and.w	r3, r3, #7
 800272c:	683a      	ldr	r2, [r7, #0]
 800272e:	429a      	cmp	r2, r3
 8002730:	d210      	bcs.n	8002754 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002732:	4b24      	ldr	r3, [pc, #144]	@ (80027c4 <HAL_RCC_ClockConfig+0x1c0>)
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f023 0207 	bic.w	r2, r3, #7
 800273a:	4922      	ldr	r1, [pc, #136]	@ (80027c4 <HAL_RCC_ClockConfig+0x1c0>)
 800273c:	683b      	ldr	r3, [r7, #0]
 800273e:	4313      	orrs	r3, r2
 8002740:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002742:	4b20      	ldr	r3, [pc, #128]	@ (80027c4 <HAL_RCC_ClockConfig+0x1c0>)
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f003 0307 	and.w	r3, r3, #7
 800274a:	683a      	ldr	r2, [r7, #0]
 800274c:	429a      	cmp	r2, r3
 800274e:	d001      	beq.n	8002754 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002750:	2301      	movs	r3, #1
 8002752:	e032      	b.n	80027ba <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f003 0304 	and.w	r3, r3, #4
 800275c:	2b00      	cmp	r3, #0
 800275e:	d008      	beq.n	8002772 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002760:	4b19      	ldr	r3, [pc, #100]	@ (80027c8 <HAL_RCC_ClockConfig+0x1c4>)
 8002762:	685b      	ldr	r3, [r3, #4]
 8002764:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	68db      	ldr	r3, [r3, #12]
 800276c:	4916      	ldr	r1, [pc, #88]	@ (80027c8 <HAL_RCC_ClockConfig+0x1c4>)
 800276e:	4313      	orrs	r3, r2
 8002770:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f003 0308 	and.w	r3, r3, #8
 800277a:	2b00      	cmp	r3, #0
 800277c:	d009      	beq.n	8002792 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800277e:	4b12      	ldr	r3, [pc, #72]	@ (80027c8 <HAL_RCC_ClockConfig+0x1c4>)
 8002780:	685b      	ldr	r3, [r3, #4]
 8002782:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	691b      	ldr	r3, [r3, #16]
 800278a:	00db      	lsls	r3, r3, #3
 800278c:	490e      	ldr	r1, [pc, #56]	@ (80027c8 <HAL_RCC_ClockConfig+0x1c4>)
 800278e:	4313      	orrs	r3, r2
 8002790:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002792:	f000 f821 	bl	80027d8 <HAL_RCC_GetSysClockFreq>
 8002796:	4602      	mov	r2, r0
 8002798:	4b0b      	ldr	r3, [pc, #44]	@ (80027c8 <HAL_RCC_ClockConfig+0x1c4>)
 800279a:	685b      	ldr	r3, [r3, #4]
 800279c:	091b      	lsrs	r3, r3, #4
 800279e:	f003 030f 	and.w	r3, r3, #15
 80027a2:	490a      	ldr	r1, [pc, #40]	@ (80027cc <HAL_RCC_ClockConfig+0x1c8>)
 80027a4:	5ccb      	ldrb	r3, [r1, r3]
 80027a6:	fa22 f303 	lsr.w	r3, r2, r3
 80027aa:	4a09      	ldr	r2, [pc, #36]	@ (80027d0 <HAL_RCC_ClockConfig+0x1cc>)
 80027ac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80027ae:	4b09      	ldr	r3, [pc, #36]	@ (80027d4 <HAL_RCC_ClockConfig+0x1d0>)
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	4618      	mov	r0, r3
 80027b4:	f7fe ff26 	bl	8001604 <HAL_InitTick>

  return HAL_OK;
 80027b8:	2300      	movs	r3, #0
}
 80027ba:	4618      	mov	r0, r3
 80027bc:	3710      	adds	r7, #16
 80027be:	46bd      	mov	sp, r7
 80027c0:	bd80      	pop	{r7, pc}
 80027c2:	bf00      	nop
 80027c4:	40022000 	.word	0x40022000
 80027c8:	40021000 	.word	0x40021000
 80027cc:	08004d78 	.word	0x08004d78
 80027d0:	20000000 	.word	0x20000000
 80027d4:	20000004 	.word	0x20000004

080027d8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80027d8:	b480      	push	{r7}
 80027da:	b087      	sub	sp, #28
 80027dc:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80027de:	2300      	movs	r3, #0
 80027e0:	60fb      	str	r3, [r7, #12]
 80027e2:	2300      	movs	r3, #0
 80027e4:	60bb      	str	r3, [r7, #8]
 80027e6:	2300      	movs	r3, #0
 80027e8:	617b      	str	r3, [r7, #20]
 80027ea:	2300      	movs	r3, #0
 80027ec:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80027ee:	2300      	movs	r3, #0
 80027f0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80027f2:	4b1e      	ldr	r3, [pc, #120]	@ (800286c <HAL_RCC_GetSysClockFreq+0x94>)
 80027f4:	685b      	ldr	r3, [r3, #4]
 80027f6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	f003 030c 	and.w	r3, r3, #12
 80027fe:	2b04      	cmp	r3, #4
 8002800:	d002      	beq.n	8002808 <HAL_RCC_GetSysClockFreq+0x30>
 8002802:	2b08      	cmp	r3, #8
 8002804:	d003      	beq.n	800280e <HAL_RCC_GetSysClockFreq+0x36>
 8002806:	e027      	b.n	8002858 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002808:	4b19      	ldr	r3, [pc, #100]	@ (8002870 <HAL_RCC_GetSysClockFreq+0x98>)
 800280a:	613b      	str	r3, [r7, #16]
      break;
 800280c:	e027      	b.n	800285e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	0c9b      	lsrs	r3, r3, #18
 8002812:	f003 030f 	and.w	r3, r3, #15
 8002816:	4a17      	ldr	r2, [pc, #92]	@ (8002874 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002818:	5cd3      	ldrb	r3, [r2, r3]
 800281a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002822:	2b00      	cmp	r3, #0
 8002824:	d010      	beq.n	8002848 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002826:	4b11      	ldr	r3, [pc, #68]	@ (800286c <HAL_RCC_GetSysClockFreq+0x94>)
 8002828:	685b      	ldr	r3, [r3, #4]
 800282a:	0c5b      	lsrs	r3, r3, #17
 800282c:	f003 0301 	and.w	r3, r3, #1
 8002830:	4a11      	ldr	r2, [pc, #68]	@ (8002878 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002832:	5cd3      	ldrb	r3, [r2, r3]
 8002834:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	4a0d      	ldr	r2, [pc, #52]	@ (8002870 <HAL_RCC_GetSysClockFreq+0x98>)
 800283a:	fb03 f202 	mul.w	r2, r3, r2
 800283e:	68bb      	ldr	r3, [r7, #8]
 8002840:	fbb2 f3f3 	udiv	r3, r2, r3
 8002844:	617b      	str	r3, [r7, #20]
 8002846:	e004      	b.n	8002852 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	4a0c      	ldr	r2, [pc, #48]	@ (800287c <HAL_RCC_GetSysClockFreq+0xa4>)
 800284c:	fb02 f303 	mul.w	r3, r2, r3
 8002850:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002852:	697b      	ldr	r3, [r7, #20]
 8002854:	613b      	str	r3, [r7, #16]
      break;
 8002856:	e002      	b.n	800285e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002858:	4b05      	ldr	r3, [pc, #20]	@ (8002870 <HAL_RCC_GetSysClockFreq+0x98>)
 800285a:	613b      	str	r3, [r7, #16]
      break;
 800285c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800285e:	693b      	ldr	r3, [r7, #16]
}
 8002860:	4618      	mov	r0, r3
 8002862:	371c      	adds	r7, #28
 8002864:	46bd      	mov	sp, r7
 8002866:	bc80      	pop	{r7}
 8002868:	4770      	bx	lr
 800286a:	bf00      	nop
 800286c:	40021000 	.word	0x40021000
 8002870:	007a1200 	.word	0x007a1200
 8002874:	08004d90 	.word	0x08004d90
 8002878:	08004da0 	.word	0x08004da0
 800287c:	003d0900 	.word	0x003d0900

08002880 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002880:	b480      	push	{r7}
 8002882:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002884:	4b02      	ldr	r3, [pc, #8]	@ (8002890 <HAL_RCC_GetHCLKFreq+0x10>)
 8002886:	681b      	ldr	r3, [r3, #0]
}
 8002888:	4618      	mov	r0, r3
 800288a:	46bd      	mov	sp, r7
 800288c:	bc80      	pop	{r7}
 800288e:	4770      	bx	lr
 8002890:	20000000 	.word	0x20000000

08002894 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002894:	b580      	push	{r7, lr}
 8002896:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002898:	f7ff fff2 	bl	8002880 <HAL_RCC_GetHCLKFreq>
 800289c:	4602      	mov	r2, r0
 800289e:	4b05      	ldr	r3, [pc, #20]	@ (80028b4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80028a0:	685b      	ldr	r3, [r3, #4]
 80028a2:	0a1b      	lsrs	r3, r3, #8
 80028a4:	f003 0307 	and.w	r3, r3, #7
 80028a8:	4903      	ldr	r1, [pc, #12]	@ (80028b8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80028aa:	5ccb      	ldrb	r3, [r1, r3]
 80028ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80028b0:	4618      	mov	r0, r3
 80028b2:	bd80      	pop	{r7, pc}
 80028b4:	40021000 	.word	0x40021000
 80028b8:	08004d88 	.word	0x08004d88

080028bc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80028bc:	b580      	push	{r7, lr}
 80028be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80028c0:	f7ff ffde 	bl	8002880 <HAL_RCC_GetHCLKFreq>
 80028c4:	4602      	mov	r2, r0
 80028c6:	4b05      	ldr	r3, [pc, #20]	@ (80028dc <HAL_RCC_GetPCLK2Freq+0x20>)
 80028c8:	685b      	ldr	r3, [r3, #4]
 80028ca:	0adb      	lsrs	r3, r3, #11
 80028cc:	f003 0307 	and.w	r3, r3, #7
 80028d0:	4903      	ldr	r1, [pc, #12]	@ (80028e0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80028d2:	5ccb      	ldrb	r3, [r1, r3]
 80028d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80028d8:	4618      	mov	r0, r3
 80028da:	bd80      	pop	{r7, pc}
 80028dc:	40021000 	.word	0x40021000
 80028e0:	08004d88 	.word	0x08004d88

080028e4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80028e4:	b480      	push	{r7}
 80028e6:	b085      	sub	sp, #20
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80028ec:	4b0a      	ldr	r3, [pc, #40]	@ (8002918 <RCC_Delay+0x34>)
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	4a0a      	ldr	r2, [pc, #40]	@ (800291c <RCC_Delay+0x38>)
 80028f2:	fba2 2303 	umull	r2, r3, r2, r3
 80028f6:	0a5b      	lsrs	r3, r3, #9
 80028f8:	687a      	ldr	r2, [r7, #4]
 80028fa:	fb02 f303 	mul.w	r3, r2, r3
 80028fe:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002900:	bf00      	nop
  }
  while (Delay --);
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	1e5a      	subs	r2, r3, #1
 8002906:	60fa      	str	r2, [r7, #12]
 8002908:	2b00      	cmp	r3, #0
 800290a:	d1f9      	bne.n	8002900 <RCC_Delay+0x1c>
}
 800290c:	bf00      	nop
 800290e:	bf00      	nop
 8002910:	3714      	adds	r7, #20
 8002912:	46bd      	mov	sp, r7
 8002914:	bc80      	pop	{r7}
 8002916:	4770      	bx	lr
 8002918:	20000000 	.word	0x20000000
 800291c:	10624dd3 	.word	0x10624dd3

08002920 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002920:	b580      	push	{r7, lr}
 8002922:	b082      	sub	sp, #8
 8002924:	af00      	add	r7, sp, #0
 8002926:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	2b00      	cmp	r3, #0
 800292c:	d101      	bne.n	8002932 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800292e:	2301      	movs	r3, #1
 8002930:	e041      	b.n	80029b6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002938:	b2db      	uxtb	r3, r3
 800293a:	2b00      	cmp	r3, #0
 800293c:	d106      	bne.n	800294c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	2200      	movs	r2, #0
 8002942:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002946:	6878      	ldr	r0, [r7, #4]
 8002948:	f7fe fd20 	bl	800138c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	2202      	movs	r2, #2
 8002950:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681a      	ldr	r2, [r3, #0]
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	3304      	adds	r3, #4
 800295c:	4619      	mov	r1, r3
 800295e:	4610      	mov	r0, r2
 8002960:	f000 fd5a 	bl	8003418 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	2201      	movs	r2, #1
 8002968:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	2201      	movs	r2, #1
 8002970:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	2201      	movs	r2, #1
 8002978:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	2201      	movs	r2, #1
 8002980:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	2201      	movs	r2, #1
 8002988:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	2201      	movs	r2, #1
 8002990:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	2201      	movs	r2, #1
 8002998:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	2201      	movs	r2, #1
 80029a0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	2201      	movs	r2, #1
 80029a8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	2201      	movs	r2, #1
 80029b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80029b4:	2300      	movs	r3, #0
}
 80029b6:	4618      	mov	r0, r3
 80029b8:	3708      	adds	r7, #8
 80029ba:	46bd      	mov	sp, r7
 80029bc:	bd80      	pop	{r7, pc}

080029be <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80029be:	b580      	push	{r7, lr}
 80029c0:	b082      	sub	sp, #8
 80029c2:	af00      	add	r7, sp, #0
 80029c4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d101      	bne.n	80029d0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80029cc:	2301      	movs	r3, #1
 80029ce:	e041      	b.n	8002a54 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80029d6:	b2db      	uxtb	r3, r3
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d106      	bne.n	80029ea <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	2200      	movs	r2, #0
 80029e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80029e4:	6878      	ldr	r0, [r7, #4]
 80029e6:	f000 f839 	bl	8002a5c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	2202      	movs	r2, #2
 80029ee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681a      	ldr	r2, [r3, #0]
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	3304      	adds	r3, #4
 80029fa:	4619      	mov	r1, r3
 80029fc:	4610      	mov	r0, r2
 80029fe:	f000 fd0b 	bl	8003418 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	2201      	movs	r2, #1
 8002a06:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	2201      	movs	r2, #1
 8002a0e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	2201      	movs	r2, #1
 8002a16:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	2201      	movs	r2, #1
 8002a1e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	2201      	movs	r2, #1
 8002a26:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	2201      	movs	r2, #1
 8002a2e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	2201      	movs	r2, #1
 8002a36:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	2201      	movs	r2, #1
 8002a3e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	2201      	movs	r2, #1
 8002a46:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	2201      	movs	r2, #1
 8002a4e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002a52:	2300      	movs	r3, #0
}
 8002a54:	4618      	mov	r0, r3
 8002a56:	3708      	adds	r7, #8
 8002a58:	46bd      	mov	sp, r7
 8002a5a:	bd80      	pop	{r7, pc}

08002a5c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002a5c:	b480      	push	{r7}
 8002a5e:	b083      	sub	sp, #12
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002a64:	bf00      	nop
 8002a66:	370c      	adds	r7, #12
 8002a68:	46bd      	mov	sp, r7
 8002a6a:	bc80      	pop	{r7}
 8002a6c:	4770      	bx	lr
	...

08002a70 <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 8002a70:	b580      	push	{r7, lr}
 8002a72:	b086      	sub	sp, #24
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	60f8      	str	r0, [r7, #12]
 8002a78:	60b9      	str	r1, [r7, #8]
 8002a7a:	607a      	str	r2, [r7, #4]
 8002a7c:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 8002a7e:	2300      	movs	r3, #0
 8002a80:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8002a82:	68bb      	ldr	r3, [r7, #8]
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d109      	bne.n	8002a9c <HAL_TIM_PWM_Start_DMA+0x2c>
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002a8e:	b2db      	uxtb	r3, r3
 8002a90:	2b02      	cmp	r3, #2
 8002a92:	bf0c      	ite	eq
 8002a94:	2301      	moveq	r3, #1
 8002a96:	2300      	movne	r3, #0
 8002a98:	b2db      	uxtb	r3, r3
 8002a9a:	e022      	b.n	8002ae2 <HAL_TIM_PWM_Start_DMA+0x72>
 8002a9c:	68bb      	ldr	r3, [r7, #8]
 8002a9e:	2b04      	cmp	r3, #4
 8002aa0:	d109      	bne.n	8002ab6 <HAL_TIM_PWM_Start_DMA+0x46>
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8002aa8:	b2db      	uxtb	r3, r3
 8002aaa:	2b02      	cmp	r3, #2
 8002aac:	bf0c      	ite	eq
 8002aae:	2301      	moveq	r3, #1
 8002ab0:	2300      	movne	r3, #0
 8002ab2:	b2db      	uxtb	r3, r3
 8002ab4:	e015      	b.n	8002ae2 <HAL_TIM_PWM_Start_DMA+0x72>
 8002ab6:	68bb      	ldr	r3, [r7, #8]
 8002ab8:	2b08      	cmp	r3, #8
 8002aba:	d109      	bne.n	8002ad0 <HAL_TIM_PWM_Start_DMA+0x60>
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002ac2:	b2db      	uxtb	r3, r3
 8002ac4:	2b02      	cmp	r3, #2
 8002ac6:	bf0c      	ite	eq
 8002ac8:	2301      	moveq	r3, #1
 8002aca:	2300      	movne	r3, #0
 8002acc:	b2db      	uxtb	r3, r3
 8002ace:	e008      	b.n	8002ae2 <HAL_TIM_PWM_Start_DMA+0x72>
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002ad6:	b2db      	uxtb	r3, r3
 8002ad8:	2b02      	cmp	r3, #2
 8002ada:	bf0c      	ite	eq
 8002adc:	2301      	moveq	r3, #1
 8002ade:	2300      	movne	r3, #0
 8002ae0:	b2db      	uxtb	r3, r3
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d001      	beq.n	8002aea <HAL_TIM_PWM_Start_DMA+0x7a>
  {
    return HAL_BUSY;
 8002ae6:	2302      	movs	r3, #2
 8002ae8:	e153      	b.n	8002d92 <HAL_TIM_PWM_Start_DMA+0x322>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8002aea:	68bb      	ldr	r3, [r7, #8]
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d109      	bne.n	8002b04 <HAL_TIM_PWM_Start_DMA+0x94>
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002af6:	b2db      	uxtb	r3, r3
 8002af8:	2b01      	cmp	r3, #1
 8002afa:	bf0c      	ite	eq
 8002afc:	2301      	moveq	r3, #1
 8002afe:	2300      	movne	r3, #0
 8002b00:	b2db      	uxtb	r3, r3
 8002b02:	e022      	b.n	8002b4a <HAL_TIM_PWM_Start_DMA+0xda>
 8002b04:	68bb      	ldr	r3, [r7, #8]
 8002b06:	2b04      	cmp	r3, #4
 8002b08:	d109      	bne.n	8002b1e <HAL_TIM_PWM_Start_DMA+0xae>
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8002b10:	b2db      	uxtb	r3, r3
 8002b12:	2b01      	cmp	r3, #1
 8002b14:	bf0c      	ite	eq
 8002b16:	2301      	moveq	r3, #1
 8002b18:	2300      	movne	r3, #0
 8002b1a:	b2db      	uxtb	r3, r3
 8002b1c:	e015      	b.n	8002b4a <HAL_TIM_PWM_Start_DMA+0xda>
 8002b1e:	68bb      	ldr	r3, [r7, #8]
 8002b20:	2b08      	cmp	r3, #8
 8002b22:	d109      	bne.n	8002b38 <HAL_TIM_PWM_Start_DMA+0xc8>
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002b2a:	b2db      	uxtb	r3, r3
 8002b2c:	2b01      	cmp	r3, #1
 8002b2e:	bf0c      	ite	eq
 8002b30:	2301      	moveq	r3, #1
 8002b32:	2300      	movne	r3, #0
 8002b34:	b2db      	uxtb	r3, r3
 8002b36:	e008      	b.n	8002b4a <HAL_TIM_PWM_Start_DMA+0xda>
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002b3e:	b2db      	uxtb	r3, r3
 8002b40:	2b01      	cmp	r3, #1
 8002b42:	bf0c      	ite	eq
 8002b44:	2301      	moveq	r3, #1
 8002b46:	2300      	movne	r3, #0
 8002b48:	b2db      	uxtb	r3, r3
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d024      	beq.n	8002b98 <HAL_TIM_PWM_Start_DMA+0x128>
  {
    if ((pData == NULL) || (Length == 0U))
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d002      	beq.n	8002b5a <HAL_TIM_PWM_Start_DMA+0xea>
 8002b54:	887b      	ldrh	r3, [r7, #2]
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d101      	bne.n	8002b5e <HAL_TIM_PWM_Start_DMA+0xee>
    {
      return HAL_ERROR;
 8002b5a:	2301      	movs	r3, #1
 8002b5c:	e119      	b.n	8002d92 <HAL_TIM_PWM_Start_DMA+0x322>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002b5e:	68bb      	ldr	r3, [r7, #8]
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d104      	bne.n	8002b6e <HAL_TIM_PWM_Start_DMA+0xfe>
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	2202      	movs	r2, #2
 8002b68:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002b6c:	e016      	b.n	8002b9c <HAL_TIM_PWM_Start_DMA+0x12c>
 8002b6e:	68bb      	ldr	r3, [r7, #8]
 8002b70:	2b04      	cmp	r3, #4
 8002b72:	d104      	bne.n	8002b7e <HAL_TIM_PWM_Start_DMA+0x10e>
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	2202      	movs	r2, #2
 8002b78:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002b7c:	e00e      	b.n	8002b9c <HAL_TIM_PWM_Start_DMA+0x12c>
 8002b7e:	68bb      	ldr	r3, [r7, #8]
 8002b80:	2b08      	cmp	r3, #8
 8002b82:	d104      	bne.n	8002b8e <HAL_TIM_PWM_Start_DMA+0x11e>
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	2202      	movs	r2, #2
 8002b88:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002b8c:	e006      	b.n	8002b9c <HAL_TIM_PWM_Start_DMA+0x12c>
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	2202      	movs	r2, #2
 8002b92:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002b96:	e001      	b.n	8002b9c <HAL_TIM_PWM_Start_DMA+0x12c>
    }
  }
  else
  {
    return HAL_ERROR;
 8002b98:	2301      	movs	r3, #1
 8002b9a:	e0fa      	b.n	8002d92 <HAL_TIM_PWM_Start_DMA+0x322>
  }

  switch (Channel)
 8002b9c:	68bb      	ldr	r3, [r7, #8]
 8002b9e:	2b0c      	cmp	r3, #12
 8002ba0:	f200 80ae 	bhi.w	8002d00 <HAL_TIM_PWM_Start_DMA+0x290>
 8002ba4:	a201      	add	r2, pc, #4	@ (adr r2, 8002bac <HAL_TIM_PWM_Start_DMA+0x13c>)
 8002ba6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002baa:	bf00      	nop
 8002bac:	08002be1 	.word	0x08002be1
 8002bb0:	08002d01 	.word	0x08002d01
 8002bb4:	08002d01 	.word	0x08002d01
 8002bb8:	08002d01 	.word	0x08002d01
 8002bbc:	08002c29 	.word	0x08002c29
 8002bc0:	08002d01 	.word	0x08002d01
 8002bc4:	08002d01 	.word	0x08002d01
 8002bc8:	08002d01 	.word	0x08002d01
 8002bcc:	08002c71 	.word	0x08002c71
 8002bd0:	08002d01 	.word	0x08002d01
 8002bd4:	08002d01 	.word	0x08002d01
 8002bd8:	08002d01 	.word	0x08002d01
 8002bdc:	08002cb9 	.word	0x08002cb9
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002be4:	4a6d      	ldr	r2, [pc, #436]	@ (8002d9c <HAL_TIM_PWM_Start_DMA+0x32c>)
 8002be6:	629a      	str	r2, [r3, #40]	@ 0x28
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bec:	4a6c      	ldr	r2, [pc, #432]	@ (8002da0 <HAL_TIM_PWM_Start_DMA+0x330>)
 8002bee:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bf4:	4a6b      	ldr	r2, [pc, #428]	@ (8002da4 <HAL_TIM_PWM_Start_DMA+0x334>)
 8002bf6:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8002bfc:	6879      	ldr	r1, [r7, #4]
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	3334      	adds	r3, #52	@ 0x34
 8002c04:	461a      	mov	r2, r3
 8002c06:	887b      	ldrh	r3, [r7, #2]
 8002c08:	f7fe feb0 	bl	800196c <HAL_DMA_Start_IT>
 8002c0c:	4603      	mov	r3, r0
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d001      	beq.n	8002c16 <HAL_TIM_PWM_Start_DMA+0x1a6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8002c12:	2301      	movs	r3, #1
 8002c14:	e0bd      	b.n	8002d92 <HAL_TIM_PWM_Start_DMA+0x322>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	68da      	ldr	r2, [r3, #12]
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002c24:	60da      	str	r2, [r3, #12]
      break;
 8002c26:	e06e      	b.n	8002d06 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c2c:	4a5b      	ldr	r2, [pc, #364]	@ (8002d9c <HAL_TIM_PWM_Start_DMA+0x32c>)
 8002c2e:	629a      	str	r2, [r3, #40]	@ 0x28
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c34:	4a5a      	ldr	r2, [pc, #360]	@ (8002da0 <HAL_TIM_PWM_Start_DMA+0x330>)
 8002c36:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c3c:	4a59      	ldr	r2, [pc, #356]	@ (8002da4 <HAL_TIM_PWM_Start_DMA+0x334>)
 8002c3e:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8002c44:	6879      	ldr	r1, [r7, #4]
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	3338      	adds	r3, #56	@ 0x38
 8002c4c:	461a      	mov	r2, r3
 8002c4e:	887b      	ldrh	r3, [r7, #2]
 8002c50:	f7fe fe8c 	bl	800196c <HAL_DMA_Start_IT>
 8002c54:	4603      	mov	r3, r0
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d001      	beq.n	8002c5e <HAL_TIM_PWM_Start_DMA+0x1ee>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8002c5a:	2301      	movs	r3, #1
 8002c5c:	e099      	b.n	8002d92 <HAL_TIM_PWM_Start_DMA+0x322>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	68da      	ldr	r2, [r3, #12]
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002c6c:	60da      	str	r2, [r3, #12]
      break;
 8002c6e:	e04a      	b.n	8002d06 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c74:	4a49      	ldr	r2, [pc, #292]	@ (8002d9c <HAL_TIM_PWM_Start_DMA+0x32c>)
 8002c76:	629a      	str	r2, [r3, #40]	@ 0x28
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c7c:	4a48      	ldr	r2, [pc, #288]	@ (8002da0 <HAL_TIM_PWM_Start_DMA+0x330>)
 8002c7e:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c84:	4a47      	ldr	r2, [pc, #284]	@ (8002da4 <HAL_TIM_PWM_Start_DMA+0x334>)
 8002c86:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8002c8c:	6879      	ldr	r1, [r7, #4]
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	333c      	adds	r3, #60	@ 0x3c
 8002c94:	461a      	mov	r2, r3
 8002c96:	887b      	ldrh	r3, [r7, #2]
 8002c98:	f7fe fe68 	bl	800196c <HAL_DMA_Start_IT>
 8002c9c:	4603      	mov	r3, r0
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d001      	beq.n	8002ca6 <HAL_TIM_PWM_Start_DMA+0x236>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8002ca2:	2301      	movs	r3, #1
 8002ca4:	e075      	b.n	8002d92 <HAL_TIM_PWM_Start_DMA+0x322>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	68da      	ldr	r2, [r3, #12]
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002cb4:	60da      	str	r2, [r3, #12]
      break;
 8002cb6:	e026      	b.n	8002d06 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cbc:	4a37      	ldr	r2, [pc, #220]	@ (8002d9c <HAL_TIM_PWM_Start_DMA+0x32c>)
 8002cbe:	629a      	str	r2, [r3, #40]	@ 0x28
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cc4:	4a36      	ldr	r2, [pc, #216]	@ (8002da0 <HAL_TIM_PWM_Start_DMA+0x330>)
 8002cc6:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ccc:	4a35      	ldr	r2, [pc, #212]	@ (8002da4 <HAL_TIM_PWM_Start_DMA+0x334>)
 8002cce:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8002cd4:	6879      	ldr	r1, [r7, #4]
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	3340      	adds	r3, #64	@ 0x40
 8002cdc:	461a      	mov	r2, r3
 8002cde:	887b      	ldrh	r3, [r7, #2]
 8002ce0:	f7fe fe44 	bl	800196c <HAL_DMA_Start_IT>
 8002ce4:	4603      	mov	r3, r0
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d001      	beq.n	8002cee <HAL_TIM_PWM_Start_DMA+0x27e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8002cea:	2301      	movs	r3, #1
 8002cec:	e051      	b.n	8002d92 <HAL_TIM_PWM_Start_DMA+0x322>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	68da      	ldr	r2, [r3, #12]
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8002cfc:	60da      	str	r2, [r3, #12]
      break;
 8002cfe:	e002      	b.n	8002d06 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    default:
      status = HAL_ERROR;
 8002d00:	2301      	movs	r3, #1
 8002d02:	75fb      	strb	r3, [r7, #23]
      break;
 8002d04:	bf00      	nop
  }

  if (status == HAL_OK)
 8002d06:	7dfb      	ldrb	r3, [r7, #23]
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d141      	bne.n	8002d90 <HAL_TIM_PWM_Start_DMA+0x320>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	2201      	movs	r2, #1
 8002d12:	68b9      	ldr	r1, [r7, #8]
 8002d14:	4618      	mov	r0, r3
 8002d16:	f000 fe0b 	bl	8003930 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	4a22      	ldr	r2, [pc, #136]	@ (8002da8 <HAL_TIM_PWM_Start_DMA+0x338>)
 8002d20:	4293      	cmp	r3, r2
 8002d22:	d107      	bne.n	8002d34 <HAL_TIM_PWM_Start_DMA+0x2c4>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002d32:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	4a1b      	ldr	r2, [pc, #108]	@ (8002da8 <HAL_TIM_PWM_Start_DMA+0x338>)
 8002d3a:	4293      	cmp	r3, r2
 8002d3c:	d00e      	beq.n	8002d5c <HAL_TIM_PWM_Start_DMA+0x2ec>
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002d46:	d009      	beq.n	8002d5c <HAL_TIM_PWM_Start_DMA+0x2ec>
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	4a17      	ldr	r2, [pc, #92]	@ (8002dac <HAL_TIM_PWM_Start_DMA+0x33c>)
 8002d4e:	4293      	cmp	r3, r2
 8002d50:	d004      	beq.n	8002d5c <HAL_TIM_PWM_Start_DMA+0x2ec>
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	4a16      	ldr	r2, [pc, #88]	@ (8002db0 <HAL_TIM_PWM_Start_DMA+0x340>)
 8002d58:	4293      	cmp	r3, r2
 8002d5a:	d111      	bne.n	8002d80 <HAL_TIM_PWM_Start_DMA+0x310>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	689b      	ldr	r3, [r3, #8]
 8002d62:	f003 0307 	and.w	r3, r3, #7
 8002d66:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d68:	693b      	ldr	r3, [r7, #16]
 8002d6a:	2b06      	cmp	r3, #6
 8002d6c:	d010      	beq.n	8002d90 <HAL_TIM_PWM_Start_DMA+0x320>
      {
        __HAL_TIM_ENABLE(htim);
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	681a      	ldr	r2, [r3, #0]
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f042 0201 	orr.w	r2, r2, #1
 8002d7c:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d7e:	e007      	b.n	8002d90 <HAL_TIM_PWM_Start_DMA+0x320>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	681a      	ldr	r2, [r3, #0]
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f042 0201 	orr.w	r2, r2, #1
 8002d8e:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8002d90:	7dfb      	ldrb	r3, [r7, #23]
}
 8002d92:	4618      	mov	r0, r3
 8002d94:	3718      	adds	r7, #24
 8002d96:	46bd      	mov	sp, r7
 8002d98:	bd80      	pop	{r7, pc}
 8002d9a:	bf00      	nop
 8002d9c:	08003309 	.word	0x08003309
 8002da0:	080033b1 	.word	0x080033b1
 8002da4:	08003277 	.word	0x08003277
 8002da8:	40012c00 	.word	0x40012c00
 8002dac:	40000400 	.word	0x40000400
 8002db0:	40000800 	.word	0x40000800

08002db4 <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002db4:	b580      	push	{r7, lr}
 8002db6:	b084      	sub	sp, #16
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	6078      	str	r0, [r7, #4]
 8002dbc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002dbe:	2300      	movs	r3, #0
 8002dc0:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8002dc2:	683b      	ldr	r3, [r7, #0]
 8002dc4:	2b0c      	cmp	r3, #12
 8002dc6:	d855      	bhi.n	8002e74 <HAL_TIM_PWM_Stop_DMA+0xc0>
 8002dc8:	a201      	add	r2, pc, #4	@ (adr r2, 8002dd0 <HAL_TIM_PWM_Stop_DMA+0x1c>)
 8002dca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002dce:	bf00      	nop
 8002dd0:	08002e05 	.word	0x08002e05
 8002dd4:	08002e75 	.word	0x08002e75
 8002dd8:	08002e75 	.word	0x08002e75
 8002ddc:	08002e75 	.word	0x08002e75
 8002de0:	08002e21 	.word	0x08002e21
 8002de4:	08002e75 	.word	0x08002e75
 8002de8:	08002e75 	.word	0x08002e75
 8002dec:	08002e75 	.word	0x08002e75
 8002df0:	08002e3d 	.word	0x08002e3d
 8002df4:	08002e75 	.word	0x08002e75
 8002df8:	08002e75 	.word	0x08002e75
 8002dfc:	08002e75 	.word	0x08002e75
 8002e00:	08002e59 	.word	0x08002e59
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	68da      	ldr	r2, [r3, #12]
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002e12:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e18:	4618      	mov	r0, r3
 8002e1a:	f7fe fe07 	bl	8001a2c <HAL_DMA_Abort_IT>
      break;
 8002e1e:	e02c      	b.n	8002e7a <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	68da      	ldr	r2, [r3, #12]
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002e2e:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e34:	4618      	mov	r0, r3
 8002e36:	f7fe fdf9 	bl	8001a2c <HAL_DMA_Abort_IT>
      break;
 8002e3a:	e01e      	b.n	8002e7a <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	68da      	ldr	r2, [r3, #12]
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002e4a:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e50:	4618      	mov	r0, r3
 8002e52:	f7fe fdeb 	bl	8001a2c <HAL_DMA_Abort_IT>
      break;
 8002e56:	e010      	b.n	8002e7a <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	68da      	ldr	r2, [r3, #12]
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002e66:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e6c:	4618      	mov	r0, r3
 8002e6e:	f7fe fddd 	bl	8001a2c <HAL_DMA_Abort_IT>
      break;
 8002e72:	e002      	b.n	8002e7a <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    default:
      status = HAL_ERROR;
 8002e74:	2301      	movs	r3, #1
 8002e76:	73fb      	strb	r3, [r7, #15]
      break;
 8002e78:	bf00      	nop
  }

  if (status == HAL_OK)
 8002e7a:	7bfb      	ldrb	r3, [r7, #15]
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d157      	bne.n	8002f30 <HAL_TIM_PWM_Stop_DMA+0x17c>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	2200      	movs	r2, #0
 8002e86:	6839      	ldr	r1, [r7, #0]
 8002e88:	4618      	mov	r0, r3
 8002e8a:	f000 fd51 	bl	8003930 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	4a2a      	ldr	r2, [pc, #168]	@ (8002f3c <HAL_TIM_PWM_Stop_DMA+0x188>)
 8002e94:	4293      	cmp	r3, r2
 8002e96:	d117      	bne.n	8002ec8 <HAL_TIM_PWM_Stop_DMA+0x114>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	6a1a      	ldr	r2, [r3, #32]
 8002e9e:	f241 1311 	movw	r3, #4369	@ 0x1111
 8002ea2:	4013      	ands	r3, r2
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d10f      	bne.n	8002ec8 <HAL_TIM_PWM_Stop_DMA+0x114>
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	6a1a      	ldr	r2, [r3, #32]
 8002eae:	f240 4344 	movw	r3, #1092	@ 0x444
 8002eb2:	4013      	ands	r3, r2
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d107      	bne.n	8002ec8 <HAL_TIM_PWM_Stop_DMA+0x114>
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002ec6:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	6a1a      	ldr	r2, [r3, #32]
 8002ece:	f241 1311 	movw	r3, #4369	@ 0x1111
 8002ed2:	4013      	ands	r3, r2
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d10f      	bne.n	8002ef8 <HAL_TIM_PWM_Stop_DMA+0x144>
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	6a1a      	ldr	r2, [r3, #32]
 8002ede:	f240 4344 	movw	r3, #1092	@ 0x444
 8002ee2:	4013      	ands	r3, r2
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d107      	bne.n	8002ef8 <HAL_TIM_PWM_Stop_DMA+0x144>
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	681a      	ldr	r2, [r3, #0]
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f022 0201 	bic.w	r2, r2, #1
 8002ef6:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8002ef8:	683b      	ldr	r3, [r7, #0]
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d104      	bne.n	8002f08 <HAL_TIM_PWM_Stop_DMA+0x154>
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	2201      	movs	r2, #1
 8002f02:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002f06:	e013      	b.n	8002f30 <HAL_TIM_PWM_Stop_DMA+0x17c>
 8002f08:	683b      	ldr	r3, [r7, #0]
 8002f0a:	2b04      	cmp	r3, #4
 8002f0c:	d104      	bne.n	8002f18 <HAL_TIM_PWM_Stop_DMA+0x164>
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	2201      	movs	r2, #1
 8002f12:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002f16:	e00b      	b.n	8002f30 <HAL_TIM_PWM_Stop_DMA+0x17c>
 8002f18:	683b      	ldr	r3, [r7, #0]
 8002f1a:	2b08      	cmp	r3, #8
 8002f1c:	d104      	bne.n	8002f28 <HAL_TIM_PWM_Stop_DMA+0x174>
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	2201      	movs	r2, #1
 8002f22:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002f26:	e003      	b.n	8002f30 <HAL_TIM_PWM_Stop_DMA+0x17c>
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	2201      	movs	r2, #1
 8002f2c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

  /* Return function status */
  return status;
 8002f30:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f32:	4618      	mov	r0, r3
 8002f34:	3710      	adds	r7, #16
 8002f36:	46bd      	mov	sp, r7
 8002f38:	bd80      	pop	{r7, pc}
 8002f3a:	bf00      	nop
 8002f3c:	40012c00 	.word	0x40012c00

08002f40 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002f40:	b580      	push	{r7, lr}
 8002f42:	b086      	sub	sp, #24
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	60f8      	str	r0, [r7, #12]
 8002f48:	60b9      	str	r1, [r7, #8]
 8002f4a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002f4c:	2300      	movs	r3, #0
 8002f4e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002f56:	2b01      	cmp	r3, #1
 8002f58:	d101      	bne.n	8002f5e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002f5a:	2302      	movs	r3, #2
 8002f5c:	e0ae      	b.n	80030bc <HAL_TIM_PWM_ConfigChannel+0x17c>
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	2201      	movs	r2, #1
 8002f62:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	2b0c      	cmp	r3, #12
 8002f6a:	f200 809f 	bhi.w	80030ac <HAL_TIM_PWM_ConfigChannel+0x16c>
 8002f6e:	a201      	add	r2, pc, #4	@ (adr r2, 8002f74 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002f70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f74:	08002fa9 	.word	0x08002fa9
 8002f78:	080030ad 	.word	0x080030ad
 8002f7c:	080030ad 	.word	0x080030ad
 8002f80:	080030ad 	.word	0x080030ad
 8002f84:	08002fe9 	.word	0x08002fe9
 8002f88:	080030ad 	.word	0x080030ad
 8002f8c:	080030ad 	.word	0x080030ad
 8002f90:	080030ad 	.word	0x080030ad
 8002f94:	0800302b 	.word	0x0800302b
 8002f98:	080030ad 	.word	0x080030ad
 8002f9c:	080030ad 	.word	0x080030ad
 8002fa0:	080030ad 	.word	0x080030ad
 8002fa4:	0800306b 	.word	0x0800306b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	68b9      	ldr	r1, [r7, #8]
 8002fae:	4618      	mov	r0, r3
 8002fb0:	f000 faa0 	bl	80034f4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	699a      	ldr	r2, [r3, #24]
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f042 0208 	orr.w	r2, r2, #8
 8002fc2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	699a      	ldr	r2, [r3, #24]
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f022 0204 	bic.w	r2, r2, #4
 8002fd2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	6999      	ldr	r1, [r3, #24]
 8002fda:	68bb      	ldr	r3, [r7, #8]
 8002fdc:	691a      	ldr	r2, [r3, #16]
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	430a      	orrs	r2, r1
 8002fe4:	619a      	str	r2, [r3, #24]
      break;
 8002fe6:	e064      	b.n	80030b2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	68b9      	ldr	r1, [r7, #8]
 8002fee:	4618      	mov	r0, r3
 8002ff0:	f000 fae6 	bl	80035c0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	699a      	ldr	r2, [r3, #24]
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003002:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	699a      	ldr	r2, [r3, #24]
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003012:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	6999      	ldr	r1, [r3, #24]
 800301a:	68bb      	ldr	r3, [r7, #8]
 800301c:	691b      	ldr	r3, [r3, #16]
 800301e:	021a      	lsls	r2, r3, #8
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	430a      	orrs	r2, r1
 8003026:	619a      	str	r2, [r3, #24]
      break;
 8003028:	e043      	b.n	80030b2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	68b9      	ldr	r1, [r7, #8]
 8003030:	4618      	mov	r0, r3
 8003032:	f000 fb2f 	bl	8003694 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	69da      	ldr	r2, [r3, #28]
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f042 0208 	orr.w	r2, r2, #8
 8003044:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	69da      	ldr	r2, [r3, #28]
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f022 0204 	bic.w	r2, r2, #4
 8003054:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	69d9      	ldr	r1, [r3, #28]
 800305c:	68bb      	ldr	r3, [r7, #8]
 800305e:	691a      	ldr	r2, [r3, #16]
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	430a      	orrs	r2, r1
 8003066:	61da      	str	r2, [r3, #28]
      break;
 8003068:	e023      	b.n	80030b2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	68b9      	ldr	r1, [r7, #8]
 8003070:	4618      	mov	r0, r3
 8003072:	f000 fb79 	bl	8003768 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	69da      	ldr	r2, [r3, #28]
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003084:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	69da      	ldr	r2, [r3, #28]
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003094:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	69d9      	ldr	r1, [r3, #28]
 800309c:	68bb      	ldr	r3, [r7, #8]
 800309e:	691b      	ldr	r3, [r3, #16]
 80030a0:	021a      	lsls	r2, r3, #8
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	430a      	orrs	r2, r1
 80030a8:	61da      	str	r2, [r3, #28]
      break;
 80030aa:	e002      	b.n	80030b2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80030ac:	2301      	movs	r3, #1
 80030ae:	75fb      	strb	r3, [r7, #23]
      break;
 80030b0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	2200      	movs	r2, #0
 80030b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80030ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80030bc:	4618      	mov	r0, r3
 80030be:	3718      	adds	r7, #24
 80030c0:	46bd      	mov	sp, r7
 80030c2:	bd80      	pop	{r7, pc}

080030c4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80030c4:	b580      	push	{r7, lr}
 80030c6:	b084      	sub	sp, #16
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	6078      	str	r0, [r7, #4]
 80030cc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80030ce:	2300      	movs	r3, #0
 80030d0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80030d8:	2b01      	cmp	r3, #1
 80030da:	d101      	bne.n	80030e0 <HAL_TIM_ConfigClockSource+0x1c>
 80030dc:	2302      	movs	r3, #2
 80030de:	e0b4      	b.n	800324a <HAL_TIM_ConfigClockSource+0x186>
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	2201      	movs	r2, #1
 80030e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	2202      	movs	r2, #2
 80030ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	689b      	ldr	r3, [r3, #8]
 80030f6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80030f8:	68bb      	ldr	r3, [r7, #8]
 80030fa:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80030fe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003100:	68bb      	ldr	r3, [r7, #8]
 8003102:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003106:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	68ba      	ldr	r2, [r7, #8]
 800310e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003110:	683b      	ldr	r3, [r7, #0]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003118:	d03e      	beq.n	8003198 <HAL_TIM_ConfigClockSource+0xd4>
 800311a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800311e:	f200 8087 	bhi.w	8003230 <HAL_TIM_ConfigClockSource+0x16c>
 8003122:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003126:	f000 8086 	beq.w	8003236 <HAL_TIM_ConfigClockSource+0x172>
 800312a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800312e:	d87f      	bhi.n	8003230 <HAL_TIM_ConfigClockSource+0x16c>
 8003130:	2b70      	cmp	r3, #112	@ 0x70
 8003132:	d01a      	beq.n	800316a <HAL_TIM_ConfigClockSource+0xa6>
 8003134:	2b70      	cmp	r3, #112	@ 0x70
 8003136:	d87b      	bhi.n	8003230 <HAL_TIM_ConfigClockSource+0x16c>
 8003138:	2b60      	cmp	r3, #96	@ 0x60
 800313a:	d050      	beq.n	80031de <HAL_TIM_ConfigClockSource+0x11a>
 800313c:	2b60      	cmp	r3, #96	@ 0x60
 800313e:	d877      	bhi.n	8003230 <HAL_TIM_ConfigClockSource+0x16c>
 8003140:	2b50      	cmp	r3, #80	@ 0x50
 8003142:	d03c      	beq.n	80031be <HAL_TIM_ConfigClockSource+0xfa>
 8003144:	2b50      	cmp	r3, #80	@ 0x50
 8003146:	d873      	bhi.n	8003230 <HAL_TIM_ConfigClockSource+0x16c>
 8003148:	2b40      	cmp	r3, #64	@ 0x40
 800314a:	d058      	beq.n	80031fe <HAL_TIM_ConfigClockSource+0x13a>
 800314c:	2b40      	cmp	r3, #64	@ 0x40
 800314e:	d86f      	bhi.n	8003230 <HAL_TIM_ConfigClockSource+0x16c>
 8003150:	2b30      	cmp	r3, #48	@ 0x30
 8003152:	d064      	beq.n	800321e <HAL_TIM_ConfigClockSource+0x15a>
 8003154:	2b30      	cmp	r3, #48	@ 0x30
 8003156:	d86b      	bhi.n	8003230 <HAL_TIM_ConfigClockSource+0x16c>
 8003158:	2b20      	cmp	r3, #32
 800315a:	d060      	beq.n	800321e <HAL_TIM_ConfigClockSource+0x15a>
 800315c:	2b20      	cmp	r3, #32
 800315e:	d867      	bhi.n	8003230 <HAL_TIM_ConfigClockSource+0x16c>
 8003160:	2b00      	cmp	r3, #0
 8003162:	d05c      	beq.n	800321e <HAL_TIM_ConfigClockSource+0x15a>
 8003164:	2b10      	cmp	r3, #16
 8003166:	d05a      	beq.n	800321e <HAL_TIM_ConfigClockSource+0x15a>
 8003168:	e062      	b.n	8003230 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800316e:	683b      	ldr	r3, [r7, #0]
 8003170:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003172:	683b      	ldr	r3, [r7, #0]
 8003174:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003176:	683b      	ldr	r3, [r7, #0]
 8003178:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800317a:	f000 fbba 	bl	80038f2 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	689b      	ldr	r3, [r3, #8]
 8003184:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003186:	68bb      	ldr	r3, [r7, #8]
 8003188:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800318c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	68ba      	ldr	r2, [r7, #8]
 8003194:	609a      	str	r2, [r3, #8]
      break;
 8003196:	e04f      	b.n	8003238 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800319c:	683b      	ldr	r3, [r7, #0]
 800319e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80031a0:	683b      	ldr	r3, [r7, #0]
 80031a2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80031a4:	683b      	ldr	r3, [r7, #0]
 80031a6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80031a8:	f000 fba3 	bl	80038f2 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	689a      	ldr	r2, [r3, #8]
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80031ba:	609a      	str	r2, [r3, #8]
      break;
 80031bc:	e03c      	b.n	8003238 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80031c2:	683b      	ldr	r3, [r7, #0]
 80031c4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80031c6:	683b      	ldr	r3, [r7, #0]
 80031c8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80031ca:	461a      	mov	r2, r3
 80031cc:	f000 fb1a 	bl	8003804 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	2150      	movs	r1, #80	@ 0x50
 80031d6:	4618      	mov	r0, r3
 80031d8:	f000 fb71 	bl	80038be <TIM_ITRx_SetConfig>
      break;
 80031dc:	e02c      	b.n	8003238 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80031e2:	683b      	ldr	r3, [r7, #0]
 80031e4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80031e6:	683b      	ldr	r3, [r7, #0]
 80031e8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80031ea:	461a      	mov	r2, r3
 80031ec:	f000 fb38 	bl	8003860 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	2160      	movs	r1, #96	@ 0x60
 80031f6:	4618      	mov	r0, r3
 80031f8:	f000 fb61 	bl	80038be <TIM_ITRx_SetConfig>
      break;
 80031fc:	e01c      	b.n	8003238 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003202:	683b      	ldr	r3, [r7, #0]
 8003204:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003206:	683b      	ldr	r3, [r7, #0]
 8003208:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800320a:	461a      	mov	r2, r3
 800320c:	f000 fafa 	bl	8003804 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	2140      	movs	r1, #64	@ 0x40
 8003216:	4618      	mov	r0, r3
 8003218:	f000 fb51 	bl	80038be <TIM_ITRx_SetConfig>
      break;
 800321c:	e00c      	b.n	8003238 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681a      	ldr	r2, [r3, #0]
 8003222:	683b      	ldr	r3, [r7, #0]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	4619      	mov	r1, r3
 8003228:	4610      	mov	r0, r2
 800322a:	f000 fb48 	bl	80038be <TIM_ITRx_SetConfig>
      break;
 800322e:	e003      	b.n	8003238 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003230:	2301      	movs	r3, #1
 8003232:	73fb      	strb	r3, [r7, #15]
      break;
 8003234:	e000      	b.n	8003238 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003236:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	2201      	movs	r2, #1
 800323c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	2200      	movs	r2, #0
 8003244:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003248:	7bfb      	ldrb	r3, [r7, #15]
}
 800324a:	4618      	mov	r0, r3
 800324c:	3710      	adds	r7, #16
 800324e:	46bd      	mov	sp, r7
 8003250:	bd80      	pop	{r7, pc}

08003252 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8003252:	b480      	push	{r7}
 8003254:	b083      	sub	sp, #12
 8003256:	af00      	add	r7, sp, #0
 8003258:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 800325a:	bf00      	nop
 800325c:	370c      	adds	r7, #12
 800325e:	46bd      	mov	sp, r7
 8003260:	bc80      	pop	{r7}
 8003262:	4770      	bx	lr

08003264 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8003264:	b480      	push	{r7}
 8003266:	b083      	sub	sp, #12
 8003268:	af00      	add	r7, sp, #0
 800326a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 800326c:	bf00      	nop
 800326e:	370c      	adds	r7, #12
 8003270:	46bd      	mov	sp, r7
 8003272:	bc80      	pop	{r7}
 8003274:	4770      	bx	lr

08003276 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8003276:	b580      	push	{r7, lr}
 8003278:	b084      	sub	sp, #16
 800327a:	af00      	add	r7, sp, #0
 800327c:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003282:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003288:	687a      	ldr	r2, [r7, #4]
 800328a:	429a      	cmp	r2, r3
 800328c:	d107      	bne.n	800329e <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	2201      	movs	r2, #1
 8003292:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	2201      	movs	r2, #1
 8003298:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800329c:	e02a      	b.n	80032f4 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032a2:	687a      	ldr	r2, [r7, #4]
 80032a4:	429a      	cmp	r2, r3
 80032a6:	d107      	bne.n	80032b8 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	2202      	movs	r2, #2
 80032ac:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	2201      	movs	r2, #1
 80032b2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80032b6:	e01d      	b.n	80032f4 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032bc:	687a      	ldr	r2, [r7, #4]
 80032be:	429a      	cmp	r2, r3
 80032c0:	d107      	bne.n	80032d2 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	2204      	movs	r2, #4
 80032c6:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	2201      	movs	r2, #1
 80032cc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80032d0:	e010      	b.n	80032f4 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032d6:	687a      	ldr	r2, [r7, #4]
 80032d8:	429a      	cmp	r2, r3
 80032da:	d107      	bne.n	80032ec <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	2208      	movs	r2, #8
 80032e0:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	2201      	movs	r2, #1
 80032e6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80032ea:	e003      	b.n	80032f4 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	2201      	movs	r2, #1
 80032f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 80032f4:	68f8      	ldr	r0, [r7, #12]
 80032f6:	f7ff ffb5 	bl	8003264 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	2200      	movs	r2, #0
 80032fe:	771a      	strb	r2, [r3, #28]
}
 8003300:	bf00      	nop
 8003302:	3710      	adds	r7, #16
 8003304:	46bd      	mov	sp, r7
 8003306:	bd80      	pop	{r7, pc}

08003308 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8003308:	b580      	push	{r7, lr}
 800330a:	b084      	sub	sp, #16
 800330c:	af00      	add	r7, sp, #0
 800330e:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003314:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800331a:	687a      	ldr	r2, [r7, #4]
 800331c:	429a      	cmp	r2, r3
 800331e:	d10b      	bne.n	8003338 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	2201      	movs	r2, #1
 8003324:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	699b      	ldr	r3, [r3, #24]
 800332a:	2b00      	cmp	r3, #0
 800332c:	d136      	bne.n	800339c <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	2201      	movs	r2, #1
 8003332:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003336:	e031      	b.n	800339c <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800333c:	687a      	ldr	r2, [r7, #4]
 800333e:	429a      	cmp	r2, r3
 8003340:	d10b      	bne.n	800335a <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	2202      	movs	r2, #2
 8003346:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	699b      	ldr	r3, [r3, #24]
 800334c:	2b00      	cmp	r3, #0
 800334e:	d125      	bne.n	800339c <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	2201      	movs	r2, #1
 8003354:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003358:	e020      	b.n	800339c <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800335e:	687a      	ldr	r2, [r7, #4]
 8003360:	429a      	cmp	r2, r3
 8003362:	d10b      	bne.n	800337c <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	2204      	movs	r2, #4
 8003368:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	699b      	ldr	r3, [r3, #24]
 800336e:	2b00      	cmp	r3, #0
 8003370:	d114      	bne.n	800339c <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	2201      	movs	r2, #1
 8003376:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800337a:	e00f      	b.n	800339c <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003380:	687a      	ldr	r2, [r7, #4]
 8003382:	429a      	cmp	r2, r3
 8003384:	d10a      	bne.n	800339c <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	2208      	movs	r2, #8
 800338a:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	699b      	ldr	r3, [r3, #24]
 8003390:	2b00      	cmp	r3, #0
 8003392:	d103      	bne.n	800339c <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	2201      	movs	r2, #1
 8003398:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 800339c:	68f8      	ldr	r0, [r7, #12]
 800339e:	f7fd fcd3 	bl	8000d48 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	2200      	movs	r2, #0
 80033a6:	771a      	strb	r2, [r3, #28]
}
 80033a8:	bf00      	nop
 80033aa:	3710      	adds	r7, #16
 80033ac:	46bd      	mov	sp, r7
 80033ae:	bd80      	pop	{r7, pc}

080033b0 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 80033b0:	b580      	push	{r7, lr}
 80033b2:	b084      	sub	sp, #16
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033bc:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033c2:	687a      	ldr	r2, [r7, #4]
 80033c4:	429a      	cmp	r2, r3
 80033c6:	d103      	bne.n	80033d0 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	2201      	movs	r2, #1
 80033cc:	771a      	strb	r2, [r3, #28]
 80033ce:	e019      	b.n	8003404 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033d4:	687a      	ldr	r2, [r7, #4]
 80033d6:	429a      	cmp	r2, r3
 80033d8:	d103      	bne.n	80033e2 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	2202      	movs	r2, #2
 80033de:	771a      	strb	r2, [r3, #28]
 80033e0:	e010      	b.n	8003404 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033e6:	687a      	ldr	r2, [r7, #4]
 80033e8:	429a      	cmp	r2, r3
 80033ea:	d103      	bne.n	80033f4 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	2204      	movs	r2, #4
 80033f0:	771a      	strb	r2, [r3, #28]
 80033f2:	e007      	b.n	8003404 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033f8:	687a      	ldr	r2, [r7, #4]
 80033fa:	429a      	cmp	r2, r3
 80033fc:	d102      	bne.n	8003404 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	2208      	movs	r2, #8
 8003402:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8003404:	68f8      	ldr	r0, [r7, #12]
 8003406:	f7ff ff24 	bl	8003252 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	2200      	movs	r2, #0
 800340e:	771a      	strb	r2, [r3, #28]
}
 8003410:	bf00      	nop
 8003412:	3710      	adds	r7, #16
 8003414:	46bd      	mov	sp, r7
 8003416:	bd80      	pop	{r7, pc}

08003418 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003418:	b480      	push	{r7}
 800341a:	b085      	sub	sp, #20
 800341c:	af00      	add	r7, sp, #0
 800341e:	6078      	str	r0, [r7, #4]
 8003420:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	4a2f      	ldr	r2, [pc, #188]	@ (80034e8 <TIM_Base_SetConfig+0xd0>)
 800342c:	4293      	cmp	r3, r2
 800342e:	d00b      	beq.n	8003448 <TIM_Base_SetConfig+0x30>
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003436:	d007      	beq.n	8003448 <TIM_Base_SetConfig+0x30>
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	4a2c      	ldr	r2, [pc, #176]	@ (80034ec <TIM_Base_SetConfig+0xd4>)
 800343c:	4293      	cmp	r3, r2
 800343e:	d003      	beq.n	8003448 <TIM_Base_SetConfig+0x30>
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	4a2b      	ldr	r2, [pc, #172]	@ (80034f0 <TIM_Base_SetConfig+0xd8>)
 8003444:	4293      	cmp	r3, r2
 8003446:	d108      	bne.n	800345a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800344e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003450:	683b      	ldr	r3, [r7, #0]
 8003452:	685b      	ldr	r3, [r3, #4]
 8003454:	68fa      	ldr	r2, [r7, #12]
 8003456:	4313      	orrs	r3, r2
 8003458:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	4a22      	ldr	r2, [pc, #136]	@ (80034e8 <TIM_Base_SetConfig+0xd0>)
 800345e:	4293      	cmp	r3, r2
 8003460:	d00b      	beq.n	800347a <TIM_Base_SetConfig+0x62>
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003468:	d007      	beq.n	800347a <TIM_Base_SetConfig+0x62>
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	4a1f      	ldr	r2, [pc, #124]	@ (80034ec <TIM_Base_SetConfig+0xd4>)
 800346e:	4293      	cmp	r3, r2
 8003470:	d003      	beq.n	800347a <TIM_Base_SetConfig+0x62>
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	4a1e      	ldr	r2, [pc, #120]	@ (80034f0 <TIM_Base_SetConfig+0xd8>)
 8003476:	4293      	cmp	r3, r2
 8003478:	d108      	bne.n	800348c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003480:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003482:	683b      	ldr	r3, [r7, #0]
 8003484:	68db      	ldr	r3, [r3, #12]
 8003486:	68fa      	ldr	r2, [r7, #12]
 8003488:	4313      	orrs	r3, r2
 800348a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003492:	683b      	ldr	r3, [r7, #0]
 8003494:	695b      	ldr	r3, [r3, #20]
 8003496:	4313      	orrs	r3, r2
 8003498:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	68fa      	ldr	r2, [r7, #12]
 800349e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80034a0:	683b      	ldr	r3, [r7, #0]
 80034a2:	689a      	ldr	r2, [r3, #8]
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80034a8:	683b      	ldr	r3, [r7, #0]
 80034aa:	681a      	ldr	r2, [r3, #0]
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	4a0d      	ldr	r2, [pc, #52]	@ (80034e8 <TIM_Base_SetConfig+0xd0>)
 80034b4:	4293      	cmp	r3, r2
 80034b6:	d103      	bne.n	80034c0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80034b8:	683b      	ldr	r3, [r7, #0]
 80034ba:	691a      	ldr	r2, [r3, #16]
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	2201      	movs	r2, #1
 80034c4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	691b      	ldr	r3, [r3, #16]
 80034ca:	f003 0301 	and.w	r3, r3, #1
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d005      	beq.n	80034de <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	691b      	ldr	r3, [r3, #16]
 80034d6:	f023 0201 	bic.w	r2, r3, #1
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	611a      	str	r2, [r3, #16]
  }
}
 80034de:	bf00      	nop
 80034e0:	3714      	adds	r7, #20
 80034e2:	46bd      	mov	sp, r7
 80034e4:	bc80      	pop	{r7}
 80034e6:	4770      	bx	lr
 80034e8:	40012c00 	.word	0x40012c00
 80034ec:	40000400 	.word	0x40000400
 80034f0:	40000800 	.word	0x40000800

080034f4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80034f4:	b480      	push	{r7}
 80034f6:	b087      	sub	sp, #28
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	6078      	str	r0, [r7, #4]
 80034fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	6a1b      	ldr	r3, [r3, #32]
 8003502:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	6a1b      	ldr	r3, [r3, #32]
 8003508:	f023 0201 	bic.w	r2, r3, #1
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	685b      	ldr	r3, [r3, #4]
 8003514:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	699b      	ldr	r3, [r3, #24]
 800351a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003522:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	f023 0303 	bic.w	r3, r3, #3
 800352a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800352c:	683b      	ldr	r3, [r7, #0]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	68fa      	ldr	r2, [r7, #12]
 8003532:	4313      	orrs	r3, r2
 8003534:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003536:	697b      	ldr	r3, [r7, #20]
 8003538:	f023 0302 	bic.w	r3, r3, #2
 800353c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800353e:	683b      	ldr	r3, [r7, #0]
 8003540:	689b      	ldr	r3, [r3, #8]
 8003542:	697a      	ldr	r2, [r7, #20]
 8003544:	4313      	orrs	r3, r2
 8003546:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	4a1c      	ldr	r2, [pc, #112]	@ (80035bc <TIM_OC1_SetConfig+0xc8>)
 800354c:	4293      	cmp	r3, r2
 800354e:	d10c      	bne.n	800356a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003550:	697b      	ldr	r3, [r7, #20]
 8003552:	f023 0308 	bic.w	r3, r3, #8
 8003556:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003558:	683b      	ldr	r3, [r7, #0]
 800355a:	68db      	ldr	r3, [r3, #12]
 800355c:	697a      	ldr	r2, [r7, #20]
 800355e:	4313      	orrs	r3, r2
 8003560:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003562:	697b      	ldr	r3, [r7, #20]
 8003564:	f023 0304 	bic.w	r3, r3, #4
 8003568:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	4a13      	ldr	r2, [pc, #76]	@ (80035bc <TIM_OC1_SetConfig+0xc8>)
 800356e:	4293      	cmp	r3, r2
 8003570:	d111      	bne.n	8003596 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003572:	693b      	ldr	r3, [r7, #16]
 8003574:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003578:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800357a:	693b      	ldr	r3, [r7, #16]
 800357c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003580:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003582:	683b      	ldr	r3, [r7, #0]
 8003584:	695b      	ldr	r3, [r3, #20]
 8003586:	693a      	ldr	r2, [r7, #16]
 8003588:	4313      	orrs	r3, r2
 800358a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800358c:	683b      	ldr	r3, [r7, #0]
 800358e:	699b      	ldr	r3, [r3, #24]
 8003590:	693a      	ldr	r2, [r7, #16]
 8003592:	4313      	orrs	r3, r2
 8003594:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	693a      	ldr	r2, [r7, #16]
 800359a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	68fa      	ldr	r2, [r7, #12]
 80035a0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80035a2:	683b      	ldr	r3, [r7, #0]
 80035a4:	685a      	ldr	r2, [r3, #4]
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	697a      	ldr	r2, [r7, #20]
 80035ae:	621a      	str	r2, [r3, #32]
}
 80035b0:	bf00      	nop
 80035b2:	371c      	adds	r7, #28
 80035b4:	46bd      	mov	sp, r7
 80035b6:	bc80      	pop	{r7}
 80035b8:	4770      	bx	lr
 80035ba:	bf00      	nop
 80035bc:	40012c00 	.word	0x40012c00

080035c0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80035c0:	b480      	push	{r7}
 80035c2:	b087      	sub	sp, #28
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	6078      	str	r0, [r7, #4]
 80035c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	6a1b      	ldr	r3, [r3, #32]
 80035ce:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	6a1b      	ldr	r3, [r3, #32]
 80035d4:	f023 0210 	bic.w	r2, r3, #16
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	685b      	ldr	r3, [r3, #4]
 80035e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	699b      	ldr	r3, [r3, #24]
 80035e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80035ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80035f6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80035f8:	683b      	ldr	r3, [r7, #0]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	021b      	lsls	r3, r3, #8
 80035fe:	68fa      	ldr	r2, [r7, #12]
 8003600:	4313      	orrs	r3, r2
 8003602:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003604:	697b      	ldr	r3, [r7, #20]
 8003606:	f023 0320 	bic.w	r3, r3, #32
 800360a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800360c:	683b      	ldr	r3, [r7, #0]
 800360e:	689b      	ldr	r3, [r3, #8]
 8003610:	011b      	lsls	r3, r3, #4
 8003612:	697a      	ldr	r2, [r7, #20]
 8003614:	4313      	orrs	r3, r2
 8003616:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	4a1d      	ldr	r2, [pc, #116]	@ (8003690 <TIM_OC2_SetConfig+0xd0>)
 800361c:	4293      	cmp	r3, r2
 800361e:	d10d      	bne.n	800363c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003620:	697b      	ldr	r3, [r7, #20]
 8003622:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003626:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003628:	683b      	ldr	r3, [r7, #0]
 800362a:	68db      	ldr	r3, [r3, #12]
 800362c:	011b      	lsls	r3, r3, #4
 800362e:	697a      	ldr	r2, [r7, #20]
 8003630:	4313      	orrs	r3, r2
 8003632:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003634:	697b      	ldr	r3, [r7, #20]
 8003636:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800363a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	4a14      	ldr	r2, [pc, #80]	@ (8003690 <TIM_OC2_SetConfig+0xd0>)
 8003640:	4293      	cmp	r3, r2
 8003642:	d113      	bne.n	800366c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003644:	693b      	ldr	r3, [r7, #16]
 8003646:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800364a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800364c:	693b      	ldr	r3, [r7, #16]
 800364e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003652:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003654:	683b      	ldr	r3, [r7, #0]
 8003656:	695b      	ldr	r3, [r3, #20]
 8003658:	009b      	lsls	r3, r3, #2
 800365a:	693a      	ldr	r2, [r7, #16]
 800365c:	4313      	orrs	r3, r2
 800365e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003660:	683b      	ldr	r3, [r7, #0]
 8003662:	699b      	ldr	r3, [r3, #24]
 8003664:	009b      	lsls	r3, r3, #2
 8003666:	693a      	ldr	r2, [r7, #16]
 8003668:	4313      	orrs	r3, r2
 800366a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	693a      	ldr	r2, [r7, #16]
 8003670:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	68fa      	ldr	r2, [r7, #12]
 8003676:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003678:	683b      	ldr	r3, [r7, #0]
 800367a:	685a      	ldr	r2, [r3, #4]
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	697a      	ldr	r2, [r7, #20]
 8003684:	621a      	str	r2, [r3, #32]
}
 8003686:	bf00      	nop
 8003688:	371c      	adds	r7, #28
 800368a:	46bd      	mov	sp, r7
 800368c:	bc80      	pop	{r7}
 800368e:	4770      	bx	lr
 8003690:	40012c00 	.word	0x40012c00

08003694 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003694:	b480      	push	{r7}
 8003696:	b087      	sub	sp, #28
 8003698:	af00      	add	r7, sp, #0
 800369a:	6078      	str	r0, [r7, #4]
 800369c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	6a1b      	ldr	r3, [r3, #32]
 80036a2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	6a1b      	ldr	r3, [r3, #32]
 80036a8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	685b      	ldr	r3, [r3, #4]
 80036b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	69db      	ldr	r3, [r3, #28]
 80036ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80036c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	f023 0303 	bic.w	r3, r3, #3
 80036ca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80036cc:	683b      	ldr	r3, [r7, #0]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	68fa      	ldr	r2, [r7, #12]
 80036d2:	4313      	orrs	r3, r2
 80036d4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80036d6:	697b      	ldr	r3, [r7, #20]
 80036d8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80036dc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80036de:	683b      	ldr	r3, [r7, #0]
 80036e0:	689b      	ldr	r3, [r3, #8]
 80036e2:	021b      	lsls	r3, r3, #8
 80036e4:	697a      	ldr	r2, [r7, #20]
 80036e6:	4313      	orrs	r3, r2
 80036e8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	4a1d      	ldr	r2, [pc, #116]	@ (8003764 <TIM_OC3_SetConfig+0xd0>)
 80036ee:	4293      	cmp	r3, r2
 80036f0:	d10d      	bne.n	800370e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80036f2:	697b      	ldr	r3, [r7, #20]
 80036f4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80036f8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80036fa:	683b      	ldr	r3, [r7, #0]
 80036fc:	68db      	ldr	r3, [r3, #12]
 80036fe:	021b      	lsls	r3, r3, #8
 8003700:	697a      	ldr	r2, [r7, #20]
 8003702:	4313      	orrs	r3, r2
 8003704:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003706:	697b      	ldr	r3, [r7, #20]
 8003708:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800370c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	4a14      	ldr	r2, [pc, #80]	@ (8003764 <TIM_OC3_SetConfig+0xd0>)
 8003712:	4293      	cmp	r3, r2
 8003714:	d113      	bne.n	800373e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003716:	693b      	ldr	r3, [r7, #16]
 8003718:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800371c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800371e:	693b      	ldr	r3, [r7, #16]
 8003720:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003724:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003726:	683b      	ldr	r3, [r7, #0]
 8003728:	695b      	ldr	r3, [r3, #20]
 800372a:	011b      	lsls	r3, r3, #4
 800372c:	693a      	ldr	r2, [r7, #16]
 800372e:	4313      	orrs	r3, r2
 8003730:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003732:	683b      	ldr	r3, [r7, #0]
 8003734:	699b      	ldr	r3, [r3, #24]
 8003736:	011b      	lsls	r3, r3, #4
 8003738:	693a      	ldr	r2, [r7, #16]
 800373a:	4313      	orrs	r3, r2
 800373c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	693a      	ldr	r2, [r7, #16]
 8003742:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	68fa      	ldr	r2, [r7, #12]
 8003748:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800374a:	683b      	ldr	r3, [r7, #0]
 800374c:	685a      	ldr	r2, [r3, #4]
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	697a      	ldr	r2, [r7, #20]
 8003756:	621a      	str	r2, [r3, #32]
}
 8003758:	bf00      	nop
 800375a:	371c      	adds	r7, #28
 800375c:	46bd      	mov	sp, r7
 800375e:	bc80      	pop	{r7}
 8003760:	4770      	bx	lr
 8003762:	bf00      	nop
 8003764:	40012c00 	.word	0x40012c00

08003768 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003768:	b480      	push	{r7}
 800376a:	b087      	sub	sp, #28
 800376c:	af00      	add	r7, sp, #0
 800376e:	6078      	str	r0, [r7, #4]
 8003770:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	6a1b      	ldr	r3, [r3, #32]
 8003776:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	6a1b      	ldr	r3, [r3, #32]
 800377c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	685b      	ldr	r3, [r3, #4]
 8003788:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	69db      	ldr	r3, [r3, #28]
 800378e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003796:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800379e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80037a0:	683b      	ldr	r3, [r7, #0]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	021b      	lsls	r3, r3, #8
 80037a6:	68fa      	ldr	r2, [r7, #12]
 80037a8:	4313      	orrs	r3, r2
 80037aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80037ac:	693b      	ldr	r3, [r7, #16]
 80037ae:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80037b2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80037b4:	683b      	ldr	r3, [r7, #0]
 80037b6:	689b      	ldr	r3, [r3, #8]
 80037b8:	031b      	lsls	r3, r3, #12
 80037ba:	693a      	ldr	r2, [r7, #16]
 80037bc:	4313      	orrs	r3, r2
 80037be:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	4a0f      	ldr	r2, [pc, #60]	@ (8003800 <TIM_OC4_SetConfig+0x98>)
 80037c4:	4293      	cmp	r3, r2
 80037c6:	d109      	bne.n	80037dc <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80037c8:	697b      	ldr	r3, [r7, #20]
 80037ca:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80037ce:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80037d0:	683b      	ldr	r3, [r7, #0]
 80037d2:	695b      	ldr	r3, [r3, #20]
 80037d4:	019b      	lsls	r3, r3, #6
 80037d6:	697a      	ldr	r2, [r7, #20]
 80037d8:	4313      	orrs	r3, r2
 80037da:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	697a      	ldr	r2, [r7, #20]
 80037e0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	68fa      	ldr	r2, [r7, #12]
 80037e6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80037e8:	683b      	ldr	r3, [r7, #0]
 80037ea:	685a      	ldr	r2, [r3, #4]
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	693a      	ldr	r2, [r7, #16]
 80037f4:	621a      	str	r2, [r3, #32]
}
 80037f6:	bf00      	nop
 80037f8:	371c      	adds	r7, #28
 80037fa:	46bd      	mov	sp, r7
 80037fc:	bc80      	pop	{r7}
 80037fe:	4770      	bx	lr
 8003800:	40012c00 	.word	0x40012c00

08003804 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003804:	b480      	push	{r7}
 8003806:	b087      	sub	sp, #28
 8003808:	af00      	add	r7, sp, #0
 800380a:	60f8      	str	r0, [r7, #12]
 800380c:	60b9      	str	r1, [r7, #8]
 800380e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	6a1b      	ldr	r3, [r3, #32]
 8003814:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	6a1b      	ldr	r3, [r3, #32]
 800381a:	f023 0201 	bic.w	r2, r3, #1
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	699b      	ldr	r3, [r3, #24]
 8003826:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003828:	693b      	ldr	r3, [r7, #16]
 800382a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800382e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	011b      	lsls	r3, r3, #4
 8003834:	693a      	ldr	r2, [r7, #16]
 8003836:	4313      	orrs	r3, r2
 8003838:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800383a:	697b      	ldr	r3, [r7, #20]
 800383c:	f023 030a 	bic.w	r3, r3, #10
 8003840:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003842:	697a      	ldr	r2, [r7, #20]
 8003844:	68bb      	ldr	r3, [r7, #8]
 8003846:	4313      	orrs	r3, r2
 8003848:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	693a      	ldr	r2, [r7, #16]
 800384e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	697a      	ldr	r2, [r7, #20]
 8003854:	621a      	str	r2, [r3, #32]
}
 8003856:	bf00      	nop
 8003858:	371c      	adds	r7, #28
 800385a:	46bd      	mov	sp, r7
 800385c:	bc80      	pop	{r7}
 800385e:	4770      	bx	lr

08003860 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003860:	b480      	push	{r7}
 8003862:	b087      	sub	sp, #28
 8003864:	af00      	add	r7, sp, #0
 8003866:	60f8      	str	r0, [r7, #12]
 8003868:	60b9      	str	r1, [r7, #8]
 800386a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	6a1b      	ldr	r3, [r3, #32]
 8003870:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	6a1b      	ldr	r3, [r3, #32]
 8003876:	f023 0210 	bic.w	r2, r3, #16
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	699b      	ldr	r3, [r3, #24]
 8003882:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003884:	693b      	ldr	r3, [r7, #16]
 8003886:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800388a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	031b      	lsls	r3, r3, #12
 8003890:	693a      	ldr	r2, [r7, #16]
 8003892:	4313      	orrs	r3, r2
 8003894:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003896:	697b      	ldr	r3, [r7, #20]
 8003898:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800389c:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800389e:	68bb      	ldr	r3, [r7, #8]
 80038a0:	011b      	lsls	r3, r3, #4
 80038a2:	697a      	ldr	r2, [r7, #20]
 80038a4:	4313      	orrs	r3, r2
 80038a6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	693a      	ldr	r2, [r7, #16]
 80038ac:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	697a      	ldr	r2, [r7, #20]
 80038b2:	621a      	str	r2, [r3, #32]
}
 80038b4:	bf00      	nop
 80038b6:	371c      	adds	r7, #28
 80038b8:	46bd      	mov	sp, r7
 80038ba:	bc80      	pop	{r7}
 80038bc:	4770      	bx	lr

080038be <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80038be:	b480      	push	{r7}
 80038c0:	b085      	sub	sp, #20
 80038c2:	af00      	add	r7, sp, #0
 80038c4:	6078      	str	r0, [r7, #4]
 80038c6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	689b      	ldr	r3, [r3, #8]
 80038cc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80038d4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80038d6:	683a      	ldr	r2, [r7, #0]
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	4313      	orrs	r3, r2
 80038dc:	f043 0307 	orr.w	r3, r3, #7
 80038e0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	68fa      	ldr	r2, [r7, #12]
 80038e6:	609a      	str	r2, [r3, #8]
}
 80038e8:	bf00      	nop
 80038ea:	3714      	adds	r7, #20
 80038ec:	46bd      	mov	sp, r7
 80038ee:	bc80      	pop	{r7}
 80038f0:	4770      	bx	lr

080038f2 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80038f2:	b480      	push	{r7}
 80038f4:	b087      	sub	sp, #28
 80038f6:	af00      	add	r7, sp, #0
 80038f8:	60f8      	str	r0, [r7, #12]
 80038fa:	60b9      	str	r1, [r7, #8]
 80038fc:	607a      	str	r2, [r7, #4]
 80038fe:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	689b      	ldr	r3, [r3, #8]
 8003904:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003906:	697b      	ldr	r3, [r7, #20]
 8003908:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800390c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800390e:	683b      	ldr	r3, [r7, #0]
 8003910:	021a      	lsls	r2, r3, #8
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	431a      	orrs	r2, r3
 8003916:	68bb      	ldr	r3, [r7, #8]
 8003918:	4313      	orrs	r3, r2
 800391a:	697a      	ldr	r2, [r7, #20]
 800391c:	4313      	orrs	r3, r2
 800391e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	697a      	ldr	r2, [r7, #20]
 8003924:	609a      	str	r2, [r3, #8]
}
 8003926:	bf00      	nop
 8003928:	371c      	adds	r7, #28
 800392a:	46bd      	mov	sp, r7
 800392c:	bc80      	pop	{r7}
 800392e:	4770      	bx	lr

08003930 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003930:	b480      	push	{r7}
 8003932:	b087      	sub	sp, #28
 8003934:	af00      	add	r7, sp, #0
 8003936:	60f8      	str	r0, [r7, #12]
 8003938:	60b9      	str	r1, [r7, #8]
 800393a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800393c:	68bb      	ldr	r3, [r7, #8]
 800393e:	f003 031f 	and.w	r3, r3, #31
 8003942:	2201      	movs	r2, #1
 8003944:	fa02 f303 	lsl.w	r3, r2, r3
 8003948:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	6a1a      	ldr	r2, [r3, #32]
 800394e:	697b      	ldr	r3, [r7, #20]
 8003950:	43db      	mvns	r3, r3
 8003952:	401a      	ands	r2, r3
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	6a1a      	ldr	r2, [r3, #32]
 800395c:	68bb      	ldr	r3, [r7, #8]
 800395e:	f003 031f 	and.w	r3, r3, #31
 8003962:	6879      	ldr	r1, [r7, #4]
 8003964:	fa01 f303 	lsl.w	r3, r1, r3
 8003968:	431a      	orrs	r2, r3
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	621a      	str	r2, [r3, #32]
}
 800396e:	bf00      	nop
 8003970:	371c      	adds	r7, #28
 8003972:	46bd      	mov	sp, r7
 8003974:	bc80      	pop	{r7}
 8003976:	4770      	bx	lr

08003978 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003978:	b480      	push	{r7}
 800397a:	b085      	sub	sp, #20
 800397c:	af00      	add	r7, sp, #0
 800397e:	6078      	str	r0, [r7, #4]
 8003980:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003988:	2b01      	cmp	r3, #1
 800398a:	d101      	bne.n	8003990 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800398c:	2302      	movs	r3, #2
 800398e:	e046      	b.n	8003a1e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	2201      	movs	r2, #1
 8003994:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	2202      	movs	r2, #2
 800399c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	685b      	ldr	r3, [r3, #4]
 80039a6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	689b      	ldr	r3, [r3, #8]
 80039ae:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80039b6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80039b8:	683b      	ldr	r3, [r7, #0]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	68fa      	ldr	r2, [r7, #12]
 80039be:	4313      	orrs	r3, r2
 80039c0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	68fa      	ldr	r2, [r7, #12]
 80039c8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	4a16      	ldr	r2, [pc, #88]	@ (8003a28 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80039d0:	4293      	cmp	r3, r2
 80039d2:	d00e      	beq.n	80039f2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80039dc:	d009      	beq.n	80039f2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	4a12      	ldr	r2, [pc, #72]	@ (8003a2c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80039e4:	4293      	cmp	r3, r2
 80039e6:	d004      	beq.n	80039f2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	4a10      	ldr	r2, [pc, #64]	@ (8003a30 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80039ee:	4293      	cmp	r3, r2
 80039f0:	d10c      	bne.n	8003a0c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80039f2:	68bb      	ldr	r3, [r7, #8]
 80039f4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80039f8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80039fa:	683b      	ldr	r3, [r7, #0]
 80039fc:	685b      	ldr	r3, [r3, #4]
 80039fe:	68ba      	ldr	r2, [r7, #8]
 8003a00:	4313      	orrs	r3, r2
 8003a02:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	68ba      	ldr	r2, [r7, #8]
 8003a0a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	2201      	movs	r2, #1
 8003a10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	2200      	movs	r2, #0
 8003a18:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003a1c:	2300      	movs	r3, #0
}
 8003a1e:	4618      	mov	r0, r3
 8003a20:	3714      	adds	r7, #20
 8003a22:	46bd      	mov	sp, r7
 8003a24:	bc80      	pop	{r7}
 8003a26:	4770      	bx	lr
 8003a28:	40012c00 	.word	0x40012c00
 8003a2c:	40000400 	.word	0x40000400
 8003a30:	40000800 	.word	0x40000800

08003a34 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003a34:	b480      	push	{r7}
 8003a36:	b085      	sub	sp, #20
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	6078      	str	r0, [r7, #4]
 8003a3c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003a3e:	2300      	movs	r3, #0
 8003a40:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003a48:	2b01      	cmp	r3, #1
 8003a4a:	d101      	bne.n	8003a50 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003a4c:	2302      	movs	r3, #2
 8003a4e:	e03d      	b.n	8003acc <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	2201      	movs	r2, #1
 8003a54:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8003a5e:	683b      	ldr	r3, [r7, #0]
 8003a60:	68db      	ldr	r3, [r3, #12]
 8003a62:	4313      	orrs	r3, r2
 8003a64:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003a6c:	683b      	ldr	r3, [r7, #0]
 8003a6e:	689b      	ldr	r3, [r3, #8]
 8003a70:	4313      	orrs	r3, r2
 8003a72:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8003a7a:	683b      	ldr	r3, [r7, #0]
 8003a7c:	685b      	ldr	r3, [r3, #4]
 8003a7e:	4313      	orrs	r3, r2
 8003a80:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8003a88:	683b      	ldr	r3, [r7, #0]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	4313      	orrs	r3, r2
 8003a8e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003a96:	683b      	ldr	r3, [r7, #0]
 8003a98:	691b      	ldr	r3, [r3, #16]
 8003a9a:	4313      	orrs	r3, r2
 8003a9c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8003aa4:	683b      	ldr	r3, [r7, #0]
 8003aa6:	695b      	ldr	r3, [r3, #20]
 8003aa8:	4313      	orrs	r3, r2
 8003aaa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8003ab2:	683b      	ldr	r3, [r7, #0]
 8003ab4:	69db      	ldr	r3, [r3, #28]
 8003ab6:	4313      	orrs	r3, r2
 8003ab8:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	68fa      	ldr	r2, [r7, #12]
 8003ac0:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	2200      	movs	r2, #0
 8003ac6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003aca:	2300      	movs	r3, #0
}
 8003acc:	4618      	mov	r0, r3
 8003ace:	3714      	adds	r7, #20
 8003ad0:	46bd      	mov	sp, r7
 8003ad2:	bc80      	pop	{r7}
 8003ad4:	4770      	bx	lr

08003ad6 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003ad6:	b580      	push	{r7, lr}
 8003ad8:	b082      	sub	sp, #8
 8003ada:	af00      	add	r7, sp, #0
 8003adc:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d101      	bne.n	8003ae8 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003ae4:	2301      	movs	r3, #1
 8003ae6:	e042      	b.n	8003b6e <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003aee:	b2db      	uxtb	r3, r3
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d106      	bne.n	8003b02 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	2200      	movs	r2, #0
 8003af8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003afc:	6878      	ldr	r0, [r7, #4]
 8003afe:	f7fd fcc3 	bl	8001488 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	2224      	movs	r2, #36	@ 0x24
 8003b06:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	68da      	ldr	r2, [r3, #12]
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003b18:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003b1a:	6878      	ldr	r0, [r7, #4]
 8003b1c:	f000 f82c 	bl	8003b78 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	691a      	ldr	r2, [r3, #16]
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003b2e:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	695a      	ldr	r2, [r3, #20]
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003b3e:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	68da      	ldr	r2, [r3, #12]
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003b4e:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	2200      	movs	r2, #0
 8003b54:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	2220      	movs	r2, #32
 8003b5a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	2220      	movs	r2, #32
 8003b62:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	2200      	movs	r2, #0
 8003b6a:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003b6c:	2300      	movs	r3, #0
}
 8003b6e:	4618      	mov	r0, r3
 8003b70:	3708      	adds	r7, #8
 8003b72:	46bd      	mov	sp, r7
 8003b74:	bd80      	pop	{r7, pc}
	...

08003b78 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003b78:	b580      	push	{r7, lr}
 8003b7a:	b084      	sub	sp, #16
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	691b      	ldr	r3, [r3, #16]
 8003b86:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	68da      	ldr	r2, [r3, #12]
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	430a      	orrs	r2, r1
 8003b94:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	689a      	ldr	r2, [r3, #8]
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	691b      	ldr	r3, [r3, #16]
 8003b9e:	431a      	orrs	r2, r3
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	695b      	ldr	r3, [r3, #20]
 8003ba4:	4313      	orrs	r3, r2
 8003ba6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	68db      	ldr	r3, [r3, #12]
 8003bae:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8003bb2:	f023 030c 	bic.w	r3, r3, #12
 8003bb6:	687a      	ldr	r2, [r7, #4]
 8003bb8:	6812      	ldr	r2, [r2, #0]
 8003bba:	68b9      	ldr	r1, [r7, #8]
 8003bbc:	430b      	orrs	r3, r1
 8003bbe:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	695b      	ldr	r3, [r3, #20]
 8003bc6:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	699a      	ldr	r2, [r3, #24]
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	430a      	orrs	r2, r1
 8003bd4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	4a2c      	ldr	r2, [pc, #176]	@ (8003c8c <UART_SetConfig+0x114>)
 8003bdc:	4293      	cmp	r3, r2
 8003bde:	d103      	bne.n	8003be8 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003be0:	f7fe fe6c 	bl	80028bc <HAL_RCC_GetPCLK2Freq>
 8003be4:	60f8      	str	r0, [r7, #12]
 8003be6:	e002      	b.n	8003bee <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003be8:	f7fe fe54 	bl	8002894 <HAL_RCC_GetPCLK1Freq>
 8003bec:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003bee:	68fa      	ldr	r2, [r7, #12]
 8003bf0:	4613      	mov	r3, r2
 8003bf2:	009b      	lsls	r3, r3, #2
 8003bf4:	4413      	add	r3, r2
 8003bf6:	009a      	lsls	r2, r3, #2
 8003bf8:	441a      	add	r2, r3
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	685b      	ldr	r3, [r3, #4]
 8003bfe:	009b      	lsls	r3, r3, #2
 8003c00:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c04:	4a22      	ldr	r2, [pc, #136]	@ (8003c90 <UART_SetConfig+0x118>)
 8003c06:	fba2 2303 	umull	r2, r3, r2, r3
 8003c0a:	095b      	lsrs	r3, r3, #5
 8003c0c:	0119      	lsls	r1, r3, #4
 8003c0e:	68fa      	ldr	r2, [r7, #12]
 8003c10:	4613      	mov	r3, r2
 8003c12:	009b      	lsls	r3, r3, #2
 8003c14:	4413      	add	r3, r2
 8003c16:	009a      	lsls	r2, r3, #2
 8003c18:	441a      	add	r2, r3
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	685b      	ldr	r3, [r3, #4]
 8003c1e:	009b      	lsls	r3, r3, #2
 8003c20:	fbb2 f2f3 	udiv	r2, r2, r3
 8003c24:	4b1a      	ldr	r3, [pc, #104]	@ (8003c90 <UART_SetConfig+0x118>)
 8003c26:	fba3 0302 	umull	r0, r3, r3, r2
 8003c2a:	095b      	lsrs	r3, r3, #5
 8003c2c:	2064      	movs	r0, #100	@ 0x64
 8003c2e:	fb00 f303 	mul.w	r3, r0, r3
 8003c32:	1ad3      	subs	r3, r2, r3
 8003c34:	011b      	lsls	r3, r3, #4
 8003c36:	3332      	adds	r3, #50	@ 0x32
 8003c38:	4a15      	ldr	r2, [pc, #84]	@ (8003c90 <UART_SetConfig+0x118>)
 8003c3a:	fba2 2303 	umull	r2, r3, r2, r3
 8003c3e:	095b      	lsrs	r3, r3, #5
 8003c40:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003c44:	4419      	add	r1, r3
 8003c46:	68fa      	ldr	r2, [r7, #12]
 8003c48:	4613      	mov	r3, r2
 8003c4a:	009b      	lsls	r3, r3, #2
 8003c4c:	4413      	add	r3, r2
 8003c4e:	009a      	lsls	r2, r3, #2
 8003c50:	441a      	add	r2, r3
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	685b      	ldr	r3, [r3, #4]
 8003c56:	009b      	lsls	r3, r3, #2
 8003c58:	fbb2 f2f3 	udiv	r2, r2, r3
 8003c5c:	4b0c      	ldr	r3, [pc, #48]	@ (8003c90 <UART_SetConfig+0x118>)
 8003c5e:	fba3 0302 	umull	r0, r3, r3, r2
 8003c62:	095b      	lsrs	r3, r3, #5
 8003c64:	2064      	movs	r0, #100	@ 0x64
 8003c66:	fb00 f303 	mul.w	r3, r0, r3
 8003c6a:	1ad3      	subs	r3, r2, r3
 8003c6c:	011b      	lsls	r3, r3, #4
 8003c6e:	3332      	adds	r3, #50	@ 0x32
 8003c70:	4a07      	ldr	r2, [pc, #28]	@ (8003c90 <UART_SetConfig+0x118>)
 8003c72:	fba2 2303 	umull	r2, r3, r2, r3
 8003c76:	095b      	lsrs	r3, r3, #5
 8003c78:	f003 020f 	and.w	r2, r3, #15
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	440a      	add	r2, r1
 8003c82:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003c84:	bf00      	nop
 8003c86:	3710      	adds	r7, #16
 8003c88:	46bd      	mov	sp, r7
 8003c8a:	bd80      	pop	{r7, pc}
 8003c8c:	40013800 	.word	0x40013800
 8003c90:	51eb851f 	.word	0x51eb851f

08003c94 <memset>:
 8003c94:	4603      	mov	r3, r0
 8003c96:	4402      	add	r2, r0
 8003c98:	4293      	cmp	r3, r2
 8003c9a:	d100      	bne.n	8003c9e <memset+0xa>
 8003c9c:	4770      	bx	lr
 8003c9e:	f803 1b01 	strb.w	r1, [r3], #1
 8003ca2:	e7f9      	b.n	8003c98 <memset+0x4>

08003ca4 <__libc_init_array>:
 8003ca4:	b570      	push	{r4, r5, r6, lr}
 8003ca6:	2600      	movs	r6, #0
 8003ca8:	4d0c      	ldr	r5, [pc, #48]	@ (8003cdc <__libc_init_array+0x38>)
 8003caa:	4c0d      	ldr	r4, [pc, #52]	@ (8003ce0 <__libc_init_array+0x3c>)
 8003cac:	1b64      	subs	r4, r4, r5
 8003cae:	10a4      	asrs	r4, r4, #2
 8003cb0:	42a6      	cmp	r6, r4
 8003cb2:	d109      	bne.n	8003cc8 <__libc_init_array+0x24>
 8003cb4:	f001 f854 	bl	8004d60 <_init>
 8003cb8:	2600      	movs	r6, #0
 8003cba:	4d0a      	ldr	r5, [pc, #40]	@ (8003ce4 <__libc_init_array+0x40>)
 8003cbc:	4c0a      	ldr	r4, [pc, #40]	@ (8003ce8 <__libc_init_array+0x44>)
 8003cbe:	1b64      	subs	r4, r4, r5
 8003cc0:	10a4      	asrs	r4, r4, #2
 8003cc2:	42a6      	cmp	r6, r4
 8003cc4:	d105      	bne.n	8003cd2 <__libc_init_array+0x2e>
 8003cc6:	bd70      	pop	{r4, r5, r6, pc}
 8003cc8:	f855 3b04 	ldr.w	r3, [r5], #4
 8003ccc:	4798      	blx	r3
 8003cce:	3601      	adds	r6, #1
 8003cd0:	e7ee      	b.n	8003cb0 <__libc_init_array+0xc>
 8003cd2:	f855 3b04 	ldr.w	r3, [r5], #4
 8003cd6:	4798      	blx	r3
 8003cd8:	3601      	adds	r6, #1
 8003cda:	e7f2      	b.n	8003cc2 <__libc_init_array+0x1e>
 8003cdc:	08004f80 	.word	0x08004f80
 8003ce0:	08004f80 	.word	0x08004f80
 8003ce4:	08004f80 	.word	0x08004f80
 8003ce8:	08004f84 	.word	0x08004f84

08003cec <tan>:
 8003cec:	b530      	push	{r4, r5, lr}
 8003cee:	4d12      	ldr	r5, [pc, #72]	@ (8003d38 <tan+0x4c>)
 8003cf0:	f021 4400 	bic.w	r4, r1, #2147483648	@ 0x80000000
 8003cf4:	42ac      	cmp	r4, r5
 8003cf6:	4602      	mov	r2, r0
 8003cf8:	460b      	mov	r3, r1
 8003cfa:	b087      	sub	sp, #28
 8003cfc:	d806      	bhi.n	8003d0c <tan+0x20>
 8003cfe:	2301      	movs	r3, #1
 8003d00:	2200      	movs	r2, #0
 8003d02:	9300      	str	r3, [sp, #0]
 8003d04:	2300      	movs	r3, #0
 8003d06:	f000 f81b 	bl	8003d40 <__kernel_tan>
 8003d0a:	e004      	b.n	8003d16 <tan+0x2a>
 8003d0c:	4d0b      	ldr	r5, [pc, #44]	@ (8003d3c <tan+0x50>)
 8003d0e:	42ac      	cmp	r4, r5
 8003d10:	d903      	bls.n	8003d1a <tan+0x2e>
 8003d12:	f7fc fa21 	bl	8000158 <__aeabi_dsub>
 8003d16:	b007      	add	sp, #28
 8003d18:	bd30      	pop	{r4, r5, pc}
 8003d1a:	aa02      	add	r2, sp, #8
 8003d1c:	f000 fa10 	bl	8004140 <__ieee754_rem_pio2>
 8003d20:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003d24:	0040      	lsls	r0, r0, #1
 8003d26:	f000 0002 	and.w	r0, r0, #2
 8003d2a:	f1c0 0001 	rsb	r0, r0, #1
 8003d2e:	9000      	str	r0, [sp, #0]
 8003d30:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003d34:	e7e7      	b.n	8003d06 <tan+0x1a>
 8003d36:	bf00      	nop
 8003d38:	3fe921fb 	.word	0x3fe921fb
 8003d3c:	7fefffff 	.word	0x7fefffff

08003d40 <__kernel_tan>:
 8003d40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003d44:	4699      	mov	r9, r3
 8003d46:	4b34      	ldr	r3, [pc, #208]	@ (8003e18 <__kernel_tan+0xd8>)
 8003d48:	f021 4600 	bic.w	r6, r1, #2147483648	@ 0x80000000
 8003d4c:	b089      	sub	sp, #36	@ 0x24
 8003d4e:	429e      	cmp	r6, r3
 8003d50:	4682      	mov	sl, r0
 8003d52:	468b      	mov	fp, r1
 8003d54:	4690      	mov	r8, r2
 8003d56:	9f12      	ldr	r7, [sp, #72]	@ 0x48
 8003d58:	9102      	str	r1, [sp, #8]
 8003d5a:	d863      	bhi.n	8003e24 <__kernel_tan+0xe4>
 8003d5c:	f7fc fe4e 	bl	80009fc <__aeabi_d2iz>
 8003d60:	4605      	mov	r5, r0
 8003d62:	2800      	cmp	r0, #0
 8003d64:	f040 8084 	bne.w	8003e70 <__kernel_tan+0x130>
 8003d68:	4652      	mov	r2, sl
 8003d6a:	1c7b      	adds	r3, r7, #1
 8003d6c:	4313      	orrs	r3, r2
 8003d6e:	4333      	orrs	r3, r6
 8003d70:	d110      	bne.n	8003d94 <__kernel_tan+0x54>
 8003d72:	4650      	mov	r0, sl
 8003d74:	4659      	mov	r1, fp
 8003d76:	f000 fbd9 	bl	800452c <fabs>
 8003d7a:	4602      	mov	r2, r0
 8003d7c:	460b      	mov	r3, r1
 8003d7e:	2000      	movs	r0, #0
 8003d80:	4926      	ldr	r1, [pc, #152]	@ (8003e1c <__kernel_tan+0xdc>)
 8003d82:	f7fc fccb 	bl	800071c <__aeabi_ddiv>
 8003d86:	4682      	mov	sl, r0
 8003d88:	468b      	mov	fp, r1
 8003d8a:	4650      	mov	r0, sl
 8003d8c:	4659      	mov	r1, fp
 8003d8e:	b009      	add	sp, #36	@ 0x24
 8003d90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003d94:	2f01      	cmp	r7, #1
 8003d96:	d0f8      	beq.n	8003d8a <__kernel_tan+0x4a>
 8003d98:	4642      	mov	r2, r8
 8003d9a:	464b      	mov	r3, r9
 8003d9c:	4650      	mov	r0, sl
 8003d9e:	4659      	mov	r1, fp
 8003da0:	f7fc f9dc 	bl	800015c <__adddf3>
 8003da4:	4602      	mov	r2, r0
 8003da6:	460b      	mov	r3, r1
 8003da8:	460f      	mov	r7, r1
 8003daa:	2000      	movs	r0, #0
 8003dac:	491c      	ldr	r1, [pc, #112]	@ (8003e20 <__kernel_tan+0xe0>)
 8003dae:	f7fc fcb5 	bl	800071c <__aeabi_ddiv>
 8003db2:	462e      	mov	r6, r5
 8003db4:	e9cd 0100 	strd	r0, r1, [sp]
 8003db8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8003dbc:	462c      	mov	r4, r5
 8003dbe:	4652      	mov	r2, sl
 8003dc0:	461d      	mov	r5, r3
 8003dc2:	4630      	mov	r0, r6
 8003dc4:	465b      	mov	r3, fp
 8003dc6:	4639      	mov	r1, r7
 8003dc8:	f7fc f9c6 	bl	8000158 <__aeabi_dsub>
 8003dcc:	4602      	mov	r2, r0
 8003dce:	460b      	mov	r3, r1
 8003dd0:	4640      	mov	r0, r8
 8003dd2:	4649      	mov	r1, r9
 8003dd4:	f7fc f9c0 	bl	8000158 <__aeabi_dsub>
 8003dd8:	4632      	mov	r2, r6
 8003dda:	462b      	mov	r3, r5
 8003ddc:	f7fc fb74 	bl	80004c8 <__aeabi_dmul>
 8003de0:	4632      	mov	r2, r6
 8003de2:	4682      	mov	sl, r0
 8003de4:	468b      	mov	fp, r1
 8003de6:	462b      	mov	r3, r5
 8003de8:	4630      	mov	r0, r6
 8003dea:	4639      	mov	r1, r7
 8003dec:	f7fc fb6c 	bl	80004c8 <__aeabi_dmul>
 8003df0:	2200      	movs	r2, #0
 8003df2:	4b0a      	ldr	r3, [pc, #40]	@ (8003e1c <__kernel_tan+0xdc>)
 8003df4:	f7fc f9b2 	bl	800015c <__adddf3>
 8003df8:	4602      	mov	r2, r0
 8003dfa:	460b      	mov	r3, r1
 8003dfc:	4650      	mov	r0, sl
 8003dfe:	4659      	mov	r1, fp
 8003e00:	f7fc f9ac 	bl	800015c <__adddf3>
 8003e04:	e9dd 2300 	ldrd	r2, r3, [sp]
 8003e08:	f7fc fb5e 	bl	80004c8 <__aeabi_dmul>
 8003e0c:	4622      	mov	r2, r4
 8003e0e:	462b      	mov	r3, r5
 8003e10:	f7fc f9a4 	bl	800015c <__adddf3>
 8003e14:	e7b7      	b.n	8003d86 <__kernel_tan+0x46>
 8003e16:	bf00      	nop
 8003e18:	3e2fffff 	.word	0x3e2fffff
 8003e1c:	3ff00000 	.word	0x3ff00000
 8003e20:	bff00000 	.word	0xbff00000
 8003e24:	4bc2      	ldr	r3, [pc, #776]	@ (8004130 <__kernel_tan+0x3f0>)
 8003e26:	429e      	cmp	r6, r3
 8003e28:	d922      	bls.n	8003e70 <__kernel_tan+0x130>
 8003e2a:	9b02      	ldr	r3, [sp, #8]
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	da05      	bge.n	8003e3c <__kernel_tan+0xfc>
 8003e30:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8003e34:	469b      	mov	fp, r3
 8003e36:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 8003e3a:	4699      	mov	r9, r3
 8003e3c:	a19e      	add	r1, pc, #632	@ (adr r1, 80040b8 <__kernel_tan+0x378>)
 8003e3e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003e42:	4652      	mov	r2, sl
 8003e44:	465b      	mov	r3, fp
 8003e46:	f7fc f987 	bl	8000158 <__aeabi_dsub>
 8003e4a:	4604      	mov	r4, r0
 8003e4c:	460d      	mov	r5, r1
 8003e4e:	a19c      	add	r1, pc, #624	@ (adr r1, 80040c0 <__kernel_tan+0x380>)
 8003e50:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003e54:	4642      	mov	r2, r8
 8003e56:	464b      	mov	r3, r9
 8003e58:	f7fc f97e 	bl	8000158 <__aeabi_dsub>
 8003e5c:	4622      	mov	r2, r4
 8003e5e:	462b      	mov	r3, r5
 8003e60:	f7fc f97c 	bl	800015c <__adddf3>
 8003e64:	f04f 0800 	mov.w	r8, #0
 8003e68:	4682      	mov	sl, r0
 8003e6a:	468b      	mov	fp, r1
 8003e6c:	f04f 0900 	mov.w	r9, #0
 8003e70:	4652      	mov	r2, sl
 8003e72:	465b      	mov	r3, fp
 8003e74:	4650      	mov	r0, sl
 8003e76:	4659      	mov	r1, fp
 8003e78:	f7fc fb26 	bl	80004c8 <__aeabi_dmul>
 8003e7c:	4602      	mov	r2, r0
 8003e7e:	460b      	mov	r3, r1
 8003e80:	e9cd 2300 	strd	r2, r3, [sp]
 8003e84:	f7fc fb20 	bl	80004c8 <__aeabi_dmul>
 8003e88:	e9dd 2300 	ldrd	r2, r3, [sp]
 8003e8c:	4604      	mov	r4, r0
 8003e8e:	460d      	mov	r5, r1
 8003e90:	4650      	mov	r0, sl
 8003e92:	4659      	mov	r1, fp
 8003e94:	f7fc fb18 	bl	80004c8 <__aeabi_dmul>
 8003e98:	a38b      	add	r3, pc, #556	@ (adr r3, 80040c8 <__kernel_tan+0x388>)
 8003e9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e9e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8003ea2:	4620      	mov	r0, r4
 8003ea4:	4629      	mov	r1, r5
 8003ea6:	f7fc fb0f 	bl	80004c8 <__aeabi_dmul>
 8003eaa:	a389      	add	r3, pc, #548	@ (adr r3, 80040d0 <__kernel_tan+0x390>)
 8003eac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003eb0:	f7fc f954 	bl	800015c <__adddf3>
 8003eb4:	4622      	mov	r2, r4
 8003eb6:	462b      	mov	r3, r5
 8003eb8:	f7fc fb06 	bl	80004c8 <__aeabi_dmul>
 8003ebc:	a386      	add	r3, pc, #536	@ (adr r3, 80040d8 <__kernel_tan+0x398>)
 8003ebe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ec2:	f7fc f94b 	bl	800015c <__adddf3>
 8003ec6:	4622      	mov	r2, r4
 8003ec8:	462b      	mov	r3, r5
 8003eca:	f7fc fafd 	bl	80004c8 <__aeabi_dmul>
 8003ece:	a384      	add	r3, pc, #528	@ (adr r3, 80040e0 <__kernel_tan+0x3a0>)
 8003ed0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ed4:	f7fc f942 	bl	800015c <__adddf3>
 8003ed8:	4622      	mov	r2, r4
 8003eda:	462b      	mov	r3, r5
 8003edc:	f7fc faf4 	bl	80004c8 <__aeabi_dmul>
 8003ee0:	a381      	add	r3, pc, #516	@ (adr r3, 80040e8 <__kernel_tan+0x3a8>)
 8003ee2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ee6:	f7fc f939 	bl	800015c <__adddf3>
 8003eea:	4622      	mov	r2, r4
 8003eec:	462b      	mov	r3, r5
 8003eee:	f7fc faeb 	bl	80004c8 <__aeabi_dmul>
 8003ef2:	a37f      	add	r3, pc, #508	@ (adr r3, 80040f0 <__kernel_tan+0x3b0>)
 8003ef4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ef8:	f7fc f930 	bl	800015c <__adddf3>
 8003efc:	e9dd 2300 	ldrd	r2, r3, [sp]
 8003f00:	f7fc fae2 	bl	80004c8 <__aeabi_dmul>
 8003f04:	a37c      	add	r3, pc, #496	@ (adr r3, 80040f8 <__kernel_tan+0x3b8>)
 8003f06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f0a:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8003f0e:	4620      	mov	r0, r4
 8003f10:	4629      	mov	r1, r5
 8003f12:	f7fc fad9 	bl	80004c8 <__aeabi_dmul>
 8003f16:	a37a      	add	r3, pc, #488	@ (adr r3, 8004100 <__kernel_tan+0x3c0>)
 8003f18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f1c:	f7fc f91e 	bl	800015c <__adddf3>
 8003f20:	4622      	mov	r2, r4
 8003f22:	462b      	mov	r3, r5
 8003f24:	f7fc fad0 	bl	80004c8 <__aeabi_dmul>
 8003f28:	a377      	add	r3, pc, #476	@ (adr r3, 8004108 <__kernel_tan+0x3c8>)
 8003f2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f2e:	f7fc f915 	bl	800015c <__adddf3>
 8003f32:	4622      	mov	r2, r4
 8003f34:	462b      	mov	r3, r5
 8003f36:	f7fc fac7 	bl	80004c8 <__aeabi_dmul>
 8003f3a:	a375      	add	r3, pc, #468	@ (adr r3, 8004110 <__kernel_tan+0x3d0>)
 8003f3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f40:	f7fc f90c 	bl	800015c <__adddf3>
 8003f44:	4622      	mov	r2, r4
 8003f46:	462b      	mov	r3, r5
 8003f48:	f7fc fabe 	bl	80004c8 <__aeabi_dmul>
 8003f4c:	a372      	add	r3, pc, #456	@ (adr r3, 8004118 <__kernel_tan+0x3d8>)
 8003f4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f52:	f7fc f903 	bl	800015c <__adddf3>
 8003f56:	4622      	mov	r2, r4
 8003f58:	462b      	mov	r3, r5
 8003f5a:	f7fc fab5 	bl	80004c8 <__aeabi_dmul>
 8003f5e:	a370      	add	r3, pc, #448	@ (adr r3, 8004120 <__kernel_tan+0x3e0>)
 8003f60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f64:	f7fc f8fa 	bl	800015c <__adddf3>
 8003f68:	4602      	mov	r2, r0
 8003f6a:	460b      	mov	r3, r1
 8003f6c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003f70:	f7fc f8f4 	bl	800015c <__adddf3>
 8003f74:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003f78:	f7fc faa6 	bl	80004c8 <__aeabi_dmul>
 8003f7c:	4642      	mov	r2, r8
 8003f7e:	464b      	mov	r3, r9
 8003f80:	f7fc f8ec 	bl	800015c <__adddf3>
 8003f84:	e9dd 2300 	ldrd	r2, r3, [sp]
 8003f88:	f7fc fa9e 	bl	80004c8 <__aeabi_dmul>
 8003f8c:	4642      	mov	r2, r8
 8003f8e:	464b      	mov	r3, r9
 8003f90:	f7fc f8e4 	bl	800015c <__adddf3>
 8003f94:	a364      	add	r3, pc, #400	@ (adr r3, 8004128 <__kernel_tan+0x3e8>)
 8003f96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f9a:	4604      	mov	r4, r0
 8003f9c:	460d      	mov	r5, r1
 8003f9e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003fa2:	f7fc fa91 	bl	80004c8 <__aeabi_dmul>
 8003fa6:	4622      	mov	r2, r4
 8003fa8:	462b      	mov	r3, r5
 8003faa:	f7fc f8d7 	bl	800015c <__adddf3>
 8003fae:	460b      	mov	r3, r1
 8003fb0:	e9cd 0100 	strd	r0, r1, [sp]
 8003fb4:	4602      	mov	r2, r0
 8003fb6:	4659      	mov	r1, fp
 8003fb8:	4650      	mov	r0, sl
 8003fba:	f7fc f8cf 	bl	800015c <__adddf3>
 8003fbe:	4b5c      	ldr	r3, [pc, #368]	@ (8004130 <__kernel_tan+0x3f0>)
 8003fc0:	4604      	mov	r4, r0
 8003fc2:	429e      	cmp	r6, r3
 8003fc4:	460d      	mov	r5, r1
 8003fc6:	d93e      	bls.n	8004046 <__kernel_tan+0x306>
 8003fc8:	4638      	mov	r0, r7
 8003fca:	f7fc fa13 	bl	80003f4 <__aeabi_i2d>
 8003fce:	4622      	mov	r2, r4
 8003fd0:	4680      	mov	r8, r0
 8003fd2:	4689      	mov	r9, r1
 8003fd4:	462b      	mov	r3, r5
 8003fd6:	4620      	mov	r0, r4
 8003fd8:	4629      	mov	r1, r5
 8003fda:	f7fc fa75 	bl	80004c8 <__aeabi_dmul>
 8003fde:	4642      	mov	r2, r8
 8003fe0:	4606      	mov	r6, r0
 8003fe2:	460f      	mov	r7, r1
 8003fe4:	464b      	mov	r3, r9
 8003fe6:	4620      	mov	r0, r4
 8003fe8:	4629      	mov	r1, r5
 8003fea:	f7fc f8b7 	bl	800015c <__adddf3>
 8003fee:	4602      	mov	r2, r0
 8003ff0:	460b      	mov	r3, r1
 8003ff2:	4630      	mov	r0, r6
 8003ff4:	4639      	mov	r1, r7
 8003ff6:	f7fc fb91 	bl	800071c <__aeabi_ddiv>
 8003ffa:	e9dd 2300 	ldrd	r2, r3, [sp]
 8003ffe:	f7fc f8ab 	bl	8000158 <__aeabi_dsub>
 8004002:	4602      	mov	r2, r0
 8004004:	460b      	mov	r3, r1
 8004006:	4650      	mov	r0, sl
 8004008:	4659      	mov	r1, fp
 800400a:	f7fc f8a5 	bl	8000158 <__aeabi_dsub>
 800400e:	4602      	mov	r2, r0
 8004010:	460b      	mov	r3, r1
 8004012:	f7fc f8a3 	bl	800015c <__adddf3>
 8004016:	4602      	mov	r2, r0
 8004018:	460b      	mov	r3, r1
 800401a:	4640      	mov	r0, r8
 800401c:	4649      	mov	r1, r9
 800401e:	f7fc f89b 	bl	8000158 <__aeabi_dsub>
 8004022:	9b02      	ldr	r3, [sp, #8]
 8004024:	4604      	mov	r4, r0
 8004026:	ea4f 7aa3 	mov.w	sl, r3, asr #30
 800402a:	f00a 0a02 	and.w	sl, sl, #2
 800402e:	f1ca 0001 	rsb	r0, sl, #1
 8004032:	460d      	mov	r5, r1
 8004034:	f7fc f9de 	bl	80003f4 <__aeabi_i2d>
 8004038:	4602      	mov	r2, r0
 800403a:	460b      	mov	r3, r1
 800403c:	4620      	mov	r0, r4
 800403e:	4629      	mov	r1, r5
 8004040:	f7fc fa42 	bl	80004c8 <__aeabi_dmul>
 8004044:	e69f      	b.n	8003d86 <__kernel_tan+0x46>
 8004046:	2f01      	cmp	r7, #1
 8004048:	d033      	beq.n	80040b2 <__kernel_tan+0x372>
 800404a:	f04f 0800 	mov.w	r8, #0
 800404e:	4689      	mov	r9, r1
 8004050:	4602      	mov	r2, r0
 8004052:	460b      	mov	r3, r1
 8004054:	2000      	movs	r0, #0
 8004056:	4937      	ldr	r1, [pc, #220]	@ (8004134 <__kernel_tan+0x3f4>)
 8004058:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800405c:	f7fc fb5e 	bl	800071c <__aeabi_ddiv>
 8004060:	4652      	mov	r2, sl
 8004062:	460f      	mov	r7, r1
 8004064:	465b      	mov	r3, fp
 8004066:	4606      	mov	r6, r0
 8004068:	460d      	mov	r5, r1
 800406a:	4640      	mov	r0, r8
 800406c:	4649      	mov	r1, r9
 800406e:	f7fc f873 	bl	8000158 <__aeabi_dsub>
 8004072:	4602      	mov	r2, r0
 8004074:	460b      	mov	r3, r1
 8004076:	e9dd 0100 	ldrd	r0, r1, [sp]
 800407a:	f7fc f86d 	bl	8000158 <__aeabi_dsub>
 800407e:	4642      	mov	r2, r8
 8004080:	463b      	mov	r3, r7
 8004082:	f7fc fa21 	bl	80004c8 <__aeabi_dmul>
 8004086:	4642      	mov	r2, r8
 8004088:	4682      	mov	sl, r0
 800408a:	468b      	mov	fp, r1
 800408c:	463b      	mov	r3, r7
 800408e:	4640      	mov	r0, r8
 8004090:	4649      	mov	r1, r9
 8004092:	f7fc fa19 	bl	80004c8 <__aeabi_dmul>
 8004096:	2200      	movs	r2, #0
 8004098:	4b27      	ldr	r3, [pc, #156]	@ (8004138 <__kernel_tan+0x3f8>)
 800409a:	f7fc f85f 	bl	800015c <__adddf3>
 800409e:	4602      	mov	r2, r0
 80040a0:	460b      	mov	r3, r1
 80040a2:	4650      	mov	r0, sl
 80040a4:	4659      	mov	r1, fp
 80040a6:	f7fc f859 	bl	800015c <__adddf3>
 80040aa:	4644      	mov	r4, r8
 80040ac:	4632      	mov	r2, r6
 80040ae:	463b      	mov	r3, r7
 80040b0:	e6aa      	b.n	8003e08 <__kernel_tan+0xc8>
 80040b2:	4682      	mov	sl, r0
 80040b4:	468b      	mov	fp, r1
 80040b6:	e668      	b.n	8003d8a <__kernel_tan+0x4a>
 80040b8:	54442d18 	.word	0x54442d18
 80040bc:	3fe921fb 	.word	0x3fe921fb
 80040c0:	33145c07 	.word	0x33145c07
 80040c4:	3c81a626 	.word	0x3c81a626
 80040c8:	74bf7ad4 	.word	0x74bf7ad4
 80040cc:	3efb2a70 	.word	0x3efb2a70
 80040d0:	32f0a7e9 	.word	0x32f0a7e9
 80040d4:	3f12b80f 	.word	0x3f12b80f
 80040d8:	1a8d1068 	.word	0x1a8d1068
 80040dc:	3f3026f7 	.word	0x3f3026f7
 80040e0:	fee08315 	.word	0xfee08315
 80040e4:	3f57dbc8 	.word	0x3f57dbc8
 80040e8:	e96e8493 	.word	0xe96e8493
 80040ec:	3f8226e3 	.word	0x3f8226e3
 80040f0:	1bb341fe 	.word	0x1bb341fe
 80040f4:	3faba1ba 	.word	0x3faba1ba
 80040f8:	db605373 	.word	0xdb605373
 80040fc:	bef375cb 	.word	0xbef375cb
 8004100:	a03792a6 	.word	0xa03792a6
 8004104:	3f147e88 	.word	0x3f147e88
 8004108:	f2f26501 	.word	0xf2f26501
 800410c:	3f4344d8 	.word	0x3f4344d8
 8004110:	c9560328 	.word	0xc9560328
 8004114:	3f6d6d22 	.word	0x3f6d6d22
 8004118:	8406d637 	.word	0x8406d637
 800411c:	3f9664f4 	.word	0x3f9664f4
 8004120:	1110fe7a 	.word	0x1110fe7a
 8004124:	3fc11111 	.word	0x3fc11111
 8004128:	55555563 	.word	0x55555563
 800412c:	3fd55555 	.word	0x3fd55555
 8004130:	3fe59427 	.word	0x3fe59427
 8004134:	bff00000 	.word	0xbff00000
 8004138:	3ff00000 	.word	0x3ff00000
 800413c:	00000000 	.word	0x00000000

08004140 <__ieee754_rem_pio2>:
 8004140:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004144:	4bc4      	ldr	r3, [pc, #784]	@ (8004458 <__ieee754_rem_pio2+0x318>)
 8004146:	f021 4800 	bic.w	r8, r1, #2147483648	@ 0x80000000
 800414a:	b08d      	sub	sp, #52	@ 0x34
 800414c:	4598      	cmp	r8, r3
 800414e:	4606      	mov	r6, r0
 8004150:	460f      	mov	r7, r1
 8004152:	4614      	mov	r4, r2
 8004154:	9104      	str	r1, [sp, #16]
 8004156:	d807      	bhi.n	8004168 <__ieee754_rem_pio2+0x28>
 8004158:	e9c2 6700 	strd	r6, r7, [r2]
 800415c:	2300      	movs	r3, #0
 800415e:	2200      	movs	r2, #0
 8004160:	e9c4 2302 	strd	r2, r3, [r4, #8]
 8004164:	2500      	movs	r5, #0
 8004166:	e026      	b.n	80041b6 <__ieee754_rem_pio2+0x76>
 8004168:	4bbc      	ldr	r3, [pc, #752]	@ (800445c <__ieee754_rem_pio2+0x31c>)
 800416a:	4598      	cmp	r8, r3
 800416c:	d876      	bhi.n	800425c <__ieee754_rem_pio2+0x11c>
 800416e:	9b04      	ldr	r3, [sp, #16]
 8004170:	4dbb      	ldr	r5, [pc, #748]	@ (8004460 <__ieee754_rem_pio2+0x320>)
 8004172:	2b00      	cmp	r3, #0
 8004174:	a3aa      	add	r3, pc, #680	@ (adr r3, 8004420 <__ieee754_rem_pio2+0x2e0>)
 8004176:	e9d3 2300 	ldrd	r2, r3, [r3]
 800417a:	dd38      	ble.n	80041ee <__ieee754_rem_pio2+0xae>
 800417c:	f7fb ffec 	bl	8000158 <__aeabi_dsub>
 8004180:	45a8      	cmp	r8, r5
 8004182:	4606      	mov	r6, r0
 8004184:	460f      	mov	r7, r1
 8004186:	d01a      	beq.n	80041be <__ieee754_rem_pio2+0x7e>
 8004188:	a3a7      	add	r3, pc, #668	@ (adr r3, 8004428 <__ieee754_rem_pio2+0x2e8>)
 800418a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800418e:	f7fb ffe3 	bl	8000158 <__aeabi_dsub>
 8004192:	4602      	mov	r2, r0
 8004194:	460b      	mov	r3, r1
 8004196:	4680      	mov	r8, r0
 8004198:	4689      	mov	r9, r1
 800419a:	4630      	mov	r0, r6
 800419c:	4639      	mov	r1, r7
 800419e:	f7fb ffdb 	bl	8000158 <__aeabi_dsub>
 80041a2:	a3a1      	add	r3, pc, #644	@ (adr r3, 8004428 <__ieee754_rem_pio2+0x2e8>)
 80041a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041a8:	f7fb ffd6 	bl	8000158 <__aeabi_dsub>
 80041ac:	2501      	movs	r5, #1
 80041ae:	e9c4 8900 	strd	r8, r9, [r4]
 80041b2:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80041b6:	4628      	mov	r0, r5
 80041b8:	b00d      	add	sp, #52	@ 0x34
 80041ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80041be:	a39c      	add	r3, pc, #624	@ (adr r3, 8004430 <__ieee754_rem_pio2+0x2f0>)
 80041c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041c4:	f7fb ffc8 	bl	8000158 <__aeabi_dsub>
 80041c8:	a39b      	add	r3, pc, #620	@ (adr r3, 8004438 <__ieee754_rem_pio2+0x2f8>)
 80041ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041ce:	4606      	mov	r6, r0
 80041d0:	460f      	mov	r7, r1
 80041d2:	f7fb ffc1 	bl	8000158 <__aeabi_dsub>
 80041d6:	4602      	mov	r2, r0
 80041d8:	460b      	mov	r3, r1
 80041da:	4680      	mov	r8, r0
 80041dc:	4689      	mov	r9, r1
 80041de:	4630      	mov	r0, r6
 80041e0:	4639      	mov	r1, r7
 80041e2:	f7fb ffb9 	bl	8000158 <__aeabi_dsub>
 80041e6:	a394      	add	r3, pc, #592	@ (adr r3, 8004438 <__ieee754_rem_pio2+0x2f8>)
 80041e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041ec:	e7dc      	b.n	80041a8 <__ieee754_rem_pio2+0x68>
 80041ee:	f7fb ffb5 	bl	800015c <__adddf3>
 80041f2:	45a8      	cmp	r8, r5
 80041f4:	4606      	mov	r6, r0
 80041f6:	460f      	mov	r7, r1
 80041f8:	d018      	beq.n	800422c <__ieee754_rem_pio2+0xec>
 80041fa:	a38b      	add	r3, pc, #556	@ (adr r3, 8004428 <__ieee754_rem_pio2+0x2e8>)
 80041fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004200:	f7fb ffac 	bl	800015c <__adddf3>
 8004204:	4602      	mov	r2, r0
 8004206:	460b      	mov	r3, r1
 8004208:	4680      	mov	r8, r0
 800420a:	4689      	mov	r9, r1
 800420c:	4630      	mov	r0, r6
 800420e:	4639      	mov	r1, r7
 8004210:	f7fb ffa2 	bl	8000158 <__aeabi_dsub>
 8004214:	a384      	add	r3, pc, #528	@ (adr r3, 8004428 <__ieee754_rem_pio2+0x2e8>)
 8004216:	e9d3 2300 	ldrd	r2, r3, [r3]
 800421a:	f7fb ff9f 	bl	800015c <__adddf3>
 800421e:	f04f 35ff 	mov.w	r5, #4294967295
 8004222:	e9c4 8900 	strd	r8, r9, [r4]
 8004226:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800422a:	e7c4      	b.n	80041b6 <__ieee754_rem_pio2+0x76>
 800422c:	a380      	add	r3, pc, #512	@ (adr r3, 8004430 <__ieee754_rem_pio2+0x2f0>)
 800422e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004232:	f7fb ff93 	bl	800015c <__adddf3>
 8004236:	a380      	add	r3, pc, #512	@ (adr r3, 8004438 <__ieee754_rem_pio2+0x2f8>)
 8004238:	e9d3 2300 	ldrd	r2, r3, [r3]
 800423c:	4606      	mov	r6, r0
 800423e:	460f      	mov	r7, r1
 8004240:	f7fb ff8c 	bl	800015c <__adddf3>
 8004244:	4602      	mov	r2, r0
 8004246:	460b      	mov	r3, r1
 8004248:	4680      	mov	r8, r0
 800424a:	4689      	mov	r9, r1
 800424c:	4630      	mov	r0, r6
 800424e:	4639      	mov	r1, r7
 8004250:	f7fb ff82 	bl	8000158 <__aeabi_dsub>
 8004254:	a378      	add	r3, pc, #480	@ (adr r3, 8004438 <__ieee754_rem_pio2+0x2f8>)
 8004256:	e9d3 2300 	ldrd	r2, r3, [r3]
 800425a:	e7de      	b.n	800421a <__ieee754_rem_pio2+0xda>
 800425c:	4b81      	ldr	r3, [pc, #516]	@ (8004464 <__ieee754_rem_pio2+0x324>)
 800425e:	4598      	cmp	r8, r3
 8004260:	f200 80cf 	bhi.w	8004402 <__ieee754_rem_pio2+0x2c2>
 8004264:	f000 f962 	bl	800452c <fabs>
 8004268:	a375      	add	r3, pc, #468	@ (adr r3, 8004440 <__ieee754_rem_pio2+0x300>)
 800426a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800426e:	4606      	mov	r6, r0
 8004270:	460f      	mov	r7, r1
 8004272:	f7fc f929 	bl	80004c8 <__aeabi_dmul>
 8004276:	2200      	movs	r2, #0
 8004278:	4b7b      	ldr	r3, [pc, #492]	@ (8004468 <__ieee754_rem_pio2+0x328>)
 800427a:	f7fb ff6f 	bl	800015c <__adddf3>
 800427e:	f7fc fbbd 	bl	80009fc <__aeabi_d2iz>
 8004282:	4605      	mov	r5, r0
 8004284:	f7fc f8b6 	bl	80003f4 <__aeabi_i2d>
 8004288:	4602      	mov	r2, r0
 800428a:	460b      	mov	r3, r1
 800428c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004290:	a363      	add	r3, pc, #396	@ (adr r3, 8004420 <__ieee754_rem_pio2+0x2e0>)
 8004292:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004296:	f7fc f917 	bl	80004c8 <__aeabi_dmul>
 800429a:	4602      	mov	r2, r0
 800429c:	460b      	mov	r3, r1
 800429e:	4630      	mov	r0, r6
 80042a0:	4639      	mov	r1, r7
 80042a2:	f7fb ff59 	bl	8000158 <__aeabi_dsub>
 80042a6:	a360      	add	r3, pc, #384	@ (adr r3, 8004428 <__ieee754_rem_pio2+0x2e8>)
 80042a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042ac:	4682      	mov	sl, r0
 80042ae:	468b      	mov	fp, r1
 80042b0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80042b4:	f7fc f908 	bl	80004c8 <__aeabi_dmul>
 80042b8:	2d1f      	cmp	r5, #31
 80042ba:	4606      	mov	r6, r0
 80042bc:	460f      	mov	r7, r1
 80042be:	dc0c      	bgt.n	80042da <__ieee754_rem_pio2+0x19a>
 80042c0:	4b6a      	ldr	r3, [pc, #424]	@ (800446c <__ieee754_rem_pio2+0x32c>)
 80042c2:	1e6a      	subs	r2, r5, #1
 80042c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80042c8:	4543      	cmp	r3, r8
 80042ca:	d006      	beq.n	80042da <__ieee754_rem_pio2+0x19a>
 80042cc:	4632      	mov	r2, r6
 80042ce:	463b      	mov	r3, r7
 80042d0:	4650      	mov	r0, sl
 80042d2:	4659      	mov	r1, fp
 80042d4:	f7fb ff40 	bl	8000158 <__aeabi_dsub>
 80042d8:	e00e      	b.n	80042f8 <__ieee754_rem_pio2+0x1b8>
 80042da:	463b      	mov	r3, r7
 80042dc:	4632      	mov	r2, r6
 80042de:	4650      	mov	r0, sl
 80042e0:	4659      	mov	r1, fp
 80042e2:	f7fb ff39 	bl	8000158 <__aeabi_dsub>
 80042e6:	ea4f 5328 	mov.w	r3, r8, asr #20
 80042ea:	9305      	str	r3, [sp, #20]
 80042ec:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80042f0:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 80042f4:	2b10      	cmp	r3, #16
 80042f6:	dc02      	bgt.n	80042fe <__ieee754_rem_pio2+0x1be>
 80042f8:	e9c4 0100 	strd	r0, r1, [r4]
 80042fc:	e039      	b.n	8004372 <__ieee754_rem_pio2+0x232>
 80042fe:	a34c      	add	r3, pc, #304	@ (adr r3, 8004430 <__ieee754_rem_pio2+0x2f0>)
 8004300:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004304:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004308:	f7fc f8de 	bl	80004c8 <__aeabi_dmul>
 800430c:	4606      	mov	r6, r0
 800430e:	460f      	mov	r7, r1
 8004310:	4602      	mov	r2, r0
 8004312:	460b      	mov	r3, r1
 8004314:	4650      	mov	r0, sl
 8004316:	4659      	mov	r1, fp
 8004318:	f7fb ff1e 	bl	8000158 <__aeabi_dsub>
 800431c:	4602      	mov	r2, r0
 800431e:	460b      	mov	r3, r1
 8004320:	4680      	mov	r8, r0
 8004322:	4689      	mov	r9, r1
 8004324:	4650      	mov	r0, sl
 8004326:	4659      	mov	r1, fp
 8004328:	f7fb ff16 	bl	8000158 <__aeabi_dsub>
 800432c:	4632      	mov	r2, r6
 800432e:	463b      	mov	r3, r7
 8004330:	f7fb ff12 	bl	8000158 <__aeabi_dsub>
 8004334:	a340      	add	r3, pc, #256	@ (adr r3, 8004438 <__ieee754_rem_pio2+0x2f8>)
 8004336:	e9d3 2300 	ldrd	r2, r3, [r3]
 800433a:	4606      	mov	r6, r0
 800433c:	460f      	mov	r7, r1
 800433e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004342:	f7fc f8c1 	bl	80004c8 <__aeabi_dmul>
 8004346:	4632      	mov	r2, r6
 8004348:	463b      	mov	r3, r7
 800434a:	f7fb ff05 	bl	8000158 <__aeabi_dsub>
 800434e:	4602      	mov	r2, r0
 8004350:	460b      	mov	r3, r1
 8004352:	4606      	mov	r6, r0
 8004354:	460f      	mov	r7, r1
 8004356:	4640      	mov	r0, r8
 8004358:	4649      	mov	r1, r9
 800435a:	f7fb fefd 	bl	8000158 <__aeabi_dsub>
 800435e:	9a05      	ldr	r2, [sp, #20]
 8004360:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8004364:	1ad3      	subs	r3, r2, r3
 8004366:	2b31      	cmp	r3, #49	@ 0x31
 8004368:	dc20      	bgt.n	80043ac <__ieee754_rem_pio2+0x26c>
 800436a:	46c2      	mov	sl, r8
 800436c:	46cb      	mov	fp, r9
 800436e:	e9c4 0100 	strd	r0, r1, [r4]
 8004372:	e9d4 8900 	ldrd	r8, r9, [r4]
 8004376:	4650      	mov	r0, sl
 8004378:	4642      	mov	r2, r8
 800437a:	464b      	mov	r3, r9
 800437c:	4659      	mov	r1, fp
 800437e:	f7fb feeb 	bl	8000158 <__aeabi_dsub>
 8004382:	463b      	mov	r3, r7
 8004384:	4632      	mov	r2, r6
 8004386:	f7fb fee7 	bl	8000158 <__aeabi_dsub>
 800438a:	9b04      	ldr	r3, [sp, #16]
 800438c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8004390:	2b00      	cmp	r3, #0
 8004392:	f6bf af10 	bge.w	80041b6 <__ieee754_rem_pio2+0x76>
 8004396:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 800439a:	6063      	str	r3, [r4, #4]
 800439c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80043a0:	f8c4 8000 	str.w	r8, [r4]
 80043a4:	60a0      	str	r0, [r4, #8]
 80043a6:	60e3      	str	r3, [r4, #12]
 80043a8:	426d      	negs	r5, r5
 80043aa:	e704      	b.n	80041b6 <__ieee754_rem_pio2+0x76>
 80043ac:	a326      	add	r3, pc, #152	@ (adr r3, 8004448 <__ieee754_rem_pio2+0x308>)
 80043ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043b2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80043b6:	f7fc f887 	bl	80004c8 <__aeabi_dmul>
 80043ba:	4606      	mov	r6, r0
 80043bc:	460f      	mov	r7, r1
 80043be:	4602      	mov	r2, r0
 80043c0:	460b      	mov	r3, r1
 80043c2:	4640      	mov	r0, r8
 80043c4:	4649      	mov	r1, r9
 80043c6:	f7fb fec7 	bl	8000158 <__aeabi_dsub>
 80043ca:	4602      	mov	r2, r0
 80043cc:	460b      	mov	r3, r1
 80043ce:	4682      	mov	sl, r0
 80043d0:	468b      	mov	fp, r1
 80043d2:	4640      	mov	r0, r8
 80043d4:	4649      	mov	r1, r9
 80043d6:	f7fb febf 	bl	8000158 <__aeabi_dsub>
 80043da:	4632      	mov	r2, r6
 80043dc:	463b      	mov	r3, r7
 80043de:	f7fb febb 	bl	8000158 <__aeabi_dsub>
 80043e2:	a31b      	add	r3, pc, #108	@ (adr r3, 8004450 <__ieee754_rem_pio2+0x310>)
 80043e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043e8:	4606      	mov	r6, r0
 80043ea:	460f      	mov	r7, r1
 80043ec:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80043f0:	f7fc f86a 	bl	80004c8 <__aeabi_dmul>
 80043f4:	4632      	mov	r2, r6
 80043f6:	463b      	mov	r3, r7
 80043f8:	f7fb feae 	bl	8000158 <__aeabi_dsub>
 80043fc:	4606      	mov	r6, r0
 80043fe:	460f      	mov	r7, r1
 8004400:	e764      	b.n	80042cc <__ieee754_rem_pio2+0x18c>
 8004402:	4b1b      	ldr	r3, [pc, #108]	@ (8004470 <__ieee754_rem_pio2+0x330>)
 8004404:	4598      	cmp	r8, r3
 8004406:	d935      	bls.n	8004474 <__ieee754_rem_pio2+0x334>
 8004408:	4602      	mov	r2, r0
 800440a:	460b      	mov	r3, r1
 800440c:	f7fb fea4 	bl	8000158 <__aeabi_dsub>
 8004410:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8004414:	e9c4 0100 	strd	r0, r1, [r4]
 8004418:	e6a4      	b.n	8004164 <__ieee754_rem_pio2+0x24>
 800441a:	bf00      	nop
 800441c:	f3af 8000 	nop.w
 8004420:	54400000 	.word	0x54400000
 8004424:	3ff921fb 	.word	0x3ff921fb
 8004428:	1a626331 	.word	0x1a626331
 800442c:	3dd0b461 	.word	0x3dd0b461
 8004430:	1a600000 	.word	0x1a600000
 8004434:	3dd0b461 	.word	0x3dd0b461
 8004438:	2e037073 	.word	0x2e037073
 800443c:	3ba3198a 	.word	0x3ba3198a
 8004440:	6dc9c883 	.word	0x6dc9c883
 8004444:	3fe45f30 	.word	0x3fe45f30
 8004448:	2e000000 	.word	0x2e000000
 800444c:	3ba3198a 	.word	0x3ba3198a
 8004450:	252049c1 	.word	0x252049c1
 8004454:	397b839a 	.word	0x397b839a
 8004458:	3fe921fb 	.word	0x3fe921fb
 800445c:	4002d97b 	.word	0x4002d97b
 8004460:	3ff921fb 	.word	0x3ff921fb
 8004464:	413921fb 	.word	0x413921fb
 8004468:	3fe00000 	.word	0x3fe00000
 800446c:	08004da4 	.word	0x08004da4
 8004470:	7fefffff 	.word	0x7fefffff
 8004474:	ea4f 5528 	mov.w	r5, r8, asr #20
 8004478:	f2a5 4516 	subw	r5, r5, #1046	@ 0x416
 800447c:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 8004480:	460f      	mov	r7, r1
 8004482:	f7fc fabb 	bl	80009fc <__aeabi_d2iz>
 8004486:	f7fb ffb5 	bl	80003f4 <__aeabi_i2d>
 800448a:	4602      	mov	r2, r0
 800448c:	460b      	mov	r3, r1
 800448e:	4630      	mov	r0, r6
 8004490:	4639      	mov	r1, r7
 8004492:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8004496:	f7fb fe5f 	bl	8000158 <__aeabi_dsub>
 800449a:	2200      	movs	r2, #0
 800449c:	4b21      	ldr	r3, [pc, #132]	@ (8004524 <__ieee754_rem_pio2+0x3e4>)
 800449e:	f7fc f813 	bl	80004c8 <__aeabi_dmul>
 80044a2:	460f      	mov	r7, r1
 80044a4:	4606      	mov	r6, r0
 80044a6:	f7fc faa9 	bl	80009fc <__aeabi_d2iz>
 80044aa:	f7fb ffa3 	bl	80003f4 <__aeabi_i2d>
 80044ae:	4602      	mov	r2, r0
 80044b0:	460b      	mov	r3, r1
 80044b2:	4630      	mov	r0, r6
 80044b4:	4639      	mov	r1, r7
 80044b6:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80044ba:	f7fb fe4d 	bl	8000158 <__aeabi_dsub>
 80044be:	2200      	movs	r2, #0
 80044c0:	4b18      	ldr	r3, [pc, #96]	@ (8004524 <__ieee754_rem_pio2+0x3e4>)
 80044c2:	f7fc f801 	bl	80004c8 <__aeabi_dmul>
 80044c6:	f04f 0803 	mov.w	r8, #3
 80044ca:	2600      	movs	r6, #0
 80044cc:	2700      	movs	r7, #0
 80044ce:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 80044d2:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
 80044d6:	4632      	mov	r2, r6
 80044d8:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 80044dc:	463b      	mov	r3, r7
 80044de:	46c2      	mov	sl, r8
 80044e0:	f108 38ff 	add.w	r8, r8, #4294967295
 80044e4:	f7fc fa58 	bl	8000998 <__aeabi_dcmpeq>
 80044e8:	2800      	cmp	r0, #0
 80044ea:	d1f4      	bne.n	80044d6 <__ieee754_rem_pio2+0x396>
 80044ec:	4b0e      	ldr	r3, [pc, #56]	@ (8004528 <__ieee754_rem_pio2+0x3e8>)
 80044ee:	462a      	mov	r2, r5
 80044f0:	9301      	str	r3, [sp, #4]
 80044f2:	2302      	movs	r3, #2
 80044f4:	4621      	mov	r1, r4
 80044f6:	9300      	str	r3, [sp, #0]
 80044f8:	a806      	add	r0, sp, #24
 80044fa:	4653      	mov	r3, sl
 80044fc:	f000 f81a 	bl	8004534 <__kernel_rem_pio2>
 8004500:	9b04      	ldr	r3, [sp, #16]
 8004502:	4605      	mov	r5, r0
 8004504:	2b00      	cmp	r3, #0
 8004506:	f6bf ae56 	bge.w	80041b6 <__ieee754_rem_pio2+0x76>
 800450a:	e9d4 2100 	ldrd	r2, r1, [r4]
 800450e:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8004512:	e9c4 2300 	strd	r2, r3, [r4]
 8004516:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 800451a:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800451e:	e9c4 2302 	strd	r2, r3, [r4, #8]
 8004522:	e741      	b.n	80043a8 <__ieee754_rem_pio2+0x268>
 8004524:	41700000 	.word	0x41700000
 8004528:	08004e24 	.word	0x08004e24

0800452c <fabs>:
 800452c:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8004530:	4619      	mov	r1, r3
 8004532:	4770      	bx	lr

08004534 <__kernel_rem_pio2>:
 8004534:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004538:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 800453c:	9308      	str	r3, [sp, #32]
 800453e:	9104      	str	r1, [sp, #16]
 8004540:	4bba      	ldr	r3, [pc, #744]	@ (800482c <__kernel_rem_pio2+0x2f8>)
 8004542:	99a2      	ldr	r1, [sp, #648]	@ 0x288
 8004544:	f112 0f14 	cmn.w	r2, #20
 8004548:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800454c:	bfa8      	it	ge
 800454e:	1ed4      	subge	r4, r2, #3
 8004550:	9302      	str	r3, [sp, #8]
 8004552:	9b08      	ldr	r3, [sp, #32]
 8004554:	bfb8      	it	lt
 8004556:	2400      	movlt	r4, #0
 8004558:	f103 33ff 	add.w	r3, r3, #4294967295
 800455c:	9306      	str	r3, [sp, #24]
 800455e:	bfa4      	itt	ge
 8004560:	2318      	movge	r3, #24
 8004562:	fb94 f4f3 	sdivge	r4, r4, r3
 8004566:	f06f 0317 	mvn.w	r3, #23
 800456a:	fb04 3303 	mla	r3, r4, r3, r3
 800456e:	eb03 0a02 	add.w	sl, r3, r2
 8004572:	9a06      	ldr	r2, [sp, #24]
 8004574:	9b02      	ldr	r3, [sp, #8]
 8004576:	1aa7      	subs	r7, r4, r2
 8004578:	eb03 0802 	add.w	r8, r3, r2
 800457c:	9ba3      	ldr	r3, [sp, #652]	@ 0x28c
 800457e:	2500      	movs	r5, #0
 8004580:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8004584:	2200      	movs	r2, #0
 8004586:	2300      	movs	r3, #0
 8004588:	9009      	str	r0, [sp, #36]	@ 0x24
 800458a:	ae20      	add	r6, sp, #128	@ 0x80
 800458c:	4545      	cmp	r5, r8
 800458e:	dd13      	ble.n	80045b8 <__kernel_rem_pio2+0x84>
 8004590:	2700      	movs	r7, #0
 8004592:	9a08      	ldr	r2, [sp, #32]
 8004594:	ab20      	add	r3, sp, #128	@ 0x80
 8004596:	eb03 05c2 	add.w	r5, r3, r2, lsl #3
 800459a:	f50d 7be0 	add.w	fp, sp, #448	@ 0x1c0
 800459e:	9b02      	ldr	r3, [sp, #8]
 80045a0:	429f      	cmp	r7, r3
 80045a2:	dc33      	bgt.n	800460c <__kernel_rem_pio2+0xd8>
 80045a4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80045a6:	2200      	movs	r2, #0
 80045a8:	f1a3 0908 	sub.w	r9, r3, #8
 80045ac:	2300      	movs	r3, #0
 80045ae:	46a8      	mov	r8, r5
 80045b0:	2600      	movs	r6, #0
 80045b2:	e9cd 2300 	strd	r2, r3, [sp]
 80045b6:	e01f      	b.n	80045f8 <__kernel_rem_pio2+0xc4>
 80045b8:	42ef      	cmn	r7, r5
 80045ba:	d40b      	bmi.n	80045d4 <__kernel_rem_pio2+0xa0>
 80045bc:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 80045c0:	e9cd 2300 	strd	r2, r3, [sp]
 80045c4:	f7fb ff16 	bl	80003f4 <__aeabi_i2d>
 80045c8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80045cc:	e8e6 0102 	strd	r0, r1, [r6], #8
 80045d0:	3501      	adds	r5, #1
 80045d2:	e7db      	b.n	800458c <__kernel_rem_pio2+0x58>
 80045d4:	4610      	mov	r0, r2
 80045d6:	4619      	mov	r1, r3
 80045d8:	e7f8      	b.n	80045cc <__kernel_rem_pio2+0x98>
 80045da:	e978 2302 	ldrd	r2, r3, [r8, #-8]!
 80045de:	e9f9 0102 	ldrd	r0, r1, [r9, #8]!
 80045e2:	f7fb ff71 	bl	80004c8 <__aeabi_dmul>
 80045e6:	4602      	mov	r2, r0
 80045e8:	460b      	mov	r3, r1
 80045ea:	e9dd 0100 	ldrd	r0, r1, [sp]
 80045ee:	f7fb fdb5 	bl	800015c <__adddf3>
 80045f2:	e9cd 0100 	strd	r0, r1, [sp]
 80045f6:	3601      	adds	r6, #1
 80045f8:	9b06      	ldr	r3, [sp, #24]
 80045fa:	429e      	cmp	r6, r3
 80045fc:	dded      	ble.n	80045da <__kernel_rem_pio2+0xa6>
 80045fe:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004602:	3701      	adds	r7, #1
 8004604:	e8eb 2302 	strd	r2, r3, [fp], #8
 8004608:	3508      	adds	r5, #8
 800460a:	e7c8      	b.n	800459e <__kernel_rem_pio2+0x6a>
 800460c:	9b02      	ldr	r3, [sp, #8]
 800460e:	aa0c      	add	r2, sp, #48	@ 0x30
 8004610:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8004614:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004616:	9ba3      	ldr	r3, [sp, #652]	@ 0x28c
 8004618:	f8dd b008 	ldr.w	fp, [sp, #8]
 800461c:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8004620:	930a      	str	r3, [sp, #40]	@ 0x28
 8004622:	ab98      	add	r3, sp, #608	@ 0x260
 8004624:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8004628:	e953 4528 	ldrd	r4, r5, [r3, #-160]	@ 0xa0
 800462c:	ab70      	add	r3, sp, #448	@ 0x1c0
 800462e:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8004632:	ae0c      	add	r6, sp, #48	@ 0x30
 8004634:	4699      	mov	r9, r3
 8004636:	46b0      	mov	r8, r6
 8004638:	465f      	mov	r7, fp
 800463a:	9307      	str	r3, [sp, #28]
 800463c:	2f00      	cmp	r7, #0
 800463e:	dc71      	bgt.n	8004724 <__kernel_rem_pio2+0x1f0>
 8004640:	4652      	mov	r2, sl
 8004642:	4620      	mov	r0, r4
 8004644:	4629      	mov	r1, r5
 8004646:	f000 fa97 	bl	8004b78 <scalbn>
 800464a:	2200      	movs	r2, #0
 800464c:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 8004650:	4604      	mov	r4, r0
 8004652:	460d      	mov	r5, r1
 8004654:	f7fb ff38 	bl	80004c8 <__aeabi_dmul>
 8004658:	f000 fb02 	bl	8004c60 <floor>
 800465c:	2200      	movs	r2, #0
 800465e:	4b74      	ldr	r3, [pc, #464]	@ (8004830 <__kernel_rem_pio2+0x2fc>)
 8004660:	f7fb ff32 	bl	80004c8 <__aeabi_dmul>
 8004664:	4602      	mov	r2, r0
 8004666:	460b      	mov	r3, r1
 8004668:	4620      	mov	r0, r4
 800466a:	4629      	mov	r1, r5
 800466c:	f7fb fd74 	bl	8000158 <__aeabi_dsub>
 8004670:	460d      	mov	r5, r1
 8004672:	4604      	mov	r4, r0
 8004674:	f7fc f9c2 	bl	80009fc <__aeabi_d2iz>
 8004678:	9005      	str	r0, [sp, #20]
 800467a:	f7fb febb 	bl	80003f4 <__aeabi_i2d>
 800467e:	4602      	mov	r2, r0
 8004680:	460b      	mov	r3, r1
 8004682:	4620      	mov	r0, r4
 8004684:	4629      	mov	r1, r5
 8004686:	f7fb fd67 	bl	8000158 <__aeabi_dsub>
 800468a:	f1ba 0f00 	cmp.w	sl, #0
 800468e:	4680      	mov	r8, r0
 8004690:	4689      	mov	r9, r1
 8004692:	dd6d      	ble.n	8004770 <__kernel_rem_pio2+0x23c>
 8004694:	f10b 31ff 	add.w	r1, fp, #4294967295
 8004698:	ab0c      	add	r3, sp, #48	@ 0x30
 800469a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800469e:	9c05      	ldr	r4, [sp, #20]
 80046a0:	f1ca 0018 	rsb	r0, sl, #24
 80046a4:	fa43 f200 	asr.w	r2, r3, r0
 80046a8:	4414      	add	r4, r2
 80046aa:	4082      	lsls	r2, r0
 80046ac:	1a9b      	subs	r3, r3, r2
 80046ae:	aa0c      	add	r2, sp, #48	@ 0x30
 80046b0:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 80046b4:	f1ca 0217 	rsb	r2, sl, #23
 80046b8:	9405      	str	r4, [sp, #20]
 80046ba:	4113      	asrs	r3, r2
 80046bc:	9300      	str	r3, [sp, #0]
 80046be:	9b00      	ldr	r3, [sp, #0]
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	dd64      	ble.n	800478e <__kernel_rem_pio2+0x25a>
 80046c4:	2200      	movs	r2, #0
 80046c6:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
 80046ca:	4614      	mov	r4, r2
 80046cc:	9b05      	ldr	r3, [sp, #20]
 80046ce:	3301      	adds	r3, #1
 80046d0:	9305      	str	r3, [sp, #20]
 80046d2:	4593      	cmp	fp, r2
 80046d4:	f300 809d 	bgt.w	8004812 <__kernel_rem_pio2+0x2de>
 80046d8:	f1ba 0f00 	cmp.w	sl, #0
 80046dc:	dd07      	ble.n	80046ee <__kernel_rem_pio2+0x1ba>
 80046de:	f1ba 0f01 	cmp.w	sl, #1
 80046e2:	f000 80b3 	beq.w	800484c <__kernel_rem_pio2+0x318>
 80046e6:	f1ba 0f02 	cmp.w	sl, #2
 80046ea:	f000 80ba 	beq.w	8004862 <__kernel_rem_pio2+0x32e>
 80046ee:	9b00      	ldr	r3, [sp, #0]
 80046f0:	2b02      	cmp	r3, #2
 80046f2:	d14c      	bne.n	800478e <__kernel_rem_pio2+0x25a>
 80046f4:	4642      	mov	r2, r8
 80046f6:	464b      	mov	r3, r9
 80046f8:	2000      	movs	r0, #0
 80046fa:	494e      	ldr	r1, [pc, #312]	@ (8004834 <__kernel_rem_pio2+0x300>)
 80046fc:	f7fb fd2c 	bl	8000158 <__aeabi_dsub>
 8004700:	4680      	mov	r8, r0
 8004702:	4689      	mov	r9, r1
 8004704:	2c00      	cmp	r4, #0
 8004706:	d042      	beq.n	800478e <__kernel_rem_pio2+0x25a>
 8004708:	4652      	mov	r2, sl
 800470a:	2000      	movs	r0, #0
 800470c:	4949      	ldr	r1, [pc, #292]	@ (8004834 <__kernel_rem_pio2+0x300>)
 800470e:	f000 fa33 	bl	8004b78 <scalbn>
 8004712:	4602      	mov	r2, r0
 8004714:	460b      	mov	r3, r1
 8004716:	4640      	mov	r0, r8
 8004718:	4649      	mov	r1, r9
 800471a:	f7fb fd1d 	bl	8000158 <__aeabi_dsub>
 800471e:	4680      	mov	r8, r0
 8004720:	4689      	mov	r9, r1
 8004722:	e034      	b.n	800478e <__kernel_rem_pio2+0x25a>
 8004724:	2200      	movs	r2, #0
 8004726:	4b44      	ldr	r3, [pc, #272]	@ (8004838 <__kernel_rem_pio2+0x304>)
 8004728:	4620      	mov	r0, r4
 800472a:	4629      	mov	r1, r5
 800472c:	f7fb fecc 	bl	80004c8 <__aeabi_dmul>
 8004730:	f7fc f964 	bl	80009fc <__aeabi_d2iz>
 8004734:	f7fb fe5e 	bl	80003f4 <__aeabi_i2d>
 8004738:	4602      	mov	r2, r0
 800473a:	460b      	mov	r3, r1
 800473c:	e9cd 2300 	strd	r2, r3, [sp]
 8004740:	2200      	movs	r2, #0
 8004742:	4b3e      	ldr	r3, [pc, #248]	@ (800483c <__kernel_rem_pio2+0x308>)
 8004744:	f7fb fec0 	bl	80004c8 <__aeabi_dmul>
 8004748:	4602      	mov	r2, r0
 800474a:	460b      	mov	r3, r1
 800474c:	4620      	mov	r0, r4
 800474e:	4629      	mov	r1, r5
 8004750:	f7fb fd02 	bl	8000158 <__aeabi_dsub>
 8004754:	f7fc f952 	bl	80009fc <__aeabi_d2iz>
 8004758:	e979 2302 	ldrd	r2, r3, [r9, #-8]!
 800475c:	f848 0b04 	str.w	r0, [r8], #4
 8004760:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004764:	f7fb fcfa 	bl	800015c <__adddf3>
 8004768:	3f01      	subs	r7, #1
 800476a:	4604      	mov	r4, r0
 800476c:	460d      	mov	r5, r1
 800476e:	e765      	b.n	800463c <__kernel_rem_pio2+0x108>
 8004770:	d106      	bne.n	8004780 <__kernel_rem_pio2+0x24c>
 8004772:	f10b 33ff 	add.w	r3, fp, #4294967295
 8004776:	aa0c      	add	r2, sp, #48	@ 0x30
 8004778:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800477c:	15db      	asrs	r3, r3, #23
 800477e:	e79d      	b.n	80046bc <__kernel_rem_pio2+0x188>
 8004780:	2200      	movs	r2, #0
 8004782:	4b2f      	ldr	r3, [pc, #188]	@ (8004840 <__kernel_rem_pio2+0x30c>)
 8004784:	f7fc f926 	bl	80009d4 <__aeabi_dcmpge>
 8004788:	2800      	cmp	r0, #0
 800478a:	d13f      	bne.n	800480c <__kernel_rem_pio2+0x2d8>
 800478c:	9000      	str	r0, [sp, #0]
 800478e:	2200      	movs	r2, #0
 8004790:	2300      	movs	r3, #0
 8004792:	4640      	mov	r0, r8
 8004794:	4649      	mov	r1, r9
 8004796:	f7fc f8ff 	bl	8000998 <__aeabi_dcmpeq>
 800479a:	2800      	cmp	r0, #0
 800479c:	f000 80b0 	beq.w	8004900 <__kernel_rem_pio2+0x3cc>
 80047a0:	2200      	movs	r2, #0
 80047a2:	f10b 33ff 	add.w	r3, fp, #4294967295
 80047a6:	9902      	ldr	r1, [sp, #8]
 80047a8:	428b      	cmp	r3, r1
 80047aa:	da62      	bge.n	8004872 <__kernel_rem_pio2+0x33e>
 80047ac:	2a00      	cmp	r2, #0
 80047ae:	d077      	beq.n	80048a0 <__kernel_rem_pio2+0x36c>
 80047b0:	f10b 3bff 	add.w	fp, fp, #4294967295
 80047b4:	ab0c      	add	r3, sp, #48	@ 0x30
 80047b6:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 80047ba:	f1aa 0a18 	sub.w	sl, sl, #24
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d0f6      	beq.n	80047b0 <__kernel_rem_pio2+0x27c>
 80047c2:	4652      	mov	r2, sl
 80047c4:	2000      	movs	r0, #0
 80047c6:	491b      	ldr	r1, [pc, #108]	@ (8004834 <__kernel_rem_pio2+0x300>)
 80047c8:	f000 f9d6 	bl	8004b78 <scalbn>
 80047cc:	465d      	mov	r5, fp
 80047ce:	4606      	mov	r6, r0
 80047d0:	460f      	mov	r7, r1
 80047d2:	f04f 0900 	mov.w	r9, #0
 80047d6:	ab70      	add	r3, sp, #448	@ 0x1c0
 80047d8:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8004838 <__kernel_rem_pio2+0x304>
 80047dc:	ea4f 04cb 	mov.w	r4, fp, lsl #3
 80047e0:	eb03 08cb 	add.w	r8, r3, fp, lsl #3
 80047e4:	2d00      	cmp	r5, #0
 80047e6:	f280 80c1 	bge.w	800496c <__kernel_rem_pio2+0x438>
 80047ea:	465d      	mov	r5, fp
 80047ec:	2d00      	cmp	r5, #0
 80047ee:	f2c0 80f1 	blt.w	80049d4 <__kernel_rem_pio2+0x4a0>
 80047f2:	4b14      	ldr	r3, [pc, #80]	@ (8004844 <__kernel_rem_pio2+0x310>)
 80047f4:	f04f 0900 	mov.w	r9, #0
 80047f8:	9306      	str	r3, [sp, #24]
 80047fa:	ab70      	add	r3, sp, #448	@ 0x1c0
 80047fc:	f04f 0a00 	mov.w	sl, #0
 8004800:	2700      	movs	r7, #0
 8004802:	eb03 08c5 	add.w	r8, r3, r5, lsl #3
 8004806:	ebab 0605 	sub.w	r6, fp, r5
 800480a:	e0d7      	b.n	80049bc <__kernel_rem_pio2+0x488>
 800480c:	2302      	movs	r3, #2
 800480e:	9300      	str	r3, [sp, #0]
 8004810:	e758      	b.n	80046c4 <__kernel_rem_pio2+0x190>
 8004812:	f856 3b04 	ldr.w	r3, [r6], #4
 8004816:	b9bc      	cbnz	r4, 8004848 <__kernel_rem_pio2+0x314>
 8004818:	b123      	cbz	r3, 8004824 <__kernel_rem_pio2+0x2f0>
 800481a:	f1c3 7380 	rsb	r3, r3, #16777216	@ 0x1000000
 800481e:	f846 3c04 	str.w	r3, [r6, #-4]
 8004822:	2301      	movs	r3, #1
 8004824:	461c      	mov	r4, r3
 8004826:	3201      	adds	r2, #1
 8004828:	e753      	b.n	80046d2 <__kernel_rem_pio2+0x19e>
 800482a:	bf00      	nop
 800482c:	08004f70 	.word	0x08004f70
 8004830:	40200000 	.word	0x40200000
 8004834:	3ff00000 	.word	0x3ff00000
 8004838:	3e700000 	.word	0x3e700000
 800483c:	41700000 	.word	0x41700000
 8004840:	3fe00000 	.word	0x3fe00000
 8004844:	08004f30 	.word	0x08004f30
 8004848:	1acb      	subs	r3, r1, r3
 800484a:	e7e8      	b.n	800481e <__kernel_rem_pio2+0x2ea>
 800484c:	f10b 32ff 	add.w	r2, fp, #4294967295
 8004850:	ab0c      	add	r3, sp, #48	@ 0x30
 8004852:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004856:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800485a:	a90c      	add	r1, sp, #48	@ 0x30
 800485c:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8004860:	e745      	b.n	80046ee <__kernel_rem_pio2+0x1ba>
 8004862:	f10b 32ff 	add.w	r2, fp, #4294967295
 8004866:	ab0c      	add	r3, sp, #48	@ 0x30
 8004868:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800486c:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8004870:	e7f3      	b.n	800485a <__kernel_rem_pio2+0x326>
 8004872:	a90c      	add	r1, sp, #48	@ 0x30
 8004874:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8004878:	3b01      	subs	r3, #1
 800487a:	430a      	orrs	r2, r1
 800487c:	e793      	b.n	80047a6 <__kernel_rem_pio2+0x272>
 800487e:	3401      	adds	r4, #1
 8004880:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8004884:	2a00      	cmp	r2, #0
 8004886:	d0fa      	beq.n	800487e <__kernel_rem_pio2+0x34a>
 8004888:	9b08      	ldr	r3, [sp, #32]
 800488a:	aa20      	add	r2, sp, #128	@ 0x80
 800488c:	445b      	add	r3, fp
 800488e:	f10b 0801 	add.w	r8, fp, #1
 8004892:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8004896:	445c      	add	r4, fp
 8004898:	4544      	cmp	r4, r8
 800489a:	da04      	bge.n	80048a6 <__kernel_rem_pio2+0x372>
 800489c:	46a3      	mov	fp, r4
 800489e:	e6c0      	b.n	8004622 <__kernel_rem_pio2+0xee>
 80048a0:	2401      	movs	r4, #1
 80048a2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80048a4:	e7ec      	b.n	8004880 <__kernel_rem_pio2+0x34c>
 80048a6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80048a8:	46ab      	mov	fp, r5
 80048aa:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 80048ae:	f7fb fda1 	bl	80003f4 <__aeabi_i2d>
 80048b2:	f04f 0900 	mov.w	r9, #0
 80048b6:	2600      	movs	r6, #0
 80048b8:	2700      	movs	r7, #0
 80048ba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80048bc:	e9c5 0100 	strd	r0, r1, [r5]
 80048c0:	3b08      	subs	r3, #8
 80048c2:	9300      	str	r3, [sp, #0]
 80048c4:	9b06      	ldr	r3, [sp, #24]
 80048c6:	4599      	cmp	r9, r3
 80048c8:	dd07      	ble.n	80048da <__kernel_rem_pio2+0x3a6>
 80048ca:	9b07      	ldr	r3, [sp, #28]
 80048cc:	f108 0801 	add.w	r8, r8, #1
 80048d0:	e9e3 6702 	strd	r6, r7, [r3, #8]!
 80048d4:	3508      	adds	r5, #8
 80048d6:	9307      	str	r3, [sp, #28]
 80048d8:	e7de      	b.n	8004898 <__kernel_rem_pio2+0x364>
 80048da:	9900      	ldr	r1, [sp, #0]
 80048dc:	f109 0901 	add.w	r9, r9, #1
 80048e0:	e9f1 2302 	ldrd	r2, r3, [r1, #8]!
 80048e4:	9100      	str	r1, [sp, #0]
 80048e6:	e87b 0102 	ldrd	r0, r1, [fp], #-8
 80048ea:	f7fb fded 	bl	80004c8 <__aeabi_dmul>
 80048ee:	4602      	mov	r2, r0
 80048f0:	460b      	mov	r3, r1
 80048f2:	4630      	mov	r0, r6
 80048f4:	4639      	mov	r1, r7
 80048f6:	f7fb fc31 	bl	800015c <__adddf3>
 80048fa:	4606      	mov	r6, r0
 80048fc:	460f      	mov	r7, r1
 80048fe:	e7e1      	b.n	80048c4 <__kernel_rem_pio2+0x390>
 8004900:	f1ca 0200 	rsb	r2, sl, #0
 8004904:	4640      	mov	r0, r8
 8004906:	4649      	mov	r1, r9
 8004908:	f000 f936 	bl	8004b78 <scalbn>
 800490c:	2200      	movs	r2, #0
 800490e:	4b97      	ldr	r3, [pc, #604]	@ (8004b6c <__kernel_rem_pio2+0x638>)
 8004910:	4604      	mov	r4, r0
 8004912:	460d      	mov	r5, r1
 8004914:	f7fc f85e 	bl	80009d4 <__aeabi_dcmpge>
 8004918:	b300      	cbz	r0, 800495c <__kernel_rem_pio2+0x428>
 800491a:	2200      	movs	r2, #0
 800491c:	4b94      	ldr	r3, [pc, #592]	@ (8004b70 <__kernel_rem_pio2+0x63c>)
 800491e:	4620      	mov	r0, r4
 8004920:	4629      	mov	r1, r5
 8004922:	f7fb fdd1 	bl	80004c8 <__aeabi_dmul>
 8004926:	f7fc f869 	bl	80009fc <__aeabi_d2iz>
 800492a:	4606      	mov	r6, r0
 800492c:	f7fb fd62 	bl	80003f4 <__aeabi_i2d>
 8004930:	2200      	movs	r2, #0
 8004932:	4b8e      	ldr	r3, [pc, #568]	@ (8004b6c <__kernel_rem_pio2+0x638>)
 8004934:	f7fb fdc8 	bl	80004c8 <__aeabi_dmul>
 8004938:	460b      	mov	r3, r1
 800493a:	4602      	mov	r2, r0
 800493c:	4629      	mov	r1, r5
 800493e:	4620      	mov	r0, r4
 8004940:	f7fb fc0a 	bl	8000158 <__aeabi_dsub>
 8004944:	f7fc f85a 	bl	80009fc <__aeabi_d2iz>
 8004948:	ab0c      	add	r3, sp, #48	@ 0x30
 800494a:	f843 002b 	str.w	r0, [r3, fp, lsl #2]
 800494e:	f10b 0b01 	add.w	fp, fp, #1
 8004952:	f10a 0a18 	add.w	sl, sl, #24
 8004956:	f843 602b 	str.w	r6, [r3, fp, lsl #2]
 800495a:	e732      	b.n	80047c2 <__kernel_rem_pio2+0x28e>
 800495c:	4620      	mov	r0, r4
 800495e:	4629      	mov	r1, r5
 8004960:	f7fc f84c 	bl	80009fc <__aeabi_d2iz>
 8004964:	ab0c      	add	r3, sp, #48	@ 0x30
 8004966:	f843 002b 	str.w	r0, [r3, fp, lsl #2]
 800496a:	e72a      	b.n	80047c2 <__kernel_rem_pio2+0x28e>
 800496c:	ab0c      	add	r3, sp, #48	@ 0x30
 800496e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8004972:	f7fb fd3f 	bl	80003f4 <__aeabi_i2d>
 8004976:	4632      	mov	r2, r6
 8004978:	463b      	mov	r3, r7
 800497a:	f7fb fda5 	bl	80004c8 <__aeabi_dmul>
 800497e:	464a      	mov	r2, r9
 8004980:	e868 0102 	strd	r0, r1, [r8], #-8
 8004984:	4653      	mov	r3, sl
 8004986:	4630      	mov	r0, r6
 8004988:	4639      	mov	r1, r7
 800498a:	f7fb fd9d 	bl	80004c8 <__aeabi_dmul>
 800498e:	3d01      	subs	r5, #1
 8004990:	4606      	mov	r6, r0
 8004992:	460f      	mov	r7, r1
 8004994:	e726      	b.n	80047e4 <__kernel_rem_pio2+0x2b0>
 8004996:	f8dd c018 	ldr.w	ip, [sp, #24]
 800499a:	e8f8 2302 	ldrd	r2, r3, [r8], #8
 800499e:	e8fc 0102 	ldrd	r0, r1, [ip], #8
 80049a2:	f8cd c018 	str.w	ip, [sp, #24]
 80049a6:	f7fb fd8f 	bl	80004c8 <__aeabi_dmul>
 80049aa:	4602      	mov	r2, r0
 80049ac:	460b      	mov	r3, r1
 80049ae:	4648      	mov	r0, r9
 80049b0:	4651      	mov	r1, sl
 80049b2:	f7fb fbd3 	bl	800015c <__adddf3>
 80049b6:	4681      	mov	r9, r0
 80049b8:	468a      	mov	sl, r1
 80049ba:	3701      	adds	r7, #1
 80049bc:	9b02      	ldr	r3, [sp, #8]
 80049be:	429f      	cmp	r7, r3
 80049c0:	dc01      	bgt.n	80049c6 <__kernel_rem_pio2+0x492>
 80049c2:	42b7      	cmp	r7, r6
 80049c4:	dde7      	ble.n	8004996 <__kernel_rem_pio2+0x462>
 80049c6:	ab48      	add	r3, sp, #288	@ 0x120
 80049c8:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 80049cc:	e9c6 9a00 	strd	r9, sl, [r6]
 80049d0:	3d01      	subs	r5, #1
 80049d2:	e70b      	b.n	80047ec <__kernel_rem_pio2+0x2b8>
 80049d4:	9ba2      	ldr	r3, [sp, #648]	@ 0x288
 80049d6:	2b02      	cmp	r3, #2
 80049d8:	dc09      	bgt.n	80049ee <__kernel_rem_pio2+0x4ba>
 80049da:	2b00      	cmp	r3, #0
 80049dc:	dc2c      	bgt.n	8004a38 <__kernel_rem_pio2+0x504>
 80049de:	d04e      	beq.n	8004a7e <__kernel_rem_pio2+0x54a>
 80049e0:	9b05      	ldr	r3, [sp, #20]
 80049e2:	f003 0007 	and.w	r0, r3, #7
 80049e6:	f50d 7d19 	add.w	sp, sp, #612	@ 0x264
 80049ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80049ee:	9ba2      	ldr	r3, [sp, #648]	@ 0x288
 80049f0:	2b03      	cmp	r3, #3
 80049f2:	d1f5      	bne.n	80049e0 <__kernel_rem_pio2+0x4ac>
 80049f4:	ab48      	add	r3, sp, #288	@ 0x120
 80049f6:	441c      	add	r4, r3
 80049f8:	4625      	mov	r5, r4
 80049fa:	46da      	mov	sl, fp
 80049fc:	f1ba 0f00 	cmp.w	sl, #0
 8004a00:	dc63      	bgt.n	8004aca <__kernel_rem_pio2+0x596>
 8004a02:	4625      	mov	r5, r4
 8004a04:	46da      	mov	sl, fp
 8004a06:	f1ba 0f01 	cmp.w	sl, #1
 8004a0a:	dc7b      	bgt.n	8004b04 <__kernel_rem_pio2+0x5d0>
 8004a0c:	2000      	movs	r0, #0
 8004a0e:	2100      	movs	r1, #0
 8004a10:	f1bb 0f01 	cmp.w	fp, #1
 8004a14:	f300 8093 	bgt.w	8004b3e <__kernel_rem_pio2+0x60a>
 8004a18:	e9dd 5648 	ldrd	r5, r6, [sp, #288]	@ 0x120
 8004a1c:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	@ 0x128
 8004a20:	9b00      	ldr	r3, [sp, #0]
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	f040 8092 	bne.w	8004b4c <__kernel_rem_pio2+0x618>
 8004a28:	9b04      	ldr	r3, [sp, #16]
 8004a2a:	e9c3 5600 	strd	r5, r6, [r3]
 8004a2e:	e9c3 7802 	strd	r7, r8, [r3, #8]
 8004a32:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8004a36:	e7d3      	b.n	80049e0 <__kernel_rem_pio2+0x4ac>
 8004a38:	465d      	mov	r5, fp
 8004a3a:	2000      	movs	r0, #0
 8004a3c:	2100      	movs	r1, #0
 8004a3e:	ab48      	add	r3, sp, #288	@ 0x120
 8004a40:	441c      	add	r4, r3
 8004a42:	2d00      	cmp	r5, #0
 8004a44:	da32      	bge.n	8004aac <__kernel_rem_pio2+0x578>
 8004a46:	9b00      	ldr	r3, [sp, #0]
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d035      	beq.n	8004ab8 <__kernel_rem_pio2+0x584>
 8004a4c:	4602      	mov	r2, r0
 8004a4e:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8004a52:	9c04      	ldr	r4, [sp, #16]
 8004a54:	2501      	movs	r5, #1
 8004a56:	e9c4 2300 	strd	r2, r3, [r4]
 8004a5a:	4602      	mov	r2, r0
 8004a5c:	460b      	mov	r3, r1
 8004a5e:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	@ 0x120
 8004a62:	f7fb fb79 	bl	8000158 <__aeabi_dsub>
 8004a66:	ac48      	add	r4, sp, #288	@ 0x120
 8004a68:	45ab      	cmp	fp, r5
 8004a6a:	da28      	bge.n	8004abe <__kernel_rem_pio2+0x58a>
 8004a6c:	9b00      	ldr	r3, [sp, #0]
 8004a6e:	b113      	cbz	r3, 8004a76 <__kernel_rem_pio2+0x542>
 8004a70:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8004a74:	4619      	mov	r1, r3
 8004a76:	9b04      	ldr	r3, [sp, #16]
 8004a78:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8004a7c:	e7b0      	b.n	80049e0 <__kernel_rem_pio2+0x4ac>
 8004a7e:	2000      	movs	r0, #0
 8004a80:	2100      	movs	r1, #0
 8004a82:	ab48      	add	r3, sp, #288	@ 0x120
 8004a84:	441c      	add	r4, r3
 8004a86:	f1bb 0f00 	cmp.w	fp, #0
 8004a8a:	da08      	bge.n	8004a9e <__kernel_rem_pio2+0x56a>
 8004a8c:	9b00      	ldr	r3, [sp, #0]
 8004a8e:	b113      	cbz	r3, 8004a96 <__kernel_rem_pio2+0x562>
 8004a90:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8004a94:	4619      	mov	r1, r3
 8004a96:	9b04      	ldr	r3, [sp, #16]
 8004a98:	e9c3 0100 	strd	r0, r1, [r3]
 8004a9c:	e7a0      	b.n	80049e0 <__kernel_rem_pio2+0x4ac>
 8004a9e:	e874 2302 	ldrd	r2, r3, [r4], #-8
 8004aa2:	f7fb fb5b 	bl	800015c <__adddf3>
 8004aa6:	f10b 3bff 	add.w	fp, fp, #4294967295
 8004aaa:	e7ec      	b.n	8004a86 <__kernel_rem_pio2+0x552>
 8004aac:	e874 2302 	ldrd	r2, r3, [r4], #-8
 8004ab0:	f7fb fb54 	bl	800015c <__adddf3>
 8004ab4:	3d01      	subs	r5, #1
 8004ab6:	e7c4      	b.n	8004a42 <__kernel_rem_pio2+0x50e>
 8004ab8:	4602      	mov	r2, r0
 8004aba:	460b      	mov	r3, r1
 8004abc:	e7c9      	b.n	8004a52 <__kernel_rem_pio2+0x51e>
 8004abe:	e9f4 2302 	ldrd	r2, r3, [r4, #8]!
 8004ac2:	f7fb fb4b 	bl	800015c <__adddf3>
 8004ac6:	3501      	adds	r5, #1
 8004ac8:	e7ce      	b.n	8004a68 <__kernel_rem_pio2+0x534>
 8004aca:	e9d5 2300 	ldrd	r2, r3, [r5]
 8004ace:	e955 8902 	ldrd	r8, r9, [r5, #-8]
 8004ad2:	4640      	mov	r0, r8
 8004ad4:	4649      	mov	r1, r9
 8004ad6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004ada:	f7fb fb3f 	bl	800015c <__adddf3>
 8004ade:	4602      	mov	r2, r0
 8004ae0:	460b      	mov	r3, r1
 8004ae2:	4606      	mov	r6, r0
 8004ae4:	460f      	mov	r7, r1
 8004ae6:	4640      	mov	r0, r8
 8004ae8:	4649      	mov	r1, r9
 8004aea:	f7fb fb35 	bl	8000158 <__aeabi_dsub>
 8004aee:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004af2:	f7fb fb33 	bl	800015c <__adddf3>
 8004af6:	e865 0102 	strd	r0, r1, [r5], #-8
 8004afa:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004afe:	e9c5 6700 	strd	r6, r7, [r5]
 8004b02:	e77b      	b.n	80049fc <__kernel_rem_pio2+0x4c8>
 8004b04:	e9d5 2300 	ldrd	r2, r3, [r5]
 8004b08:	e955 8902 	ldrd	r8, r9, [r5, #-8]
 8004b0c:	4640      	mov	r0, r8
 8004b0e:	4649      	mov	r1, r9
 8004b10:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004b14:	f7fb fb22 	bl	800015c <__adddf3>
 8004b18:	4602      	mov	r2, r0
 8004b1a:	460b      	mov	r3, r1
 8004b1c:	4606      	mov	r6, r0
 8004b1e:	460f      	mov	r7, r1
 8004b20:	4640      	mov	r0, r8
 8004b22:	4649      	mov	r1, r9
 8004b24:	f7fb fb18 	bl	8000158 <__aeabi_dsub>
 8004b28:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004b2c:	f7fb fb16 	bl	800015c <__adddf3>
 8004b30:	e865 0102 	strd	r0, r1, [r5], #-8
 8004b34:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004b38:	e9c5 6700 	strd	r6, r7, [r5]
 8004b3c:	e763      	b.n	8004a06 <__kernel_rem_pio2+0x4d2>
 8004b3e:	e874 2302 	ldrd	r2, r3, [r4], #-8
 8004b42:	f7fb fb0b 	bl	800015c <__adddf3>
 8004b46:	f10b 3bff 	add.w	fp, fp, #4294967295
 8004b4a:	e761      	b.n	8004a10 <__kernel_rem_pio2+0x4dc>
 8004b4c:	9b04      	ldr	r3, [sp, #16]
 8004b4e:	9a04      	ldr	r2, [sp, #16]
 8004b50:	f106 4400 	add.w	r4, r6, #2147483648	@ 0x80000000
 8004b54:	601d      	str	r5, [r3, #0]
 8004b56:	605c      	str	r4, [r3, #4]
 8004b58:	609f      	str	r7, [r3, #8]
 8004b5a:	f108 4300 	add.w	r3, r8, #2147483648	@ 0x80000000
 8004b5e:	60d3      	str	r3, [r2, #12]
 8004b60:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8004b64:	6110      	str	r0, [r2, #16]
 8004b66:	6153      	str	r3, [r2, #20]
 8004b68:	e73a      	b.n	80049e0 <__kernel_rem_pio2+0x4ac>
 8004b6a:	bf00      	nop
 8004b6c:	41700000 	.word	0x41700000
 8004b70:	3e700000 	.word	0x3e700000
 8004b74:	00000000 	.word	0x00000000

08004b78 <scalbn>:
 8004b78:	e92d 48f0 	stmdb	sp!, {r4, r5, r6, r7, fp, lr}
 8004b7c:	4616      	mov	r6, r2
 8004b7e:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8004b82:	4683      	mov	fp, r0
 8004b84:	468c      	mov	ip, r1
 8004b86:	460b      	mov	r3, r1
 8004b88:	b982      	cbnz	r2, 8004bac <scalbn+0x34>
 8004b8a:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8004b8e:	4303      	orrs	r3, r0
 8004b90:	d035      	beq.n	8004bfe <scalbn+0x86>
 8004b92:	4b2d      	ldr	r3, [pc, #180]	@ (8004c48 <scalbn+0xd0>)
 8004b94:	2200      	movs	r2, #0
 8004b96:	f7fb fc97 	bl	80004c8 <__aeabi_dmul>
 8004b9a:	4b2c      	ldr	r3, [pc, #176]	@ (8004c4c <scalbn+0xd4>)
 8004b9c:	4683      	mov	fp, r0
 8004b9e:	429e      	cmp	r6, r3
 8004ba0:	468c      	mov	ip, r1
 8004ba2:	da0d      	bge.n	8004bc0 <scalbn+0x48>
 8004ba4:	a324      	add	r3, pc, #144	@ (adr r3, 8004c38 <scalbn+0xc0>)
 8004ba6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004baa:	e019      	b.n	8004be0 <scalbn+0x68>
 8004bac:	f240 77ff 	movw	r7, #2047	@ 0x7ff
 8004bb0:	42ba      	cmp	r2, r7
 8004bb2:	d109      	bne.n	8004bc8 <scalbn+0x50>
 8004bb4:	4602      	mov	r2, r0
 8004bb6:	f7fb fad1 	bl	800015c <__adddf3>
 8004bba:	4683      	mov	fp, r0
 8004bbc:	468c      	mov	ip, r1
 8004bbe:	e01e      	b.n	8004bfe <scalbn+0x86>
 8004bc0:	460b      	mov	r3, r1
 8004bc2:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8004bc6:	3a36      	subs	r2, #54	@ 0x36
 8004bc8:	f24c 3150 	movw	r1, #50000	@ 0xc350
 8004bcc:	428e      	cmp	r6, r1
 8004bce:	dd0a      	ble.n	8004be6 <scalbn+0x6e>
 8004bd0:	a31b      	add	r3, pc, #108	@ (adr r3, 8004c40 <scalbn+0xc8>)
 8004bd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bd6:	4665      	mov	r5, ip
 8004bd8:	f363 051e 	bfi	r5, r3, #0, #31
 8004bdc:	4629      	mov	r1, r5
 8004bde:	481c      	ldr	r0, [pc, #112]	@ (8004c50 <scalbn+0xd8>)
 8004be0:	f7fb fc72 	bl	80004c8 <__aeabi_dmul>
 8004be4:	e7e9      	b.n	8004bba <scalbn+0x42>
 8004be6:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 8004bea:	4432      	add	r2, r6
 8004bec:	428a      	cmp	r2, r1
 8004bee:	dcef      	bgt.n	8004bd0 <scalbn+0x58>
 8004bf0:	2a00      	cmp	r2, #0
 8004bf2:	dd08      	ble.n	8004c06 <scalbn+0x8e>
 8004bf4:	f36f 531e 	bfc	r3, #20, #11
 8004bf8:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8004bfc:	46ac      	mov	ip, r5
 8004bfe:	4658      	mov	r0, fp
 8004c00:	4661      	mov	r1, ip
 8004c02:	e8bd 88f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, pc}
 8004c06:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 8004c0a:	da09      	bge.n	8004c20 <scalbn+0xa8>
 8004c0c:	f00c 4300 	and.w	r3, ip, #2147483648	@ 0x80000000
 8004c10:	f043 71d2 	orr.w	r1, r3, #27525120	@ 0x1a40000
 8004c14:	f441 31b7 	orr.w	r1, r1, #93696	@ 0x16e00
 8004c18:	480e      	ldr	r0, [pc, #56]	@ (8004c54 <scalbn+0xdc>)
 8004c1a:	f041 011f 	orr.w	r1, r1, #31
 8004c1e:	e7c1      	b.n	8004ba4 <scalbn+0x2c>
 8004c20:	3236      	adds	r2, #54	@ 0x36
 8004c22:	f36f 531e 	bfc	r3, #20, #11
 8004c26:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8004c2a:	4658      	mov	r0, fp
 8004c2c:	4629      	mov	r1, r5
 8004c2e:	2200      	movs	r2, #0
 8004c30:	4b09      	ldr	r3, [pc, #36]	@ (8004c58 <scalbn+0xe0>)
 8004c32:	e7d5      	b.n	8004be0 <scalbn+0x68>
 8004c34:	f3af 8000 	nop.w
 8004c38:	c2f8f359 	.word	0xc2f8f359
 8004c3c:	01a56e1f 	.word	0x01a56e1f
 8004c40:	8800759c 	.word	0x8800759c
 8004c44:	7e37e43c 	.word	0x7e37e43c
 8004c48:	43500000 	.word	0x43500000
 8004c4c:	ffff3cb0 	.word	0xffff3cb0
 8004c50:	8800759c 	.word	0x8800759c
 8004c54:	c2f8f359 	.word	0xc2f8f359
 8004c58:	3c900000 	.word	0x3c900000
 8004c5c:	00000000 	.word	0x00000000

08004c60 <floor>:
 8004c60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004c64:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8004c68:	f2a7 36ff 	subw	r6, r7, #1023	@ 0x3ff
 8004c6c:	2e13      	cmp	r6, #19
 8004c6e:	4602      	mov	r2, r0
 8004c70:	460b      	mov	r3, r1
 8004c72:	460c      	mov	r4, r1
 8004c74:	4605      	mov	r5, r0
 8004c76:	4680      	mov	r8, r0
 8004c78:	dc35      	bgt.n	8004ce6 <floor+0x86>
 8004c7a:	2e00      	cmp	r6, #0
 8004c7c:	da17      	bge.n	8004cae <floor+0x4e>
 8004c7e:	a334      	add	r3, pc, #208	@ (adr r3, 8004d50 <floor+0xf0>)
 8004c80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c84:	f7fb fa6a 	bl	800015c <__adddf3>
 8004c88:	2200      	movs	r2, #0
 8004c8a:	2300      	movs	r3, #0
 8004c8c:	f7fb feac 	bl	80009e8 <__aeabi_dcmpgt>
 8004c90:	b150      	cbz	r0, 8004ca8 <floor+0x48>
 8004c92:	2c00      	cmp	r4, #0
 8004c94:	da57      	bge.n	8004d46 <floor+0xe6>
 8004c96:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 8004c9a:	432c      	orrs	r4, r5
 8004c9c:	2500      	movs	r5, #0
 8004c9e:	42ac      	cmp	r4, r5
 8004ca0:	4c2d      	ldr	r4, [pc, #180]	@ (8004d58 <floor+0xf8>)
 8004ca2:	bf08      	it	eq
 8004ca4:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 8004ca8:	4623      	mov	r3, r4
 8004caa:	462a      	mov	r2, r5
 8004cac:	e024      	b.n	8004cf8 <floor+0x98>
 8004cae:	4f2b      	ldr	r7, [pc, #172]	@ (8004d5c <floor+0xfc>)
 8004cb0:	4137      	asrs	r7, r6
 8004cb2:	ea01 0c07 	and.w	ip, r1, r7
 8004cb6:	ea5c 0c00 	orrs.w	ip, ip, r0
 8004cba:	d01d      	beq.n	8004cf8 <floor+0x98>
 8004cbc:	a324      	add	r3, pc, #144	@ (adr r3, 8004d50 <floor+0xf0>)
 8004cbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cc2:	f7fb fa4b 	bl	800015c <__adddf3>
 8004cc6:	2200      	movs	r2, #0
 8004cc8:	2300      	movs	r3, #0
 8004cca:	f7fb fe8d 	bl	80009e8 <__aeabi_dcmpgt>
 8004cce:	2800      	cmp	r0, #0
 8004cd0:	d0ea      	beq.n	8004ca8 <floor+0x48>
 8004cd2:	2c00      	cmp	r4, #0
 8004cd4:	bfbe      	ittt	lt
 8004cd6:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 8004cda:	4133      	asrlt	r3, r6
 8004cdc:	18e4      	addlt	r4, r4, r3
 8004cde:	2500      	movs	r5, #0
 8004ce0:	ea24 0407 	bic.w	r4, r4, r7
 8004ce4:	e7e0      	b.n	8004ca8 <floor+0x48>
 8004ce6:	2e33      	cmp	r6, #51	@ 0x33
 8004ce8:	dd0a      	ble.n	8004d00 <floor+0xa0>
 8004cea:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 8004cee:	d103      	bne.n	8004cf8 <floor+0x98>
 8004cf0:	f7fb fa34 	bl	800015c <__adddf3>
 8004cf4:	4602      	mov	r2, r0
 8004cf6:	460b      	mov	r3, r1
 8004cf8:	4610      	mov	r0, r2
 8004cfa:	4619      	mov	r1, r3
 8004cfc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004d00:	f04f 3cff 	mov.w	ip, #4294967295
 8004d04:	f2a7 4713 	subw	r7, r7, #1043	@ 0x413
 8004d08:	fa2c f707 	lsr.w	r7, ip, r7
 8004d0c:	4207      	tst	r7, r0
 8004d0e:	d0f3      	beq.n	8004cf8 <floor+0x98>
 8004d10:	a30f      	add	r3, pc, #60	@ (adr r3, 8004d50 <floor+0xf0>)
 8004d12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d16:	f7fb fa21 	bl	800015c <__adddf3>
 8004d1a:	2200      	movs	r2, #0
 8004d1c:	2300      	movs	r3, #0
 8004d1e:	f7fb fe63 	bl	80009e8 <__aeabi_dcmpgt>
 8004d22:	2800      	cmp	r0, #0
 8004d24:	d0c0      	beq.n	8004ca8 <floor+0x48>
 8004d26:	2c00      	cmp	r4, #0
 8004d28:	da0a      	bge.n	8004d40 <floor+0xe0>
 8004d2a:	2e14      	cmp	r6, #20
 8004d2c:	d101      	bne.n	8004d32 <floor+0xd2>
 8004d2e:	3401      	adds	r4, #1
 8004d30:	e006      	b.n	8004d40 <floor+0xe0>
 8004d32:	2301      	movs	r3, #1
 8004d34:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 8004d38:	40b3      	lsls	r3, r6
 8004d3a:	441d      	add	r5, r3
 8004d3c:	4545      	cmp	r5, r8
 8004d3e:	d3f6      	bcc.n	8004d2e <floor+0xce>
 8004d40:	ea25 0507 	bic.w	r5, r5, r7
 8004d44:	e7b0      	b.n	8004ca8 <floor+0x48>
 8004d46:	2500      	movs	r5, #0
 8004d48:	462c      	mov	r4, r5
 8004d4a:	e7ad      	b.n	8004ca8 <floor+0x48>
 8004d4c:	f3af 8000 	nop.w
 8004d50:	8800759c 	.word	0x8800759c
 8004d54:	7e37e43c 	.word	0x7e37e43c
 8004d58:	bff00000 	.word	0xbff00000
 8004d5c:	000fffff 	.word	0x000fffff

08004d60 <_init>:
 8004d60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d62:	bf00      	nop
 8004d64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d66:	bc08      	pop	{r3}
 8004d68:	469e      	mov	lr, r3
 8004d6a:	4770      	bx	lr

08004d6c <_fini>:
 8004d6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d6e:	bf00      	nop
 8004d70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d72:	bc08      	pop	{r3}
 8004d74:	469e      	mov	lr, r3
 8004d76:	4770      	bx	lr
